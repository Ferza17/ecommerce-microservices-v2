// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/payment/response.proto

package payment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentResponseMultiError, or nil if none found.
func (m *CreatePaymentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePaymentResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePaymentResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePaymentResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePaymentResponseMultiError(errors)
	}

	return nil
}

// CreatePaymentResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponseMultiError) AllErrors() []error { return m }

// CreatePaymentResponseValidationError is the validation error returned by
// CreatePaymentResponse.Validate if the designated constraints aren't met.
type CreatePaymentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponseValidationError) ErrorName() string {
	return "CreatePaymentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponseValidationError{}

// Validate checks the field values on FindPaymentByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindPaymentByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindPaymentByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindPaymentByIdResponseMultiError, or nil if none found.
func (m *FindPaymentByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindPaymentByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindPaymentByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindPaymentByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindPaymentByIdResponseMultiError(errors)
	}

	return nil
}

// FindPaymentByIdResponseMultiError is an error wrapping multiple validation
// errors returned by FindPaymentByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindPaymentByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentByIdResponseMultiError) AllErrors() []error { return m }

// FindPaymentByIdResponseValidationError is the validation error returned by
// FindPaymentByIdResponse.Validate if the designated constraints aren't met.
type FindPaymentByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindPaymentByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindPaymentByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindPaymentByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindPaymentByIdResponseValidationError) ErrorName() string {
	return "FindPaymentByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentByIdResponseValidationError{}

// Validate checks the field values on FindPaymentProviderByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindPaymentProviderByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindPaymentProviderByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindPaymentProviderByIdResponseMultiError, or nil if none found.
func (m *FindPaymentProviderByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentProviderByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindPaymentProviderByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindPaymentProviderByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindPaymentProviderByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindPaymentProviderByIdResponseMultiError(errors)
	}

	return nil
}

// FindPaymentProviderByIdResponseMultiError is an error wrapping multiple
// validation errors returned by FindPaymentProviderByIdResponse.ValidateAll()
// if the designated constraints aren't met.
type FindPaymentProviderByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentProviderByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentProviderByIdResponseMultiError) AllErrors() []error { return m }

// FindPaymentProviderByIdResponseValidationError is the validation error
// returned by FindPaymentProviderByIdResponse.Validate if the designated
// constraints aren't met.
type FindPaymentProviderByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentProviderByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindPaymentProviderByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindPaymentProviderByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindPaymentProviderByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindPaymentProviderByIdResponseValidationError) ErrorName() string {
	return "FindPaymentProviderByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentProviderByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentProviderByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentProviderByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentProviderByIdResponseValidationError{}

// Validate checks the field values on FindPaymentProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindPaymentProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindPaymentProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindPaymentProvidersResponseMultiError, or nil if none found.
func (m *FindPaymentProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindPaymentProvidersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindPaymentProvidersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindPaymentProvidersResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindPaymentProvidersResponseMultiError(errors)
	}

	return nil
}

// FindPaymentProvidersResponseMultiError is an error wrapping multiple
// validation errors returned by FindPaymentProvidersResponse.ValidateAll() if
// the designated constraints aren't met.
type FindPaymentProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentProvidersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentProvidersResponseMultiError) AllErrors() []error { return m }

// FindPaymentProvidersResponseValidationError is the validation error returned
// by FindPaymentProvidersResponse.Validate if the designated constraints
// aren't met.
type FindPaymentProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindPaymentProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindPaymentProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindPaymentProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindPaymentProvidersResponseValidationError) ErrorName() string {
	return "FindPaymentProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentProvidersResponseValidationError{}

// Validate checks the field values on
// CreatePaymentResponse_CreatePaymentResponseData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentResponse_CreatePaymentResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// CreatePaymentResponse_CreatePaymentResponseData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// CreatePaymentResponse_CreatePaymentResponseDataMultiError, or nil if none found.
func (m *CreatePaymentResponse_CreatePaymentResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentResponse_CreatePaymentResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreatePaymentResponse_CreatePaymentResponseDataMultiError(errors)
	}

	return nil
}

// CreatePaymentResponse_CreatePaymentResponseDataMultiError is an error
// wrapping multiple validation errors returned by
// CreatePaymentResponse_CreatePaymentResponseData.ValidateAll() if the
// designated constraints aren't met.
type CreatePaymentResponse_CreatePaymentResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentResponse_CreatePaymentResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentResponse_CreatePaymentResponseDataMultiError) AllErrors() []error { return m }

// CreatePaymentResponse_CreatePaymentResponseDataValidationError is the
// validation error returned by
// CreatePaymentResponse_CreatePaymentResponseData.Validate if the designated
// constraints aren't met.
type CreatePaymentResponse_CreatePaymentResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentResponse_CreatePaymentResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e CreatePaymentResponse_CreatePaymentResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e CreatePaymentResponse_CreatePaymentResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentResponse_CreatePaymentResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentResponse_CreatePaymentResponseDataValidationError) ErrorName() string {
	return "CreatePaymentResponse_CreatePaymentResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentResponse_CreatePaymentResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentResponse_CreatePaymentResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentResponse_CreatePaymentResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentResponse_CreatePaymentResponseDataValidationError{}

// Validate checks the field values on
// FindPaymentByIdResponse_FindPaymentByIdResponseData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindPaymentByIdResponse_FindPaymentByIdResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindPaymentByIdResponse_FindPaymentByIdResponseData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// FindPaymentByIdResponse_FindPaymentByIdResponseDataMultiError, or nil if
// none found.
func (m *FindPaymentByIdResponse_FindPaymentByIdResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentByIdResponse_FindPaymentByIdResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPayment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
					field:  "Payment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPayment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
				field:  "Payment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPaymentItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
						field:  fmt.Sprintf("PaymentItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
						field:  fmt.Sprintf("PaymentItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{
					field:  fmt.Sprintf("PaymentItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FindPaymentByIdResponse_FindPaymentByIdResponseDataMultiError(errors)
	}

	return nil
}

// FindPaymentByIdResponse_FindPaymentByIdResponseDataMultiError is an error
// wrapping multiple validation errors returned by
// FindPaymentByIdResponse_FindPaymentByIdResponseData.ValidateAll() if the
// designated constraints aren't met.
type FindPaymentByIdResponse_FindPaymentByIdResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentByIdResponse_FindPaymentByIdResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentByIdResponse_FindPaymentByIdResponseDataMultiError) AllErrors() []error { return m }

// FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError is the
// validation error returned by
// FindPaymentByIdResponse_FindPaymentByIdResponseData.Validate if the
// designated constraints aren't met.
type FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError) ErrorName() string {
	return "FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentByIdResponse_FindPaymentByIdResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentByIdResponse_FindPaymentByIdResponseDataValidationError{}

// Validate checks the field values on
// FindPaymentProvidersResponse_FindPaymentProvidersResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindPaymentProvidersResponse_FindPaymentProvidersResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindPaymentProvidersResponse_FindPaymentProvidersResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindPaymentProvidersResponse_FindPaymentProvidersResponseDataMultiError, or
// nil if none found.
func (m *FindPaymentProvidersResponse_FindPaymentProvidersResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentProvidersResponse_FindPaymentProvidersResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return FindPaymentProvidersResponse_FindPaymentProvidersResponseDataMultiError(errors)
	}

	return nil
}

// FindPaymentProvidersResponse_FindPaymentProvidersResponseDataMultiError is
// an error wrapping multiple validation errors returned by
// FindPaymentProvidersResponse_FindPaymentProvidersResponseData.ValidateAll()
// if the designated constraints aren't met.
type FindPaymentProvidersResponse_FindPaymentProvidersResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentProvidersResponse_FindPaymentProvidersResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentProvidersResponse_FindPaymentProvidersResponseDataMultiError) AllErrors() []error {
	return m
}

// FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError
// is the validation error returned by
// FindPaymentProvidersResponse_FindPaymentProvidersResponseData.Validate if
// the designated constraints aren't met.
type FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError) ErrorName() string {
	return "FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentProvidersResponse_FindPaymentProvidersResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentProvidersResponse_FindPaymentProvidersResponseDataValidationError{}
