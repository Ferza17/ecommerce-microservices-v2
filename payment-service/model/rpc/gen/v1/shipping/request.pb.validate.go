// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/shipping/request.proto

package shipping

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShippingProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShippingProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShippingProviderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateShippingProviderRequestMultiError, or nil if none found.
func (m *CreateShippingProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateShippingProviderRequestMultiError(errors)
	}

	return nil
}

// CreateShippingProviderRequestMultiError is an error wrapping multiple
// validation errors returned by CreateShippingProviderRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateShippingProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingProviderRequestMultiError) AllErrors() []error { return m }

// CreateShippingProviderRequestValidationError is the validation error
// returned by CreateShippingProviderRequest.Validate if the designated
// constraints aren't met.
type CreateShippingProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingProviderRequestValidationError) ErrorName() string {
	return "CreateShippingProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingProviderRequestValidationError{}

// Validate checks the field values on GetShippingProviderByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShippingProviderByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShippingProviderByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetShippingProviderByIdRequestMultiError, or nil if none found.
func (m *GetShippingProviderByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingProviderByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetShippingProviderByIdRequestMultiError(errors)
	}

	return nil
}

// GetShippingProviderByIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetShippingProviderByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetShippingProviderByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingProviderByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingProviderByIdRequestMultiError) AllErrors() []error { return m }

// GetShippingProviderByIdRequestValidationError is the validation error
// returned by GetShippingProviderByIdRequest.Validate if the designated
// constraints aren't met.
type GetShippingProviderByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingProviderByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingProviderByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingProviderByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingProviderByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingProviderByIdRequestValidationError) ErrorName() string {
	return "GetShippingProviderByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingProviderByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingProviderByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingProviderByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingProviderByIdRequestValidationError{}

// Validate checks the field values on UpdateShippingProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShippingProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShippingProviderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateShippingProviderRequestMultiError, or nil if none found.
func (m *UpdateShippingProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShippingProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {

	}

	if len(errors) > 0 {
		return UpdateShippingProviderRequestMultiError(errors)
	}

	return nil
}

// UpdateShippingProviderRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateShippingProviderRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateShippingProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShippingProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShippingProviderRequestMultiError) AllErrors() []error { return m }

// UpdateShippingProviderRequestValidationError is the validation error
// returned by UpdateShippingProviderRequest.Validate if the designated
// constraints aren't met.
type UpdateShippingProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShippingProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShippingProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShippingProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShippingProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShippingProviderRequestValidationError) ErrorName() string {
	return "UpdateShippingProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShippingProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShippingProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShippingProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShippingProviderRequestValidationError{}

// Validate checks the field values on DeleteShippingProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShippingProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShippingProviderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteShippingProviderRequestMultiError, or nil if none found.
func (m *DeleteShippingProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShippingProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteShippingProviderRequestMultiError(errors)
	}

	return nil
}

// DeleteShippingProviderRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteShippingProviderRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteShippingProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShippingProviderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShippingProviderRequestMultiError) AllErrors() []error { return m }

// DeleteShippingProviderRequestValidationError is the validation error
// returned by DeleteShippingProviderRequest.Validate if the designated
// constraints aren't met.
type DeleteShippingProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShippingProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShippingProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShippingProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShippingProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShippingProviderRequestValidationError) ErrorName() string {
	return "DeleteShippingProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShippingProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShippingProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShippingProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShippingProviderRequestValidationError{}

// Validate checks the field values on ListShippingProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShippingProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShippingProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShippingProvidersRequestMultiError, or nil if none found.
func (m *ListShippingProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShippingProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := ListShippingProvidersRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := ListShippingProvidersRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListShippingProvidersRequestMultiError(errors)
	}

	return nil
}

// ListShippingProvidersRequestMultiError is an error wrapping multiple
// validation errors returned by ListShippingProvidersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListShippingProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShippingProvidersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShippingProvidersRequestMultiError) AllErrors() []error { return m }

// ListShippingProvidersRequestValidationError is the validation error returned
// by ListShippingProvidersRequest.Validate if the designated constraints
// aren't met.
type ListShippingProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShippingProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShippingProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShippingProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShippingProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShippingProvidersRequestValidationError) ErrorName() string {
	return "ListShippingProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShippingProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShippingProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShippingProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShippingProvidersRequestValidationError{}
