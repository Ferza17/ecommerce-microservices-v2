syntax = "proto3";
package commerce;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";


// LOCAL PROTO
import "v1/commerce/model.proto";
import "v1/commerce/request.proto";
import "v1/commerce/response.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "COMMERCE SERVICE API";
    version: "1.0.0";
    description: "API for COMMERCE, authentication, and authorization";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "bearer";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Enter the token with the `Bearer ` prefix, e.g. \"Bearer abcde12345\"";
      }
    }
  };
  security: {
    security_requirement: {
      key: "bearer";
    }
  };
};


service CartService {
  rpc CreateCartItem(commerce.CreateCartItemRequest) returns (commerce.CreateCartItemResponse) {
    option (google.api.http) = {
      post: "/v1/commerce/carts"
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new cart";
      tags: ["CART"];
      security: {
        security_requirement: {
          key: "bearer";
        }
      };
    };
  };
  rpc FindCartItemById(commerce.FindCartItemByIdRequest) returns (commerce.CartItem) {
    option (google.api.http) = {
      get: "/v1/commerce/carts/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get cart item details by ID";
      tags: ["CART"];
    };
  };
  rpc FindCartItemsWithPagination(commerce.FindCartItemsWithPaginationRequest) returns (commerce.FindCartItemsWithPaginationResponse){
    option (google.api.http) = {
      get: "/v1/commerce/carts"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get all cart item with pagination";
      tags: ["CART"];
    };
  };
  rpc UpdateCartItemById(commerce.UpdateCartItemByIdRequest) returns (commerce.UpdateCartItemByIdResponse){
    option (google.api.http) = {
      put: "/v1/commerce/carts/{id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update cart item by provided id";
      tags: ["CART"];
    };
  };
  rpc DeleteCartItemById(commerce.DeleteCartItemByIdRequest) returns (commerce.DeleteCartItemByIdResponse){
    option (google.api.http) = {
      delete: "/v1/commerce/carts/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete cart item by provided id";
      tags: ["CART"];
    };
  };
}

service WishlistService {
  rpc CreateWishlistItem(commerce.CreateWishlistItemRequest) returns (commerce.CreateWishlistItemResponse){
    option (google.api.http) = {
      post: "/v1/commerce/wishlists"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a new wishlist";
      tags: ["WISHLIST"];
    };
  };
  rpc FindWishlistItemWithPagination(commerce.FindWishlistItemWithPaginationRequest) returns (commerce.FindWishlistItemWithPaginationResponse){
    option (google.api.http) = {
      get: "/v1/commerce/wishlists"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get all wishlist item with pagination";
      tags: ["WISHLIST"];
    };
  };
  rpc DeleteWishlistItemById(commerce.DeleteWishlistItemByIdRequest) returns (commerce.DeleteWishlistItemByIdResponse){
    option (google.api.http) = {
      delete: "/v1/commerce/wishlists/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete wishlist item with provided id";
      tags: ["WISHLIST"];
    };
  };
}