// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/user/service.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_UpdateUserById_FullMethodName             = "/user.UserService/UpdateUserById"
	UserService_FindUserById_FullMethodName               = "/user.UserService/FindUserById"
	UserService_FindUserByEmailAndPassword_FullMethodName = "/user.UserService/FindUserByEmailAndPassword"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// COMMAND
	UpdateUserById(ctx context.Context, in *UpdateUserByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// QUERY
	FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*FindUserByIdResponse, error)
	FindUserByEmailAndPassword(ctx context.Context, in *FindUserByEmailAndPasswordRequest, opts ...grpc.CallOption) (*FindUserByEmailAndPasswordResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UpdateUserById(ctx context.Context, in *UpdateUserByIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserService_UpdateUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*FindUserByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserByIdResponse)
	err := c.cc.Invoke(ctx, UserService_FindUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindUserByEmailAndPassword(ctx context.Context, in *FindUserByEmailAndPasswordRequest, opts ...grpc.CallOption) (*FindUserByEmailAndPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindUserByEmailAndPasswordResponse)
	err := c.cc.Invoke(ctx, UserService_FindUserByEmailAndPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// COMMAND
	UpdateUserById(context.Context, *UpdateUserByIdRequest) (*emptypb.Empty, error)
	// QUERY
	FindUserById(context.Context, *FindUserByIdRequest) (*FindUserByIdResponse, error)
	FindUserByEmailAndPassword(context.Context, *FindUserByEmailAndPasswordRequest) (*FindUserByEmailAndPasswordResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) UpdateUserById(context.Context, *UpdateUserByIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserById not implemented")
}
func (UnimplementedUserServiceServer) FindUserById(context.Context, *FindUserByIdRequest) (*FindUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserById not implemented")
}
func (UnimplementedUserServiceServer) FindUserByEmailAndPassword(context.Context, *FindUserByEmailAndPasswordRequest) (*FindUserByEmailAndPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByEmailAndPassword not implemented")
}
func (UnimplementedUserServiceServer) testEmbeddedByValue() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UpdateUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUserById(ctx, req.(*UpdateUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUserById(ctx, req.(*FindUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindUserByEmailAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByEmailAndPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindUserByEmailAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindUserByEmailAndPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindUserByEmailAndPassword(ctx, req.(*FindUserByEmailAndPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserById",
			Handler:    _UserService_UpdateUserById_Handler,
		},
		{
			MethodName: "FindUserById",
			Handler:    _UserService_FindUserById_Handler,
		},
		{
			MethodName: "FindUserByEmailAndPassword",
			Handler:    _UserService_FindUserByEmailAndPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/user/service.proto",
}

const (
	AuthService_AuthUserRegister_FullMethodName                = "/user.AuthService/AuthUserRegister"
	AuthService_AuthUserLoginByEmailAndPassword_FullMethodName = "/user.AuthService/AuthUserLoginByEmailAndPassword"
	AuthService_AuthUserVerifyOtp_FullMethodName               = "/user.AuthService/AuthUserVerifyOtp"
	AuthService_AuthUserLogoutByToken_FullMethodName           = "/user.AuthService/AuthUserLogoutByToken"
	AuthService_AuthUserVerifyAccessControl_FullMethodName     = "/user.AuthService/AuthUserVerifyAccessControl"
	AuthService_AuthServiceVerifyIsExcluded_FullMethodName     = "/user.AuthService/AuthServiceVerifyIsExcluded"
	AuthService_AuthUserFindUserByToken_FullMethodName         = "/user.AuthService/AuthUserFindUserByToken"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// COMMAND
	AuthUserRegister(ctx context.Context, in *AuthUserRegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthUserLoginByEmailAndPassword(ctx context.Context, in *AuthUserLoginByEmailAndPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AuthUserVerifyOtp(ctx context.Context, in *AuthUserVerifyOtpRequest, opts ...grpc.CallOption) (*AuthUserVerifyOtpResponse, error)
	AuthUserLogoutByToken(ctx context.Context, in *AuthUserLogoutByTokenRequest, opts ...grpc.CallOption) (*AuthUserLogoutByTokenResponse, error)
	AuthUserVerifyAccessControl(ctx context.Context, in *AuthUserVerifyAccessControlRequest, opts ...grpc.CallOption) (*AuthUserVerifyAccessControlResponse, error)
	AuthServiceVerifyIsExcluded(ctx context.Context, in *AuthServiceVerifyIsExcludedRequest, opts ...grpc.CallOption) (*AuthServiceVerifyIsExcludedResponse, error)
	// QUERY
	AuthUserFindUserByToken(ctx context.Context, in *AuthUserFindUserByTokenRequest, opts ...grpc.CallOption) (*AuthUserFindUserByTokenResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) AuthUserRegister(ctx context.Context, in *AuthUserRegisterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_AuthUserRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthUserLoginByEmailAndPassword(ctx context.Context, in *AuthUserLoginByEmailAndPasswordRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AuthService_AuthUserLoginByEmailAndPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthUserVerifyOtp(ctx context.Context, in *AuthUserVerifyOtpRequest, opts ...grpc.CallOption) (*AuthUserVerifyOtpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthUserVerifyOtpResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthUserVerifyOtp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthUserLogoutByToken(ctx context.Context, in *AuthUserLogoutByTokenRequest, opts ...grpc.CallOption) (*AuthUserLogoutByTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthUserLogoutByTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthUserLogoutByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthUserVerifyAccessControl(ctx context.Context, in *AuthUserVerifyAccessControlRequest, opts ...grpc.CallOption) (*AuthUserVerifyAccessControlResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthUserVerifyAccessControlResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthUserVerifyAccessControl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthServiceVerifyIsExcluded(ctx context.Context, in *AuthServiceVerifyIsExcludedRequest, opts ...grpc.CallOption) (*AuthServiceVerifyIsExcludedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthServiceVerifyIsExcludedResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthServiceVerifyIsExcluded_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AuthUserFindUserByToken(ctx context.Context, in *AuthUserFindUserByTokenRequest, opts ...grpc.CallOption) (*AuthUserFindUserByTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthUserFindUserByTokenResponse)
	err := c.cc.Invoke(ctx, AuthService_AuthUserFindUserByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations should embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	// COMMAND
	AuthUserRegister(context.Context, *AuthUserRegisterRequest) (*emptypb.Empty, error)
	AuthUserLoginByEmailAndPassword(context.Context, *AuthUserLoginByEmailAndPasswordRequest) (*emptypb.Empty, error)
	AuthUserVerifyOtp(context.Context, *AuthUserVerifyOtpRequest) (*AuthUserVerifyOtpResponse, error)
	AuthUserLogoutByToken(context.Context, *AuthUserLogoutByTokenRequest) (*AuthUserLogoutByTokenResponse, error)
	AuthUserVerifyAccessControl(context.Context, *AuthUserVerifyAccessControlRequest) (*AuthUserVerifyAccessControlResponse, error)
	AuthServiceVerifyIsExcluded(context.Context, *AuthServiceVerifyIsExcludedRequest) (*AuthServiceVerifyIsExcludedResponse, error)
	// QUERY
	AuthUserFindUserByToken(context.Context, *AuthUserFindUserByTokenRequest) (*AuthUserFindUserByTokenResponse, error)
}

// UnimplementedAuthServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) AuthUserRegister(context.Context, *AuthUserRegisterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUserRegister not implemented")
}
func (UnimplementedAuthServiceServer) AuthUserLoginByEmailAndPassword(context.Context, *AuthUserLoginByEmailAndPasswordRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUserLoginByEmailAndPassword not implemented")
}
func (UnimplementedAuthServiceServer) AuthUserVerifyOtp(context.Context, *AuthUserVerifyOtpRequest) (*AuthUserVerifyOtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUserVerifyOtp not implemented")
}
func (UnimplementedAuthServiceServer) AuthUserLogoutByToken(context.Context, *AuthUserLogoutByTokenRequest) (*AuthUserLogoutByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUserLogoutByToken not implemented")
}
func (UnimplementedAuthServiceServer) AuthUserVerifyAccessControl(context.Context, *AuthUserVerifyAccessControlRequest) (*AuthUserVerifyAccessControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUserVerifyAccessControl not implemented")
}
func (UnimplementedAuthServiceServer) AuthServiceVerifyIsExcluded(context.Context, *AuthServiceVerifyIsExcludedRequest) (*AuthServiceVerifyIsExcludedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthServiceVerifyIsExcluded not implemented")
}
func (UnimplementedAuthServiceServer) AuthUserFindUserByToken(context.Context, *AuthUserFindUserByTokenRequest) (*AuthUserFindUserByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUserFindUserByToken not implemented")
}
func (UnimplementedAuthServiceServer) testEmbeddedByValue() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_AuthUserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthUserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthUserRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthUserRegister(ctx, req.(*AuthUserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthUserLoginByEmailAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserLoginByEmailAndPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthUserLoginByEmailAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthUserLoginByEmailAndPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthUserLoginByEmailAndPassword(ctx, req.(*AuthUserLoginByEmailAndPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthUserVerifyOtp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserVerifyOtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthUserVerifyOtp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthUserVerifyOtp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthUserVerifyOtp(ctx, req.(*AuthUserVerifyOtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthUserLogoutByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserLogoutByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthUserLogoutByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthUserLogoutByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthUserLogoutByToken(ctx, req.(*AuthUserLogoutByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthUserVerifyAccessControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserVerifyAccessControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthUserVerifyAccessControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthUserVerifyAccessControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthUserVerifyAccessControl(ctx, req.(*AuthUserVerifyAccessControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthServiceVerifyIsExcluded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthServiceVerifyIsExcludedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthServiceVerifyIsExcluded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthServiceVerifyIsExcluded_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthServiceVerifyIsExcluded(ctx, req.(*AuthServiceVerifyIsExcludedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AuthUserFindUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserFindUserByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AuthUserFindUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AuthUserFindUserByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AuthUserFindUserByToken(ctx, req.(*AuthUserFindUserByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthUserRegister",
			Handler:    _AuthService_AuthUserRegister_Handler,
		},
		{
			MethodName: "AuthUserLoginByEmailAndPassword",
			Handler:    _AuthService_AuthUserLoginByEmailAndPassword_Handler,
		},
		{
			MethodName: "AuthUserVerifyOtp",
			Handler:    _AuthService_AuthUserVerifyOtp_Handler,
		},
		{
			MethodName: "AuthUserLogoutByToken",
			Handler:    _AuthService_AuthUserLogoutByToken_Handler,
		},
		{
			MethodName: "AuthUserVerifyAccessControl",
			Handler:    _AuthService_AuthUserVerifyAccessControl_Handler,
		},
		{
			MethodName: "AuthServiceVerifyIsExcluded",
			Handler:    _AuthService_AuthServiceVerifyIsExcluded_Handler,
		},
		{
			MethodName: "AuthUserFindUserByToken",
			Handler:    _AuthService_AuthUserFindUserByToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/user/service.proto",
}
