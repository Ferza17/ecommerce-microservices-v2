// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user/request.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthUserRegisterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserRegisterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserRegisterRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserRegisterRequestMultiError, or nil if none found.
func (m *AuthUserRegisterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserRegisterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 0 {
		err := AuthUserRegisterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AuthUserRegisterRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := AuthUserRegisterRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := EnumRole_name[int32(m.GetRole())]; !ok {
		err := AuthUserRegisterRequestValidationError{
			field:  "Role",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthUserRegisterRequestMultiError(errors)
	}

	return nil
}

func (m *AuthUserRegisterRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AuthUserRegisterRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AuthUserRegisterRequestMultiError is an error wrapping multiple validation
// errors returned by AuthUserRegisterRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthUserRegisterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserRegisterRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserRegisterRequestMultiError) AllErrors() []error { return m }

// AuthUserRegisterRequestValidationError is the validation error returned by
// AuthUserRegisterRequest.Validate if the designated constraints aren't met.
type AuthUserRegisterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserRegisterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserRegisterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserRegisterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserRegisterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserRegisterRequestValidationError) ErrorName() string {
	return "AuthUserRegisterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserRegisterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserRegisterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserRegisterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserRegisterRequestValidationError{}

// Validate checks the field values on AuthUserLoginByEmailAndPasswordRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AuthUserLoginByEmailAndPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthUserLoginByEmailAndPasswordRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AuthUserLoginByEmailAndPasswordRequestMultiError, or nil if none found.
func (m *AuthUserLoginByEmailAndPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserLoginByEmailAndPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AuthUserLoginByEmailAndPasswordRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := AuthUserLoginByEmailAndPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthUserLoginByEmailAndPasswordRequestMultiError(errors)
	}

	return nil
}

func (m *AuthUserLoginByEmailAndPasswordRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AuthUserLoginByEmailAndPasswordRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AuthUserLoginByEmailAndPasswordRequestMultiError is an error wrapping
// multiple validation errors returned by
// AuthUserLoginByEmailAndPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthUserLoginByEmailAndPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserLoginByEmailAndPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserLoginByEmailAndPasswordRequestMultiError) AllErrors() []error { return m }

// AuthUserLoginByEmailAndPasswordRequestValidationError is the validation
// error returned by AuthUserLoginByEmailAndPasswordRequest.Validate if the
// designated constraints aren't met.
type AuthUserLoginByEmailAndPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserLoginByEmailAndPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserLoginByEmailAndPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserLoginByEmailAndPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserLoginByEmailAndPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserLoginByEmailAndPasswordRequestValidationError) ErrorName() string {
	return "AuthUserLoginByEmailAndPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserLoginByEmailAndPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserLoginByEmailAndPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserLoginByEmailAndPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserLoginByEmailAndPasswordRequestValidationError{}

// Validate checks the field values on AuthUserVerifyOtpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserVerifyOtpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserVerifyOtpRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserVerifyOtpRequestMultiError, or nil if none found.
func (m *AuthUserVerifyOtpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserVerifyOtpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOtp()) < 4 {
		err := AuthUserVerifyOtpRequestValidationError{
			field:  "Otp",
			reason: "value length must be at least 4 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthUserVerifyOtpRequestMultiError(errors)
	}

	return nil
}

// AuthUserVerifyOtpRequestMultiError is an error wrapping multiple validation
// errors returned by AuthUserVerifyOtpRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthUserVerifyOtpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserVerifyOtpRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserVerifyOtpRequestMultiError) AllErrors() []error { return m }

// AuthUserVerifyOtpRequestValidationError is the validation error returned by
// AuthUserVerifyOtpRequest.Validate if the designated constraints aren't met.
type AuthUserVerifyOtpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserVerifyOtpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserVerifyOtpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserVerifyOtpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserVerifyOtpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserVerifyOtpRequestValidationError) ErrorName() string {
	return "AuthUserVerifyOtpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserVerifyOtpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserVerifyOtpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserVerifyOtpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserVerifyOtpRequestValidationError{}

// Validate checks the field values on AuthUserLogoutByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserLogoutByTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserLogoutByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserLogoutByTokenRequestMultiError, or nil if none found.
func (m *AuthUserLogoutByTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserLogoutByTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 8 {
		err := AuthUserLogoutByTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthUserLogoutByTokenRequestMultiError(errors)
	}

	return nil
}

// AuthUserLogoutByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by AuthUserLogoutByTokenRequest.ValidateAll() if
// the designated constraints aren't met.
type AuthUserLogoutByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserLogoutByTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserLogoutByTokenRequestMultiError) AllErrors() []error { return m }

// AuthUserLogoutByTokenRequestValidationError is the validation error returned
// by AuthUserLogoutByTokenRequest.Validate if the designated constraints
// aren't met.
type AuthUserLogoutByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserLogoutByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserLogoutByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserLogoutByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserLogoutByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserLogoutByTokenRequestValidationError) ErrorName() string {
	return "AuthUserLogoutByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserLogoutByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserLogoutByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserLogoutByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserLogoutByTokenRequestValidationError{}

// Validate checks the field values on AuthUserVerifyAccessControlRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthUserVerifyAccessControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserVerifyAccessControlRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuthUserVerifyAccessControlRequestMultiError, or nil if none found.
func (m *AuthUserVerifyAccessControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserVerifyAccessControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 0 {
		err := AuthUserVerifyAccessControlRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.FullMethodName != nil {
		// no validation rules for FullMethodName
	}

	if m.HttpUrl != nil {
		// no validation rules for HttpUrl
	}

	if m.HttpMethod != nil {
		// no validation rules for HttpMethod
	}

	if len(errors) > 0 {
		return AuthUserVerifyAccessControlRequestMultiError(errors)
	}

	return nil
}

// AuthUserVerifyAccessControlRequestMultiError is an error wrapping multiple
// validation errors returned by
// AuthUserVerifyAccessControlRequest.ValidateAll() if the designated
// constraints aren't met.
type AuthUserVerifyAccessControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserVerifyAccessControlRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserVerifyAccessControlRequestMultiError) AllErrors() []error { return m }

// AuthUserVerifyAccessControlRequestValidationError is the validation error
// returned by AuthUserVerifyAccessControlRequest.Validate if the designated
// constraints aren't met.
type AuthUserVerifyAccessControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserVerifyAccessControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserVerifyAccessControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserVerifyAccessControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserVerifyAccessControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserVerifyAccessControlRequestValidationError) ErrorName() string {
	return "AuthUserVerifyAccessControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserVerifyAccessControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserVerifyAccessControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserVerifyAccessControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserVerifyAccessControlRequestValidationError{}

// Validate checks the field values on AuthUserFindUserByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserFindUserByTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserFindUserByTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthUserFindUserByTokenRequestMultiError, or nil if none found.
func (m *AuthUserFindUserByTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserFindUserByTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 0 {
		err := AuthUserFindUserByTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthUserFindUserByTokenRequestMultiError(errors)
	}

	return nil
}

// AuthUserFindUserByTokenRequestMultiError is an error wrapping multiple
// validation errors returned by AuthUserFindUserByTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type AuthUserFindUserByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserFindUserByTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserFindUserByTokenRequestMultiError) AllErrors() []error { return m }

// AuthUserFindUserByTokenRequestValidationError is the validation error
// returned by AuthUserFindUserByTokenRequest.Validate if the designated
// constraints aren't met.
type AuthUserFindUserByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserFindUserByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserFindUserByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserFindUserByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserFindUserByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserFindUserByTokenRequestValidationError) ErrorName() string {
	return "AuthUserFindUserByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserFindUserByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserFindUserByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserFindUserByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserFindUserByTokenRequestValidationError{}

// Validate checks the field values on FindUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserByIdRequestMultiError, or nil if none found.
func (m *FindUserByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := FindUserByIdRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindUserByIdRequestMultiError(errors)
	}

	return nil
}

// FindUserByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindUserByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindUserByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByIdRequestMultiError) AllErrors() []error { return m }

// FindUserByIdRequestValidationError is the validation error returned by
// FindUserByIdRequest.Validate if the designated constraints aren't met.
type FindUserByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByIdRequestValidationError) ErrorName() string {
	return "FindUserByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByIdRequestValidationError{}

// Validate checks the field values on UpdateUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserByIdRequestMultiError, or nil if none found.
func (m *UpdateUserByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 0 {
		err := UpdateUserByIdRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.IsVerified != nil {
		// no validation rules for IsVerified
	}

	if len(errors) > 0 {
		return UpdateUserByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateUserByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUserByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIdRequestMultiError) AllErrors() []error { return m }

// UpdateUserByIdRequestValidationError is the validation error returned by
// UpdateUserByIdRequest.Validate if the designated constraints aren't met.
type UpdateUserByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIdRequestValidationError) ErrorName() string {
	return "UpdateUserByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIdRequestValidationError{}

// Validate checks the field values on FindUserByEmailAndPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindUserByEmailAndPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserByEmailAndPasswordRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindUserByEmailAndPasswordRequestMultiError, or nil if none found.
func (m *FindUserByEmailAndPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByEmailAndPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = FindUserByEmailAndPasswordRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := FindUserByEmailAndPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindUserByEmailAndPasswordRequestMultiError(errors)
	}

	return nil
}

func (m *FindUserByEmailAndPasswordRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *FindUserByEmailAndPasswordRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// FindUserByEmailAndPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindUserByEmailAndPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type FindUserByEmailAndPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByEmailAndPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByEmailAndPasswordRequestMultiError) AllErrors() []error { return m }

// FindUserByEmailAndPasswordRequestValidationError is the validation error
// returned by FindUserByEmailAndPasswordRequest.Validate if the designated
// constraints aren't met.
type FindUserByEmailAndPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByEmailAndPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByEmailAndPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserByEmailAndPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByEmailAndPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByEmailAndPasswordRequestValidationError) ErrorName() string {
	return "FindUserByEmailAndPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByEmailAndPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByEmailAndPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByEmailAndPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByEmailAndPasswordRequestValidationError{}
