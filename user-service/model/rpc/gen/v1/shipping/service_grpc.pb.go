// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/shipping/service.proto

package shipping

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShippingService_CreateShipping_FullMethodName  = "/shipping.ShippingService/CreateShipping"
	ShippingService_GetShippingById_FullMethodName = "/shipping.ShippingService/GetShippingById"
	ShippingService_ListShipping_FullMethodName    = "/shipping.ShippingService/ListShipping"
	ShippingService_UpdateShipping_FullMethodName  = "/shipping.ShippingService/UpdateShipping"
	ShippingService_DeleteShipping_FullMethodName  = "/shipping.ShippingService/DeleteShipping"
)

// ShippingServiceClient is the client API for ShippingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingServiceClient interface {
	CreateShipping(ctx context.Context, in *CreateShippingRequest, opts ...grpc.CallOption) (*CreateShippingResponse, error)
	GetShippingById(ctx context.Context, in *GetShippingByIdRequest, opts ...grpc.CallOption) (*GetShippingByIdResponse, error)
	ListShipping(ctx context.Context, in *ListShippingRequest, opts ...grpc.CallOption) (*ListShippingResponse, error)
	UpdateShipping(ctx context.Context, in *UpdateShippingRequest, opts ...grpc.CallOption) (*UpdateShippingResponse, error)
	DeleteShipping(ctx context.Context, in *DeleteShippingRequest, opts ...grpc.CallOption) (*DeleteShippingResponse, error)
}

type shippingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingServiceClient(cc grpc.ClientConnInterface) ShippingServiceClient {
	return &shippingServiceClient{cc}
}

func (c *shippingServiceClient) CreateShipping(ctx context.Context, in *CreateShippingRequest, opts ...grpc.CallOption) (*CreateShippingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateShippingResponse)
	err := c.cc.Invoke(ctx, ShippingService_CreateShipping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) GetShippingById(ctx context.Context, in *GetShippingByIdRequest, opts ...grpc.CallOption) (*GetShippingByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShippingByIdResponse)
	err := c.cc.Invoke(ctx, ShippingService_GetShippingById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) ListShipping(ctx context.Context, in *ListShippingRequest, opts ...grpc.CallOption) (*ListShippingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShippingResponse)
	err := c.cc.Invoke(ctx, ShippingService_ListShipping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) UpdateShipping(ctx context.Context, in *UpdateShippingRequest, opts ...grpc.CallOption) (*UpdateShippingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateShippingResponse)
	err := c.cc.Invoke(ctx, ShippingService_UpdateShipping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) DeleteShipping(ctx context.Context, in *DeleteShippingRequest, opts ...grpc.CallOption) (*DeleteShippingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShippingResponse)
	err := c.cc.Invoke(ctx, ShippingService_DeleteShipping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingServiceServer is the server API for ShippingService service.
// All implementations should embed UnimplementedShippingServiceServer
// for forward compatibility.
type ShippingServiceServer interface {
	CreateShipping(context.Context, *CreateShippingRequest) (*CreateShippingResponse, error)
	GetShippingById(context.Context, *GetShippingByIdRequest) (*GetShippingByIdResponse, error)
	ListShipping(context.Context, *ListShippingRequest) (*ListShippingResponse, error)
	UpdateShipping(context.Context, *UpdateShippingRequest) (*UpdateShippingResponse, error)
	DeleteShipping(context.Context, *DeleteShippingRequest) (*DeleteShippingResponse, error)
}

// UnimplementedShippingServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShippingServiceServer struct{}

func (UnimplementedShippingServiceServer) CreateShipping(context.Context, *CreateShippingRequest) (*CreateShippingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipping not implemented")
}
func (UnimplementedShippingServiceServer) GetShippingById(context.Context, *GetShippingByIdRequest) (*GetShippingByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingById not implemented")
}
func (UnimplementedShippingServiceServer) ListShipping(context.Context, *ListShippingRequest) (*ListShippingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipping not implemented")
}
func (UnimplementedShippingServiceServer) UpdateShipping(context.Context, *UpdateShippingRequest) (*UpdateShippingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShipping not implemented")
}
func (UnimplementedShippingServiceServer) DeleteShipping(context.Context, *DeleteShippingRequest) (*DeleteShippingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShipping not implemented")
}
func (UnimplementedShippingServiceServer) testEmbeddedByValue() {}

// UnsafeShippingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingServiceServer will
// result in compilation errors.
type UnsafeShippingServiceServer interface {
	mustEmbedUnimplementedShippingServiceServer()
}

func RegisterShippingServiceServer(s grpc.ServiceRegistrar, srv ShippingServiceServer) {
	// If the following call pancis, it indicates UnimplementedShippingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShippingService_ServiceDesc, srv)
}

func _ShippingService_CreateShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).CreateShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_CreateShipping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).CreateShipping(ctx, req.(*CreateShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_GetShippingById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetShippingById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_GetShippingById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetShippingById(ctx, req.(*GetShippingByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_ListShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).ListShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_ListShipping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).ListShipping(ctx, req.(*ListShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_UpdateShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).UpdateShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_UpdateShipping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).UpdateShipping(ctx, req.(*UpdateShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_DeleteShipping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShippingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).DeleteShipping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_DeleteShipping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).DeleteShipping(ctx, req.(*DeleteShippingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingService_ServiceDesc is the grpc.ServiceDesc for ShippingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shipping.ShippingService",
	HandlerType: (*ShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShipping",
			Handler:    _ShippingService_CreateShipping_Handler,
		},
		{
			MethodName: "GetShippingById",
			Handler:    _ShippingService_GetShippingById_Handler,
		},
		{
			MethodName: "ListShipping",
			Handler:    _ShippingService_ListShipping_Handler,
		},
		{
			MethodName: "UpdateShipping",
			Handler:    _ShippingService_UpdateShipping_Handler,
		},
		{
			MethodName: "DeleteShipping",
			Handler:    _ShippingService_DeleteShipping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/shipping/service.proto",
}

const (
	ShippingProviderService_GetShippingProviderById_FullMethodName = "/shipping.ShippingProviderService/GetShippingProviderById"
	ShippingProviderService_ListShippingProviders_FullMethodName   = "/shipping.ShippingProviderService/ListShippingProviders"
)

// ShippingProviderServiceClient is the client API for ShippingProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingProviderServiceClient interface {
	GetShippingProviderById(ctx context.Context, in *GetShippingProviderByIdRequest, opts ...grpc.CallOption) (*GetShippingProviderByIdResponse, error)
	ListShippingProviders(ctx context.Context, in *ListShippingProvidersRequest, opts ...grpc.CallOption) (*ListShippingProvidersResponse, error)
}

type shippingProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingProviderServiceClient(cc grpc.ClientConnInterface) ShippingProviderServiceClient {
	return &shippingProviderServiceClient{cc}
}

func (c *shippingProviderServiceClient) GetShippingProviderById(ctx context.Context, in *GetShippingProviderByIdRequest, opts ...grpc.CallOption) (*GetShippingProviderByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShippingProviderByIdResponse)
	err := c.cc.Invoke(ctx, ShippingProviderService_GetShippingProviderById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingProviderServiceClient) ListShippingProviders(ctx context.Context, in *ListShippingProvidersRequest, opts ...grpc.CallOption) (*ListShippingProvidersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShippingProvidersResponse)
	err := c.cc.Invoke(ctx, ShippingProviderService_ListShippingProviders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingProviderServiceServer is the server API for ShippingProviderService service.
// All implementations should embed UnimplementedShippingProviderServiceServer
// for forward compatibility.
type ShippingProviderServiceServer interface {
	GetShippingProviderById(context.Context, *GetShippingProviderByIdRequest) (*GetShippingProviderByIdResponse, error)
	ListShippingProviders(context.Context, *ListShippingProvidersRequest) (*ListShippingProvidersResponse, error)
}

// UnimplementedShippingProviderServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShippingProviderServiceServer struct{}

func (UnimplementedShippingProviderServiceServer) GetShippingProviderById(context.Context, *GetShippingProviderByIdRequest) (*GetShippingProviderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShippingProviderById not implemented")
}
func (UnimplementedShippingProviderServiceServer) ListShippingProviders(context.Context, *ListShippingProvidersRequest) (*ListShippingProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShippingProviders not implemented")
}
func (UnimplementedShippingProviderServiceServer) testEmbeddedByValue() {}

// UnsafeShippingProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingProviderServiceServer will
// result in compilation errors.
type UnsafeShippingProviderServiceServer interface {
	mustEmbedUnimplementedShippingProviderServiceServer()
}

func RegisterShippingProviderServiceServer(s grpc.ServiceRegistrar, srv ShippingProviderServiceServer) {
	// If the following call pancis, it indicates UnimplementedShippingProviderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShippingProviderService_ServiceDesc, srv)
}

func _ShippingProviderService_GetShippingProviderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShippingProviderByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingProviderServiceServer).GetShippingProviderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingProviderService_GetShippingProviderById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingProviderServiceServer).GetShippingProviderById(ctx, req.(*GetShippingProviderByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingProviderService_ListShippingProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShippingProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingProviderServiceServer).ListShippingProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingProviderService_ListShippingProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingProviderServiceServer).ListShippingProviders(ctx, req.(*ListShippingProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingProviderService_ServiceDesc is the grpc.ServiceDesc for ShippingProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shipping.ShippingProviderService",
	HandlerType: (*ShippingProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShippingProviderById",
			Handler:    _ShippingProviderService_GetShippingProviderById_Handler,
		},
		{
			MethodName: "ListShippingProviders",
			Handler:    _ShippingProviderService_ListShippingProviders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/shipping/service.proto",
}
