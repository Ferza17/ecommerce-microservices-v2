// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: authMessage.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserLoginByEmailAndPasswordRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UserLoginByEmailAndPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLoginByEmailAndPasswordRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UserLoginByEmailAndPasswordRequestMultiError, or nil if none found.
func (m *UserLoginByEmailAndPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLoginByEmailAndPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return UserLoginByEmailAndPasswordRequestMultiError(errors)
	}

	return nil
}

// UserLoginByEmailAndPasswordRequestMultiError is an error wrapping multiple
// validation errors returned by
// UserLoginByEmailAndPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type UserLoginByEmailAndPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLoginByEmailAndPasswordRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLoginByEmailAndPasswordRequestMultiError) AllErrors() []error { return m }

// UserLoginByEmailAndPasswordRequestValidationError is the validation error
// returned by UserLoginByEmailAndPasswordRequest.Validate if the designated
// constraints aren't met.
type UserLoginByEmailAndPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLoginByEmailAndPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLoginByEmailAndPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLoginByEmailAndPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLoginByEmailAndPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLoginByEmailAndPasswordRequestValidationError) ErrorName() string {
	return "UserLoginByEmailAndPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserLoginByEmailAndPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLoginByEmailAndPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLoginByEmailAndPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLoginByEmailAndPasswordRequestValidationError{}

// Validate checks the field values on UserLogoutByTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserLogoutByTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLogoutByTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLogoutByTokenRequestMultiError, or nil if none found.
func (m *UserLogoutByTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLogoutByTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return UserLogoutByTokenRequestMultiError(errors)
	}

	return nil
}

// UserLogoutByTokenRequestMultiError is an error wrapping multiple validation
// errors returned by UserLogoutByTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type UserLogoutByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLogoutByTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLogoutByTokenRequestMultiError) AllErrors() []error { return m }

// UserLogoutByTokenRequestValidationError is the validation error returned by
// UserLogoutByTokenRequest.Validate if the designated constraints aren't met.
type UserLogoutByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLogoutByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLogoutByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLogoutByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLogoutByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLogoutByTokenRequestValidationError) ErrorName() string {
	return "UserLogoutByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserLogoutByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLogoutByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLogoutByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLogoutByTokenRequestValidationError{}

// Validate checks the field values on UserLogoutByTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserLogoutByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserLogoutByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserLogoutByTokenResponseMultiError, or nil if none found.
func (m *UserLogoutByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserLogoutByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UserLogoutByTokenResponseMultiError(errors)
	}

	return nil
}

// UserLogoutByTokenResponseMultiError is an error wrapping multiple validation
// errors returned by UserLogoutByTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type UserLogoutByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserLogoutByTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserLogoutByTokenResponseMultiError) AllErrors() []error { return m }

// UserLogoutByTokenResponseValidationError is the validation error returned by
// UserLogoutByTokenResponse.Validate if the designated constraints aren't met.
type UserLogoutByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserLogoutByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserLogoutByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserLogoutByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserLogoutByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserLogoutByTokenResponseValidationError) ErrorName() string {
	return "UserLogoutByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserLogoutByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserLogoutByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserLogoutByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserLogoutByTokenResponseValidationError{}

// Validate checks the field values on FindUserByTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserByTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserByTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserByTokenRequestMultiError, or nil if none found.
func (m *FindUserByTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return FindUserByTokenRequestMultiError(errors)
	}

	return nil
}

// FindUserByTokenRequestMultiError is an error wrapping multiple validation
// errors returned by FindUserByTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type FindUserByTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByTokenRequestMultiError) AllErrors() []error { return m }

// FindUserByTokenRequestValidationError is the validation error returned by
// FindUserByTokenRequest.Validate if the designated constraints aren't met.
type FindUserByTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserByTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByTokenRequestValidationError) ErrorName() string {
	return "FindUserByTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByTokenRequestValidationError{}

// Validate checks the field values on UserVerifyOtpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserVerifyOtpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserVerifyOtpRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserVerifyOtpRequestMultiError, or nil if none found.
func (m *UserVerifyOtpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UserVerifyOtpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Otp

	if len(errors) > 0 {
		return UserVerifyOtpRequestMultiError(errors)
	}

	return nil
}

// UserVerifyOtpRequestMultiError is an error wrapping multiple validation
// errors returned by UserVerifyOtpRequest.ValidateAll() if the designated
// constraints aren't met.
type UserVerifyOtpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserVerifyOtpRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserVerifyOtpRequestMultiError) AllErrors() []error { return m }

// UserVerifyOtpRequestValidationError is the validation error returned by
// UserVerifyOtpRequest.Validate if the designated constraints aren't met.
type UserVerifyOtpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserVerifyOtpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserVerifyOtpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserVerifyOtpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserVerifyOtpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserVerifyOtpRequestValidationError) ErrorName() string {
	return "UserVerifyOtpRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserVerifyOtpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserVerifyOtpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserVerifyOtpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserVerifyOtpRequestValidationError{}

// Validate checks the field values on UserVerifyOtpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserVerifyOtpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserVerifyOtpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserVerifyOtpResponseMultiError, or nil if none found.
func (m *UserVerifyOtpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserVerifyOtpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return UserVerifyOtpResponseMultiError(errors)
	}

	return nil
}

// UserVerifyOtpResponseMultiError is an error wrapping multiple validation
// errors returned by UserVerifyOtpResponse.ValidateAll() if the designated
// constraints aren't met.
type UserVerifyOtpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserVerifyOtpResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserVerifyOtpResponseMultiError) AllErrors() []error { return m }

// UserVerifyOtpResponseValidationError is the validation error returned by
// UserVerifyOtpResponse.Validate if the designated constraints aren't met.
type UserVerifyOtpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserVerifyOtpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserVerifyOtpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserVerifyOtpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserVerifyOtpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserVerifyOtpResponseValidationError) ErrorName() string {
	return "UserVerifyOtpResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserVerifyOtpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserVerifyOtpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserVerifyOtpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserVerifyOtpResponseValidationError{}
