// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notificationMessage.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on NotificationTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotificationTemplate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotificationTemplate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotificationTemplateMultiError, or nil if none found.
func (m *NotificationTemplate) ValidateAll() error {
	return m.validate(true)
}

func (m *NotificationTemplate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Template

	if all {
		switch v := interface{}(m.GetTemplateVars()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationTemplateValidationError{
					field:  "TemplateVars",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationTemplateValidationError{
					field:  "TemplateVars",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplateVars()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationTemplateValidationError{
				field:  "TemplateVars",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationTemplateMultiError(errors)
	}

	return nil
}

// NotificationTemplateMultiError is an error wrapping multiple validation
// errors returned by NotificationTemplate.ValidateAll() if the designated
// constraints aren't met.
type NotificationTemplateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationTemplateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationTemplateMultiError) AllErrors() []error { return m }

// NotificationTemplateValidationError is the validation error returned by
// NotificationTemplate.Validate if the designated constraints aren't met.
type NotificationTemplateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationTemplateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationTemplateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationTemplateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationTemplateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationTemplateValidationError) ErrorName() string {
	return "NotificationTemplateValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationTemplateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationTemplate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationTemplateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationTemplateValidationError{}

// Validate checks the field values on SendLoginEmailNotificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendLoginEmailNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendLoginEmailNotificationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendLoginEmailNotificationRequestMultiError, or nil if none found.
func (m *SendLoginEmailNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendLoginEmailNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for NotificationType

	if len(errors) > 0 {
		return SendLoginEmailNotificationRequestMultiError(errors)
	}

	return nil
}

// SendLoginEmailNotificationRequestMultiError is an error wrapping multiple
// validation errors returned by
// SendLoginEmailNotificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SendLoginEmailNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendLoginEmailNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendLoginEmailNotificationRequestMultiError) AllErrors() []error { return m }

// SendLoginEmailNotificationRequestValidationError is the validation error
// returned by SendLoginEmailNotificationRequest.Validate if the designated
// constraints aren't met.
type SendLoginEmailNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendLoginEmailNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendLoginEmailNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendLoginEmailNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendLoginEmailNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendLoginEmailNotificationRequestValidationError) ErrorName() string {
	return "SendLoginEmailNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendLoginEmailNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendLoginEmailNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendLoginEmailNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendLoginEmailNotificationRequestValidationError{}

// Validate checks the field values on SendLoginEmailNotificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SendLoginEmailNotificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendLoginEmailNotificationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SendLoginEmailNotificationResponseMultiError, or nil if none found.
func (m *SendLoginEmailNotificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendLoginEmailNotificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return SendLoginEmailNotificationResponseMultiError(errors)
	}

	return nil
}

// SendLoginEmailNotificationResponseMultiError is an error wrapping multiple
// validation errors returned by
// SendLoginEmailNotificationResponse.ValidateAll() if the designated
// constraints aren't met.
type SendLoginEmailNotificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendLoginEmailNotificationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendLoginEmailNotificationResponseMultiError) AllErrors() []error { return m }

// SendLoginEmailNotificationResponseValidationError is the validation error
// returned by SendLoginEmailNotificationResponse.Validate if the designated
// constraints aren't met.
type SendLoginEmailNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendLoginEmailNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendLoginEmailNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendLoginEmailNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendLoginEmailNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendLoginEmailNotificationResponseValidationError) ErrorName() string {
	return "SendLoginEmailNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendLoginEmailNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendLoginEmailNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendLoginEmailNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendLoginEmailNotificationResponseValidationError{}

// Validate checks the field values on
// SendUserVerificationEmailNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendUserVerificationEmailNotificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SendUserVerificationEmailNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// SendUserVerificationEmailNotificationRequestMultiError, or nil if none found.
func (m *SendUserVerificationEmailNotificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendUserVerificationEmailNotificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VerificationUrl

	// no validation rules for NotificationType

	// no validation rules for Email

	if len(errors) > 0 {
		return SendUserVerificationEmailNotificationRequestMultiError(errors)
	}

	return nil
}

// SendUserVerificationEmailNotificationRequestMultiError is an error wrapping
// multiple validation errors returned by
// SendUserVerificationEmailNotificationRequest.ValidateAll() if the
// designated constraints aren't met.
type SendUserVerificationEmailNotificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendUserVerificationEmailNotificationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendUserVerificationEmailNotificationRequestMultiError) AllErrors() []error { return m }

// SendUserVerificationEmailNotificationRequestValidationError is the
// validation error returned by
// SendUserVerificationEmailNotificationRequest.Validate if the designated
// constraints aren't met.
type SendUserVerificationEmailNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendUserVerificationEmailNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendUserVerificationEmailNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendUserVerificationEmailNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendUserVerificationEmailNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendUserVerificationEmailNotificationRequestValidationError) ErrorName() string {
	return "SendUserVerificationEmailNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendUserVerificationEmailNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendUserVerificationEmailNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendUserVerificationEmailNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendUserVerificationEmailNotificationRequestValidationError{}
