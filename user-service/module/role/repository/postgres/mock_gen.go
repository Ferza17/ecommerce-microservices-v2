// Code generated by mocktail; DO NOT EDIT.

package postgres

import (
	"context"
	"testing"
	"time"

	"github.com/ferza17/ecommerce-microservices-v2/user-service/model/orm"
	"github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// iRolePostgresqlRepositoryMock mock of IRolePostgresqlRepository.
type iRolePostgresqlRepositoryMock struct{ mock.Mock }

// NewIRolePostgresqlRepositoryMock creates a new iRolePostgresqlRepositoryMock.
func NewIRolePostgresqlRepositoryMock(tb testing.TB) *iRolePostgresqlRepositoryMock {
	tb.Helper()

	m := &iRolePostgresqlRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iRolePostgresqlRepositoryMock) CreateRole(_ context.Context, requestId string, accessControl *orm.Role, tx *gorm.DB) (*orm.Role, error) {
	_ret := _m.Called(requestId, accessControl, tx)

	if _rf, ok := _ret.Get(0).(func(string, *orm.Role, *gorm.DB) (*orm.Role, error)); ok {
		return _rf(requestId, accessControl, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.Role)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iRolePostgresqlRepositoryMock) OnCreateRole(requestId string, accessControl *orm.Role, tx *gorm.DB) *iRolePostgresqlRepositoryCreateRoleCall {
	return &iRolePostgresqlRepositoryCreateRoleCall{Call: _m.Mock.On("CreateRole", requestId, accessControl, tx), Parent: _m}
}

func (_m *iRolePostgresqlRepositoryMock) OnCreateRoleRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iRolePostgresqlRepositoryCreateRoleCall {
	return &iRolePostgresqlRepositoryCreateRoleCall{Call: _m.Mock.On("CreateRole", requestId, accessControl, tx), Parent: _m}
}

type iRolePostgresqlRepositoryCreateRoleCall struct {
	*mock.Call
	Parent *iRolePostgresqlRepositoryMock
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) Panic(msg string) *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) Once() *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) Twice() *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) Times(i int) *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) WaitUntil(w <-chan time.Time) *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) After(d time.Duration) *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) Run(fn func(args mock.Arguments)) *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) Maybe() *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) TypedReturns(a *orm.Role, b error) *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) ReturnsFn(fn func(string, *orm.Role, *gorm.DB) (*orm.Role, error)) *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) TypedRun(fn func(string, *orm.Role, *gorm.DB)) *iRolePostgresqlRepositoryCreateRoleCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_accessControl, _ := args.Get(1).(*orm.Role)
		_tx, _ := args.Get(2).(*gorm.DB)
		fn(_requestId, _accessControl, _tx)
	})
	return _c
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) OnCreateRole(requestId string, accessControl *orm.Role, tx *gorm.DB) *iRolePostgresqlRepositoryCreateRoleCall {
	return _c.Parent.OnCreateRole(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) OnFindRoleByName(requestId string, name string, tx *gorm.DB) *iRolePostgresqlRepositoryFindRoleByNameCall {
	return _c.Parent.OnFindRoleByName(requestId, name, tx)
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) OnUpdateRoleById(requestId string, accessControl *orm.Role, tx *gorm.DB) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	return _c.Parent.OnUpdateRoleById(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) OnCreateRoleRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iRolePostgresqlRepositoryCreateRoleCall {
	return _c.Parent.OnCreateRoleRaw(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) OnFindRoleByNameRaw(requestId interface{}, name interface{}, tx interface{}) *iRolePostgresqlRepositoryFindRoleByNameCall {
	return _c.Parent.OnFindRoleByNameRaw(requestId, name, tx)
}

func (_c *iRolePostgresqlRepositoryCreateRoleCall) OnUpdateRoleByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	return _c.Parent.OnUpdateRoleByIdRaw(requestId, accessControl, tx)
}

func (_m *iRolePostgresqlRepositoryMock) FindRoleByName(_ context.Context, requestId string, name string, tx *gorm.DB) (*orm.Role, error) {
	_ret := _m.Called(requestId, name, tx)

	if _rf, ok := _ret.Get(0).(func(string, string, *gorm.DB) (*orm.Role, error)); ok {
		return _rf(requestId, name, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.Role)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iRolePostgresqlRepositoryMock) OnFindRoleByName(requestId string, name string, tx *gorm.DB) *iRolePostgresqlRepositoryFindRoleByNameCall {
	return &iRolePostgresqlRepositoryFindRoleByNameCall{Call: _m.Mock.On("FindRoleByName", requestId, name, tx), Parent: _m}
}

func (_m *iRolePostgresqlRepositoryMock) OnFindRoleByNameRaw(requestId interface{}, name interface{}, tx interface{}) *iRolePostgresqlRepositoryFindRoleByNameCall {
	return &iRolePostgresqlRepositoryFindRoleByNameCall{Call: _m.Mock.On("FindRoleByName", requestId, name, tx), Parent: _m}
}

type iRolePostgresqlRepositoryFindRoleByNameCall struct {
	*mock.Call
	Parent *iRolePostgresqlRepositoryMock
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) Panic(msg string) *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) Once() *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) Twice() *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) Times(i int) *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) WaitUntil(w <-chan time.Time) *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) After(d time.Duration) *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) Run(fn func(args mock.Arguments)) *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) Maybe() *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) TypedReturns(a *orm.Role, b error) *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) ReturnsFn(fn func(string, string, *gorm.DB) (*orm.Role, error)) *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) TypedRun(fn func(string, string, *gorm.DB)) *iRolePostgresqlRepositoryFindRoleByNameCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_name := args.String(1)
		_tx, _ := args.Get(2).(*gorm.DB)
		fn(_requestId, _name, _tx)
	})
	return _c
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) OnCreateRole(requestId string, accessControl *orm.Role, tx *gorm.DB) *iRolePostgresqlRepositoryCreateRoleCall {
	return _c.Parent.OnCreateRole(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) OnFindRoleByName(requestId string, name string, tx *gorm.DB) *iRolePostgresqlRepositoryFindRoleByNameCall {
	return _c.Parent.OnFindRoleByName(requestId, name, tx)
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) OnUpdateRoleById(requestId string, accessControl *orm.Role, tx *gorm.DB) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	return _c.Parent.OnUpdateRoleById(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) OnCreateRoleRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iRolePostgresqlRepositoryCreateRoleCall {
	return _c.Parent.OnCreateRoleRaw(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) OnFindRoleByNameRaw(requestId interface{}, name interface{}, tx interface{}) *iRolePostgresqlRepositoryFindRoleByNameCall {
	return _c.Parent.OnFindRoleByNameRaw(requestId, name, tx)
}

func (_c *iRolePostgresqlRepositoryFindRoleByNameCall) OnUpdateRoleByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	return _c.Parent.OnUpdateRoleByIdRaw(requestId, accessControl, tx)
}

func (_m *iRolePostgresqlRepositoryMock) UpdateRoleById(_ context.Context, requestId string, accessControl *orm.Role, tx *gorm.DB) (*orm.Role, error) {
	_ret := _m.Called(requestId, accessControl, tx)

	if _rf, ok := _ret.Get(0).(func(string, *orm.Role, *gorm.DB) (*orm.Role, error)); ok {
		return _rf(requestId, accessControl, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.Role)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iRolePostgresqlRepositoryMock) OnUpdateRoleById(requestId string, accessControl *orm.Role, tx *gorm.DB) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	return &iRolePostgresqlRepositoryUpdateRoleByIdCall{Call: _m.Mock.On("UpdateRoleById", requestId, accessControl, tx), Parent: _m}
}

func (_m *iRolePostgresqlRepositoryMock) OnUpdateRoleByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	return &iRolePostgresqlRepositoryUpdateRoleByIdCall{Call: _m.Mock.On("UpdateRoleById", requestId, accessControl, tx), Parent: _m}
}

type iRolePostgresqlRepositoryUpdateRoleByIdCall struct {
	*mock.Call
	Parent *iRolePostgresqlRepositoryMock
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) Panic(msg string) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) Once() *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) Twice() *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) Times(i int) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) WaitUntil(w <-chan time.Time) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) After(d time.Duration) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) Run(fn func(args mock.Arguments)) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) Maybe() *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) TypedReturns(a *orm.Role, b error) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) ReturnsFn(fn func(string, *orm.Role, *gorm.DB) (*orm.Role, error)) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) TypedRun(fn func(string, *orm.Role, *gorm.DB)) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_accessControl, _ := args.Get(1).(*orm.Role)
		_tx, _ := args.Get(2).(*gorm.DB)
		fn(_requestId, _accessControl, _tx)
	})
	return _c
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) OnCreateRole(requestId string, accessControl *orm.Role, tx *gorm.DB) *iRolePostgresqlRepositoryCreateRoleCall {
	return _c.Parent.OnCreateRole(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) OnFindRoleByName(requestId string, name string, tx *gorm.DB) *iRolePostgresqlRepositoryFindRoleByNameCall {
	return _c.Parent.OnFindRoleByName(requestId, name, tx)
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) OnUpdateRoleById(requestId string, accessControl *orm.Role, tx *gorm.DB) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	return _c.Parent.OnUpdateRoleById(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) OnCreateRoleRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iRolePostgresqlRepositoryCreateRoleCall {
	return _c.Parent.OnCreateRoleRaw(requestId, accessControl, tx)
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) OnFindRoleByNameRaw(requestId interface{}, name interface{}, tx interface{}) *iRolePostgresqlRepositoryFindRoleByNameCall {
	return _c.Parent.OnFindRoleByNameRaw(requestId, name, tx)
}

func (_c *iRolePostgresqlRepositoryUpdateRoleByIdCall) OnUpdateRoleByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iRolePostgresqlRepositoryUpdateRoleByIdCall {
	return _c.Parent.OnUpdateRoleByIdRaw(requestId, accessControl, tx)
}
