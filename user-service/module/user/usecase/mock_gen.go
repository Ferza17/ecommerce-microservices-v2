// Code generated by mocktail; DO NOT EDIT.

package usecase

import (
	"context"
	"testing"
	"time"

	"github.com/ferza17/ecommerce-microservices-v2/user-service/model/rpc/gen/v1/user"
	"github.com/stretchr/testify/mock"
)

// iUserUseCaseMock mock of IUserUseCase.
type iUserUseCaseMock struct{ mock.Mock }

// NewIUserUseCaseMock creates a new iUserUseCaseMock.
func NewIUserUseCaseMock(tb testing.TB) *iUserUseCaseMock {
	tb.Helper()

	m := &iUserUseCaseMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iUserUseCaseMock) FindUserByEmailAndPassword(_ context.Context, bParam string, cParam *user.FindUserByEmailAndPasswordRequest) (*user.FindUserByEmailAndPasswordResponse, error) {
	_ret := _m.Called(bParam, cParam)

	if _rf, ok := _ret.Get(0).(func(string, *user.FindUserByEmailAndPasswordRequest) (*user.FindUserByEmailAndPasswordResponse, error)); ok {
		return _rf(bParam, cParam)
	}

	_ra0, _ := _ret.Get(0).(*user.FindUserByEmailAndPasswordResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iUserUseCaseMock) OnFindUserByEmailAndPassword(bParam string, cParam *user.FindUserByEmailAndPasswordRequest) *iUserUseCaseFindUserByEmailAndPasswordCall {
	return &iUserUseCaseFindUserByEmailAndPasswordCall{Call: _m.Mock.On("FindUserByEmailAndPassword", bParam, cParam), Parent: _m}
}

func (_m *iUserUseCaseMock) OnFindUserByEmailAndPasswordRaw(bParam interface{}, cParam interface{}) *iUserUseCaseFindUserByEmailAndPasswordCall {
	return &iUserUseCaseFindUserByEmailAndPasswordCall{Call: _m.Mock.On("FindUserByEmailAndPassword", bParam, cParam), Parent: _m}
}

type iUserUseCaseFindUserByEmailAndPasswordCall struct {
	*mock.Call
	Parent *iUserUseCaseMock
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) Panic(msg string) *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) Once() *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) Twice() *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) Times(i int) *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) WaitUntil(w <-chan time.Time) *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) After(d time.Duration) *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) Run(fn func(args mock.Arguments)) *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) Maybe() *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) TypedReturns(a *user.FindUserByEmailAndPasswordResponse, b error) *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) ReturnsFn(fn func(string, *user.FindUserByEmailAndPasswordRequest) (*user.FindUserByEmailAndPasswordResponse, error)) *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) TypedRun(fn func(string, *user.FindUserByEmailAndPasswordRequest)) *iUserUseCaseFindUserByEmailAndPasswordCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_bParam := args.String(0)
		_cParam, _ := args.Get(1).(*user.FindUserByEmailAndPasswordRequest)
		fn(_bParam, _cParam)
	})
	return _c
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) OnFindUserByEmailAndPassword(bParam string, cParam *user.FindUserByEmailAndPasswordRequest) *iUserUseCaseFindUserByEmailAndPasswordCall {
	return _c.Parent.OnFindUserByEmailAndPassword(bParam, cParam)
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) OnFindUserById(requestId string, req *user.FindUserByIdRequest) *iUserUseCaseFindUserByIdCall {
	return _c.Parent.OnFindUserById(requestId, req)
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) OnUpdateUserById(requestId string, req *user.UpdateUserByIdRequest) *iUserUseCaseUpdateUserByIdCall {
	return _c.Parent.OnUpdateUserById(requestId, req)
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) OnFindUserByEmailAndPasswordRaw(bParam interface{}, cParam interface{}) *iUserUseCaseFindUserByEmailAndPasswordCall {
	return _c.Parent.OnFindUserByEmailAndPasswordRaw(bParam, cParam)
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) OnFindUserByIdRaw(requestId interface{}, req interface{}) *iUserUseCaseFindUserByIdCall {
	return _c.Parent.OnFindUserByIdRaw(requestId, req)
}

func (_c *iUserUseCaseFindUserByEmailAndPasswordCall) OnUpdateUserByIdRaw(requestId interface{}, req interface{}) *iUserUseCaseUpdateUserByIdCall {
	return _c.Parent.OnUpdateUserByIdRaw(requestId, req)
}

func (_m *iUserUseCaseMock) FindUserById(_ context.Context, requestId string, req *user.FindUserByIdRequest) (*user.FindUserByIdResponse, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.FindUserByIdRequest) (*user.FindUserByIdResponse, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*user.FindUserByIdResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iUserUseCaseMock) OnFindUserById(requestId string, req *user.FindUserByIdRequest) *iUserUseCaseFindUserByIdCall {
	return &iUserUseCaseFindUserByIdCall{Call: _m.Mock.On("FindUserById", requestId, req), Parent: _m}
}

func (_m *iUserUseCaseMock) OnFindUserByIdRaw(requestId interface{}, req interface{}) *iUserUseCaseFindUserByIdCall {
	return &iUserUseCaseFindUserByIdCall{Call: _m.Mock.On("FindUserById", requestId, req), Parent: _m}
}

type iUserUseCaseFindUserByIdCall struct {
	*mock.Call
	Parent *iUserUseCaseMock
}

func (_c *iUserUseCaseFindUserByIdCall) Panic(msg string) *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) Once() *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) Twice() *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) Times(i int) *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) WaitUntil(w <-chan time.Time) *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) After(d time.Duration) *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) Run(fn func(args mock.Arguments)) *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) Maybe() *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) TypedReturns(a *user.FindUserByIdResponse, b error) *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) ReturnsFn(fn func(string, *user.FindUserByIdRequest) (*user.FindUserByIdResponse, error)) *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) TypedRun(fn func(string, *user.FindUserByIdRequest)) *iUserUseCaseFindUserByIdCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.FindUserByIdRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iUserUseCaseFindUserByIdCall) OnFindUserByEmailAndPassword(bParam string, cParam *user.FindUserByEmailAndPasswordRequest) *iUserUseCaseFindUserByEmailAndPasswordCall {
	return _c.Parent.OnFindUserByEmailAndPassword(bParam, cParam)
}

func (_c *iUserUseCaseFindUserByIdCall) OnFindUserById(requestId string, req *user.FindUserByIdRequest) *iUserUseCaseFindUserByIdCall {
	return _c.Parent.OnFindUserById(requestId, req)
}

func (_c *iUserUseCaseFindUserByIdCall) OnUpdateUserById(requestId string, req *user.UpdateUserByIdRequest) *iUserUseCaseUpdateUserByIdCall {
	return _c.Parent.OnUpdateUserById(requestId, req)
}

func (_c *iUserUseCaseFindUserByIdCall) OnFindUserByEmailAndPasswordRaw(bParam interface{}, cParam interface{}) *iUserUseCaseFindUserByEmailAndPasswordCall {
	return _c.Parent.OnFindUserByEmailAndPasswordRaw(bParam, cParam)
}

func (_c *iUserUseCaseFindUserByIdCall) OnFindUserByIdRaw(requestId interface{}, req interface{}) *iUserUseCaseFindUserByIdCall {
	return _c.Parent.OnFindUserByIdRaw(requestId, req)
}

func (_c *iUserUseCaseFindUserByIdCall) OnUpdateUserByIdRaw(requestId interface{}, req interface{}) *iUserUseCaseUpdateUserByIdCall {
	return _c.Parent.OnUpdateUserByIdRaw(requestId, req)
}

func (_m *iUserUseCaseMock) UpdateUserById(_ context.Context, requestId string, req *user.UpdateUserByIdRequest) (*user.UpdateUserByIdResponse, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.UpdateUserByIdRequest) (*user.UpdateUserByIdResponse, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*user.UpdateUserByIdResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iUserUseCaseMock) OnUpdateUserById(requestId string, req *user.UpdateUserByIdRequest) *iUserUseCaseUpdateUserByIdCall {
	return &iUserUseCaseUpdateUserByIdCall{Call: _m.Mock.On("UpdateUserById", requestId, req), Parent: _m}
}

func (_m *iUserUseCaseMock) OnUpdateUserByIdRaw(requestId interface{}, req interface{}) *iUserUseCaseUpdateUserByIdCall {
	return &iUserUseCaseUpdateUserByIdCall{Call: _m.Mock.On("UpdateUserById", requestId, req), Parent: _m}
}

type iUserUseCaseUpdateUserByIdCall struct {
	*mock.Call
	Parent *iUserUseCaseMock
}

func (_c *iUserUseCaseUpdateUserByIdCall) Panic(msg string) *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) Once() *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) Twice() *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) Times(i int) *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) WaitUntil(w <-chan time.Time) *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) After(d time.Duration) *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) Run(fn func(args mock.Arguments)) *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) Maybe() *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) TypedReturns(a *user.UpdateUserByIdResponse, b error) *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) ReturnsFn(fn func(string, *user.UpdateUserByIdRequest) (*user.UpdateUserByIdResponse, error)) *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) TypedRun(fn func(string, *user.UpdateUserByIdRequest)) *iUserUseCaseUpdateUserByIdCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.UpdateUserByIdRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iUserUseCaseUpdateUserByIdCall) OnFindUserByEmailAndPassword(bParam string, cParam *user.FindUserByEmailAndPasswordRequest) *iUserUseCaseFindUserByEmailAndPasswordCall {
	return _c.Parent.OnFindUserByEmailAndPassword(bParam, cParam)
}

func (_c *iUserUseCaseUpdateUserByIdCall) OnFindUserById(requestId string, req *user.FindUserByIdRequest) *iUserUseCaseFindUserByIdCall {
	return _c.Parent.OnFindUserById(requestId, req)
}

func (_c *iUserUseCaseUpdateUserByIdCall) OnUpdateUserById(requestId string, req *user.UpdateUserByIdRequest) *iUserUseCaseUpdateUserByIdCall {
	return _c.Parent.OnUpdateUserById(requestId, req)
}

func (_c *iUserUseCaseUpdateUserByIdCall) OnFindUserByEmailAndPasswordRaw(bParam interface{}, cParam interface{}) *iUserUseCaseFindUserByEmailAndPasswordCall {
	return _c.Parent.OnFindUserByEmailAndPasswordRaw(bParam, cParam)
}

func (_c *iUserUseCaseUpdateUserByIdCall) OnFindUserByIdRaw(requestId interface{}, req interface{}) *iUserUseCaseFindUserByIdCall {
	return _c.Parent.OnFindUserByIdRaw(requestId, req)
}

func (_c *iUserUseCaseUpdateUserByIdCall) OnUpdateUserByIdRaw(requestId interface{}, req interface{}) *iUserUseCaseUpdateUserByIdCall {
	return _c.Parent.OnUpdateUserByIdRaw(requestId, req)
}
