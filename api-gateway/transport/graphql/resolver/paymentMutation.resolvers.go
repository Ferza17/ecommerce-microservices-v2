package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"github.com/ferza17/ecommerce-microservices-v2/api-gateway/enum"
	gen1 "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/graph/gen"
	gen "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/rpc/gen/payment/v1"
)

// CreatePayment is the resolver for the createPayment field.
func (r *mutationResolver) CreatePayment(ctx context.Context, input gen.CreatePaymentRequest) (*gen1.CreatePaymentResponse, error) {
	ctx, span := r.TelemetryInfrastructure.Tracer(ctx, "Resolver.CreatePayment")
	defer span.End()

	msg := "Payment created successfully"
	resp := &gen1.CreatePaymentResponse{
		Message: &msg,
	}

	if err := r.PaymentUseCase.CretePayment(ctx, ctx.Value(enum.XRequestIDHeader.String()).(string), &input); err != nil {
		msg = "Payment failed to create"
		return resp, err
	}

	return resp, nil
}
