package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"github.com/ferza17/ecommerce-microservices-v2/api-gateway/util"
	"time"

	gen1 "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/graph/gen"
	gen "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/rpc/gen/payment/v1"
)

// CreatedAt is the resolver for the createdAt field.
func (r *providerResolver) CreatedAt(ctx context.Context, obj *gen.Provider) (*time.Time, error) {
	return util.ConvertProtoTimestampToTime(obj.CreatedAt), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *providerResolver) UpdatedAt(ctx context.Context, obj *gen.Provider) (*time.Time, error) {
	return util.ConvertProtoTimestampToTime(obj.UpdatedAt), nil
}

// DiscardedAt is the resolver for the discardedAt field.
func (r *providerResolver) DiscardedAt(ctx context.Context, obj *gen.Provider) (*time.Time, error) {
	return util.ConvertProtoTimestampToTime(obj.DiscardedAt), nil
}

// Provider returns gen1.ProviderResolver implementation.
func (r *Resolver) Provider() gen1.ProviderResolver { return &providerResolver{r} }

type providerResolver struct{ *Resolver }
