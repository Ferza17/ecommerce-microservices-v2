package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"time"

	"github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/graph/gen"
	gen1 "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/rpc/gen/product/v1"
	"github.com/ferza17/ecommerce-microservices-v2/api-gateway/util"
)

// CreatedAt is the resolver for the createdAt field.
func (r *productResolver) CreatedAt(ctx context.Context, obj *gen1.Product) (*time.Time, error) {
	return util.ConvertProtoTimestampToTime(obj.CreatedAt), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *productResolver) UpdatedAt(ctx context.Context, obj *gen1.Product) (*time.Time, error) {
	return util.ConvertProtoTimestampToTime(obj.UpdatedAt), nil
}

// DiscardedAt is the resolver for the discardedAt field.
func (r *productResolver) DiscardedAt(ctx context.Context, obj *gen1.Product) (*time.Time, error) {
	return util.ConvertProtoTimestampToTime(obj.DiscardedAt), nil
}

// Product returns gen.ProductResolver implementation.
func (r *Resolver) Product() gen.ProductResolver { return &productResolver{r} }

type productResolver struct{ *Resolver }
