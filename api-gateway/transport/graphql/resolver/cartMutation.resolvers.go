package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.73

import (
	"context"
	"fmt"

	"github.com/ferza17/ecommerce-microservices-v2/api-gateway/enum"
	"github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/graph/gen"
	gen1 "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/rpc/gen/commerce/v1"
)

// CreateCartItem is the resolver for the createCartItem field.
func (r *mutationResolver) CreateCartItem(ctx context.Context, input *gen1.CreateCartItemRequest) (*gen1.CreateCartItemResponse, error) {
	ctx, span := r.TelemetryInfrastructure.Tracer(ctx, "Resolver.CreateCartItem")
	defer span.End()
	input.UserId = ctx.Value(enum.ContextKeyUserID.String()).(string)
	return r.CartUseCase.CreateCart(ctx, ctx.Value(enum.XRequestIDHeader.String()).(string), input)
}

// UpdateCartItemByID is the resolver for the updateCartItemById field.
func (r *mutationResolver) UpdateCartItemByID(ctx context.Context, input *gen1.UpdateCartItemByIdRequest) (*gen1.UpdateCartItemByIdResponse, error) {
	ctx, span := r.TelemetryInfrastructure.Tracer(ctx, "Resolver.UpdateCartItemByID")
	defer span.End()
	return r.CartUseCase.UpdateCartItemById(ctx, ctx.Value(enum.XRequestIDHeader.String()).(string), input)
}

// DeleteCartItem is the resolver for the deleteCartItem field.
func (r *mutationResolver) DeleteCartItem(ctx context.Context, input *gen.DeleteCartItemRequest) (*gen.DeleteCartItemResponse, error) {
	ctx, span := r.TelemetryInfrastructure.Tracer(ctx, "Resolver.DeleteCartItem")
	defer span.End()
	panic(fmt.Errorf("not implemented: DeleteCartItem - deleteCartItem"))
}

// Mutation returns gen.MutationResolver implementation.
func (r *Resolver) Mutation() gen.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
