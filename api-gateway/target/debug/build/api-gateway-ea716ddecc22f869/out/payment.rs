// This file is @generated by prost-build.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PaymentStatus {
    Pending = 0,
    Partial = 1,
    Success = 2,
    Failed = 3,
}
impl PaymentStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Pending => "PENDING",
            Self::Partial => "PARTIAL",
            Self::Success => "SUCCESS",
            Self::Failed => "FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PENDING" => Some(Self::Pending),
            "PARTIAL" => Some(Self::Partial),
            "SUCCESS" => Some(Self::Success),
            "FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProviderMethod {
    Bank = 0,
    CryptoCurrency = 1,
    Debit = 2,
    Credit = 3,
    CashOnDelivery = 4,
}
impl ProviderMethod {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Bank => "BANK",
            Self::CryptoCurrency => "CRYPTO_CURRENCY",
            Self::Debit => "DEBIT",
            Self::Credit => "CREDIT",
            Self::CashOnDelivery => "CASH_ON_DELIVERY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BANK" => Some(Self::Bank),
            "CRYPTO_CURRENCY" => Some(Self::CryptoCurrency),
            "DEBIT" => Some(Self::Debit),
            "CREDIT" => Some(Self::Credit),
            "CASH_ON_DELIVERY" => Some(Self::CashOnDelivery),
            _ => None,
        }
    }
}
/// REFERRED TO DATABASE SCHEMA
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PaymentItem {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(double, tag = "3")]
    pub amount: f64,
    #[prost(int32, tag = "4")]
    pub qty: i32,
    #[prost(string, tag = "5")]
    pub payment_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub discarded_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// REFERRED TO DATABASE SCHEMA
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Provider {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "ProviderMethod", tag = "3")]
    pub method: i32,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub discarded_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// REFERRED TO DATABASE SCHEMA
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Payment {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub code: ::prost::alloc::string::String,
    #[prost(double, tag = "4")]
    pub total_price: f64,
    #[prost(enumeration = "PaymentStatus", tag = "5")]
    pub status: i32,
    #[prost(string, tag = "6")]
    pub provider_id: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub discarded_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// PAYMENT REQUEST DEFINITION
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePaymentItemRequest {
    #[prost(string, tag = "1")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub qty: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePaymentRequest {
    #[prost(message, repeated, tag = "1")]
    pub items: ::prost::alloc::vec::Vec<CreatePaymentItemRequest>,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub provider_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub shipping_provider_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PaymentOrderDelayedCancelledRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CallBackPaymentRequest {
    #[prost(string, tag = "1")]
    pub payment_id: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub amount: f64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindPaymentByIdRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindPaymentByUserIdAndStatusRequest {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(enumeration = "PaymentStatus", tag = "2")]
    pub status: i32,
}
/// PAYMENT PROVIDER REQUEST DEFINITION
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindPaymentProvidersRequest {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindPaymentProviderByIdRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePaymentResponse {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<create_payment_response::CreatePaymentResponseData>,
}
/// Nested message and enum types in `CreatePaymentResponse`.
pub mod create_payment_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CreatePaymentResponseData {
        #[prost(string, tag = "1")]
        pub id: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindPaymentByIdResponse {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<
        find_payment_by_id_response::FindPaymentByIdResponseData,
    >,
}
/// Nested message and enum types in `FindPaymentByIdResponse`.
pub mod find_payment_by_id_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FindPaymentByIdResponseData {
        #[prost(message, optional, tag = "1")]
        pub payment: ::core::option::Option<super::Payment>,
        #[prost(message, optional, tag = "2")]
        pub provider: ::core::option::Option<super::Provider>,
        #[prost(message, repeated, tag = "3")]
        pub payment_items: ::prost::alloc::vec::Vec<super::PaymentItem>,
    }
}
/// PAYMENT PROVIDER PROTO DEFINITION
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindPaymentProviderByIdResponse {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<Provider>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindPaymentProvidersResponse {
    #[prost(string, tag = "1")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub data: ::core::option::Option<
        find_payment_providers_response::FindPaymentProvidersResponseData,
    >,
}
/// Nested message and enum types in `FindPaymentProvidersResponse`.
pub mod find_payment_providers_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FindPaymentProvidersResponseData {
        #[prost(message, repeated, tag = "1")]
        pub providers: ::prost::alloc::vec::Vec<super::Provider>,
        #[prost(uint32, tag = "2")]
        pub page: u32,
        #[prost(uint32, tag = "3")]
        pub limit: u32,
    }
}
