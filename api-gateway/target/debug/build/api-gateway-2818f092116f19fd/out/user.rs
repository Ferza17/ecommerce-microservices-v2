// This file is @generated by prost-build.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnumRole {
    Customer = 0,
    CustomerMembership = 1,
    Admin = 5505,
    SuperAdmin = 5506,
}
impl EnumRole {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Customer => "CUSTOMER",
            Self::CustomerMembership => "CUSTOMER_MEMBERSHIP",
            Self::Admin => "ADMIN",
            Self::SuperAdmin => "SUPER_ADMIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CUSTOMER" => Some(Self::Customer),
            "CUSTOMER_MEMBERSHIP" => Some(Self::CustomerMembership),
            "ADMIN" => Some(Self::Admin),
            "SUPER_ADMIN" => Some(Self::SuperAdmin),
            _ => None,
        }
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MethodAccessControl {
    #[prost(bool, tag = "1")]
    pub is_public: bool,
    #[prost(enumeration = "EnumRole", repeated, tag = "2")]
    pub roles: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "3")]
    pub http: ::core::option::Option<Http>,
    #[prost(message, optional, tag = "5")]
    pub broker: ::core::option::Option<Broker>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Http {
    #[prost(string, tag = "1")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub method: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Broker {
    #[prost(string, tag = "1")]
    pub event_type: ::prost::alloc::string::String,
}
/// NEW
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserRegisterRequest {
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub password: ::prost::alloc::string::String,
    #[prost(enumeration = "EnumRole", tag = "5")]
    pub role: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserLoginByEmailAndPasswordRequest {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserVerifyOtpRequest {
    #[prost(string, tag = "1")]
    pub otp: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserLogoutByTokenRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserVerifyAccessControlRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub full_method_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub http_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub http_method: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserFindUserByTokenRequest {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthServiceVerifyIsExcludedRequest {
    #[prost(string, optional, tag = "2")]
    pub full_method_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub http_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub http_method: ::core::option::Option<::prost::alloc::string::String>,
}
/// USER REQUEST DEFINITION
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByIdRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserByIdRequest {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub password: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    pub is_verified: ::core::option::Option<bool>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByEmailAndPasswordRequest {
    #[prost(string, tag = "1")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub password: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub password: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub is_verified: bool,
    #[prost(message, optional, tag = "6")]
    pub role: ::core::option::Option<Role>,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    pub discarded_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Role {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration = "EnumRole", tag = "2")]
    pub role: i32,
    #[prost(message, repeated, tag = "4")]
    pub access_controls: ::prost::alloc::vec::Vec<AccessControl>,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessControl {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub full_method_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub http_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub http_method: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub role_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessControlExcluded {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub full_method_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub http_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub http_method: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
/// AUTH RESPONSE DEFINITION
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserRegisterResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<
        auth_user_register_response::AuthUserRegisterResponseData,
    >,
}
/// Nested message and enum types in `AuthUserRegisterResponse`.
pub mod auth_user_register_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AuthUserRegisterResponseData {
        #[prost(message, optional, tag = "1")]
        pub user: ::core::option::Option<super::User>,
        #[prost(message, optional, tag = "2")]
        pub role: ::core::option::Option<super::Role>,
        #[prost(message, repeated, tag = "3")]
        pub access_control: ::prost::alloc::vec::Vec<super::AccessControl>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserVerifyOtpResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<
        auth_user_verify_otp_response::AuthUserVerifyOtpResponseData,
    >,
}
/// Nested message and enum types in `AuthUserVerifyOtpResponse`.
pub mod auth_user_verify_otp_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AuthUserVerifyOtpResponseData {
        #[prost(string, tag = "1")]
        pub access_token: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        pub refresh_token: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserLogoutByTokenResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub data: ::core::option::Option<
        auth_user_logout_by_token_response::AuthUserLogoutByTokenResponseData,
    >,
}
/// Nested message and enum types in `AuthUserLogoutByTokenResponse`.
pub mod auth_user_logout_by_token_response {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AuthUserLogoutByTokenResponseData {
        #[prost(bool, tag = "1")]
        pub is_valid: bool,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserVerifyAccessControlResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<
        auth_user_verify_access_control_response::AuthUserVerifyAccessControlResponseData,
    >,
}
/// Nested message and enum types in `AuthUserVerifyAccessControlResponse`.
pub mod auth_user_verify_access_control_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AuthUserVerifyAccessControlResponseData {
        #[prost(bool, tag = "1")]
        pub is_valid: bool,
        #[prost(message, optional, tag = "2")]
        pub user: ::core::option::Option<super::User>,
        #[prost(message, optional, tag = "3")]
        pub role: ::core::option::Option<super::Role>,
        #[prost(message, repeated, tag = "4")]
        pub access_controls: ::prost::alloc::vec::Vec<super::AccessControl>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserFindUserByTokenResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<
        auth_user_find_user_by_token_response::AuthUserFindUserByTokenResponseData,
    >,
}
/// Nested message and enum types in `AuthUserFindUserByTokenResponse`.
pub mod auth_user_find_user_by_token_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AuthUserFindUserByTokenResponseData {
        #[prost(message, optional, tag = "1")]
        pub user: ::core::option::Option<super::User>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthServiceVerifyIsExcludedResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<
        auth_service_verify_is_excluded_response::AuthServiceVerifyIsExcludedResponseData,
    >,
}
/// Nested message and enum types in `AuthServiceVerifyIsExcludedResponse`.
pub mod auth_service_verify_is_excluded_response {
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AuthServiceVerifyIsExcludedResponseData {
        #[prost(bool, tag = "1")]
        pub is_excluded: bool,
    }
}
/// USER RESPONSE DEFINITION
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserByIdResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<
        update_user_by_id_response::UpdateUserByIdResponseData,
    >,
}
/// Nested message and enum types in `UpdateUserByIdResponse`.
pub mod update_user_by_id_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UpdateUserByIdResponseData {
        #[prost(string, tag = "1")]
        pub id: ::prost::alloc::string::String,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByIdResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<find_user_by_id_response::FindUserByIdResponseData>,
}
/// Nested message and enum types in `FindUserByIdResponse`.
pub mod find_user_by_id_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FindUserByIdResponseData {
        #[prost(message, optional, tag = "1")]
        pub user: ::core::option::Option<super::User>,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByEmailAndPasswordResponse {
    #[prost(string, tag = "1")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub data: ::core::option::Option<
        find_user_by_email_and_password_response::FindUserByEmailAndPasswordResponseData,
    >,
}
/// Nested message and enum types in `FindUserByEmailAndPasswordResponse`.
pub mod find_user_by_email_and_password_response {
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FindUserByEmailAndPasswordResponseData {
        #[prost(message, optional, tag = "1")]
        pub user: ::core::option::Option<super::User>,
    }
}
