// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cartMessage.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemMultiError, or nil
// if none found.
func (m *CartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductId

	// no validation rules for UserId

	// no validation rules for Qty

	// no validation rules for Price

	if all {
		switch v := interface{}(m.GetCratedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CartItemValidationError{
					field:  "CratedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CartItemValidationError{
					field:  "CratedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCratedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CartItemValidationError{
				field:  "CratedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CartItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CartItemValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CartItemValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CartItemMultiError(errors)
	}

	return nil
}

// CartItemMultiError is an error wrapping multiple validation errors returned
// by CartItem.ValidateAll() if the designated constraints aren't met.
type CartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemMultiError) AllErrors() []error { return m }

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}

// Validate checks the field values on CreateCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCartItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCartItemRequestMultiError, or nil if none found.
func (m *CreateCartItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCartItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for UserId

	// no validation rules for Qty

	// no validation rules for Price

	if len(errors) > 0 {
		return CreateCartItemRequestMultiError(errors)
	}

	return nil
}

// CreateCartItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCartItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCartItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCartItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCartItemRequestMultiError) AllErrors() []error { return m }

// CreateCartItemRequestValidationError is the validation error returned by
// CreateCartItemRequest.Validate if the designated constraints aren't met.
type CreateCartItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCartItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCartItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCartItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCartItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCartItemRequestValidationError) ErrorName() string {
	return "CreateCartItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCartItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCartItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCartItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCartItemRequestValidationError{}

// Validate checks the field values on CreateCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCartItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCartItemResponseMultiError, or nil if none found.
func (m *CreateCartItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCartItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCartItemResponseMultiError(errors)
	}

	return nil
}

// CreateCartItemResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCartItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCartItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCartItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCartItemResponseMultiError) AllErrors() []error { return m }

// CreateCartItemResponseValidationError is the validation error returned by
// CreateCartItemResponse.Validate if the designated constraints aren't met.
type CreateCartItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCartItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCartItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCartItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCartItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCartItemResponseValidationError) ErrorName() string {
	return "CreateCartItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCartItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCartItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCartItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCartItemResponseValidationError{}

// Validate checks the field values on UpdateCartItemByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCartItemByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCartItemByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCartItemByIdRequestMultiError, or nil if none found.
func (m *UpdateCartItemByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCartItemByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProductId

	// no validation rules for UserId

	// no validation rules for Qty

	// no validation rules for Price

	if len(errors) > 0 {
		return UpdateCartItemByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateCartItemByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCartItemByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateCartItemByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCartItemByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCartItemByIdRequestMultiError) AllErrors() []error { return m }

// UpdateCartItemByIdRequestValidationError is the validation error returned by
// UpdateCartItemByIdRequest.Validate if the designated constraints aren't met.
type UpdateCartItemByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCartItemByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCartItemByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCartItemByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCartItemByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCartItemByIdRequestValidationError) ErrorName() string {
	return "UpdateCartItemByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCartItemByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCartItemByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCartItemByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCartItemByIdRequestValidationError{}

// Validate checks the field values on UpdateCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCartItemByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCartItemByIdResponseMultiError, or nil if none found.
func (m *UpdateCartItemByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCartItemByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateCartItemByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateCartItemByIdResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCartItemByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCartItemByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCartItemByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCartItemByIdResponseMultiError) AllErrors() []error { return m }

// UpdateCartItemByIdResponseValidationError is the validation error returned
// by UpdateCartItemByIdResponse.Validate if the designated constraints aren't met.
type UpdateCartItemByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCartItemByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCartItemByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCartItemByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCartItemByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCartItemByIdResponseValidationError) ErrorName() string {
	return "UpdateCartItemByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCartItemByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCartItemByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCartItemByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCartItemByIdResponseValidationError{}

// Validate checks the field values on DeleteCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemRequestMultiError, or nil if none found.
func (m *DeleteCartItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteCartItemRequestMultiError(errors)
	}

	return nil
}

// DeleteCartItemRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCartItemRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCartItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemRequestMultiError) AllErrors() []error { return m }

// DeleteCartItemRequestValidationError is the validation error returned by
// DeleteCartItemRequest.Validate if the designated constraints aren't met.
type DeleteCartItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemRequestValidationError) ErrorName() string {
	return "DeleteCartItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemRequestValidationError{}

// Validate checks the field values on DeleteCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemResponseMultiError, or nil if none found.
func (m *DeleteCartItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteCartItemResponseMultiError(errors)
	}

	return nil
}

// DeleteCartItemResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCartItemResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCartItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemResponseMultiError) AllErrors() []error { return m }

// DeleteCartItemResponseValidationError is the validation error returned by
// DeleteCartItemResponse.Validate if the designated constraints aren't met.
type DeleteCartItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemResponseValidationError) ErrorName() string {
	return "DeleteCartItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemResponseValidationError{}

// Validate checks the field values on FindCartItemsWithPaginationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindCartItemsWithPaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCartItemsWithPaginationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindCartItemsWithPaginationRequestMultiError, or nil if none found.
func (m *FindCartItemsWithPaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCartItemsWithPaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return FindCartItemsWithPaginationRequestMultiError(errors)
	}

	return nil
}

// FindCartItemsWithPaginationRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindCartItemsWithPaginationRequest.ValidateAll() if the designated
// constraints aren't met.
type FindCartItemsWithPaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCartItemsWithPaginationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCartItemsWithPaginationRequestMultiError) AllErrors() []error { return m }

// FindCartItemsWithPaginationRequestValidationError is the validation error
// returned by FindCartItemsWithPaginationRequest.Validate if the designated
// constraints aren't met.
type FindCartItemsWithPaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCartItemsWithPaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCartItemsWithPaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCartItemsWithPaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCartItemsWithPaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCartItemsWithPaginationRequestValidationError) ErrorName() string {
	return "FindCartItemsWithPaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCartItemsWithPaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCartItemsWithPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCartItemsWithPaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCartItemsWithPaginationRequestValidationError{}

// Validate checks the field values on FindCartItemsWithPaginationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindCartItemsWithPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCartItemsWithPaginationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindCartItemsWithPaginationResponseMultiError, or nil if none found.
func (m *FindCartItemsWithPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCartItemsWithPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindCartItemsWithPaginationResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindCartItemsWithPaginationResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindCartItemsWithPaginationResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return FindCartItemsWithPaginationResponseMultiError(errors)
	}

	return nil
}

// FindCartItemsWithPaginationResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindCartItemsWithPaginationResponse.ValidateAll() if the designated
// constraints aren't met.
type FindCartItemsWithPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCartItemsWithPaginationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCartItemsWithPaginationResponseMultiError) AllErrors() []error { return m }

// FindCartItemsWithPaginationResponseValidationError is the validation error
// returned by FindCartItemsWithPaginationResponse.Validate if the designated
// constraints aren't met.
type FindCartItemsWithPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCartItemsWithPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCartItemsWithPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCartItemsWithPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCartItemsWithPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCartItemsWithPaginationResponseValidationError) ErrorName() string {
	return "FindCartItemsWithPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCartItemsWithPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCartItemsWithPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCartItemsWithPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCartItemsWithPaginationResponseValidationError{}
