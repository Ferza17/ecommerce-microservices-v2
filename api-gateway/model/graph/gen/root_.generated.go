// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gen "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/rpc/gen/commerce/v1"
	gen1 "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/rpc/gen/product/v1"
	gen2 "github.com/ferza17/ecommerce-microservices-v2/api-gateway/model/rpc/gen/user/v1"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	CartItem() CartItemResolver
	Mutation() MutationResolver
	Product() ProductResolver
	Query() QueryResolver
	User() UserResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	CartItem struct {
		CratedAt  func(childComplexity int) int
		Id        func(childComplexity int) int
		Price     func(childComplexity int) int
		ProductId func(childComplexity int) int
		Qty       func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserId    func(childComplexity int) int
	}

	CreateCartItemResponse struct {
		Id func(childComplexity int) int
	}

	CreateProductResponse struct {
		Id func(childComplexity int) int
	}

	CreateUserResponse struct {
		Id func(childComplexity int) int
	}

	DeleteCartItemResponse struct {
		UserID func(childComplexity int) int
	}

	DeleteProductByIdResponse struct {
		Message func(childComplexity int) int
	}

	FindCartItemsWithPaginationResponse struct {
		Items func(childComplexity int) int
		Limit func(childComplexity int) int
		Page  func(childComplexity int) int
	}

	FindProductsWithPaginationResponse struct {
		Data  func(childComplexity int) int
		Limit func(childComplexity int) int
		Page  func(childComplexity int) int
		Total func(childComplexity int) int
	}

	Mutation struct {
		CreateCartItem     func(childComplexity int, input *gen.CreateCartItemRequest) int
		CreateProduct      func(childComplexity int, input gen1.CreateProductRequest) int
		CreateUser         func(childComplexity int, input gen2.CreateUserRequest) int
		DeleteCartItem     func(childComplexity int, input *DeleteCartItemRequest) int
		DeleteProductByID  func(childComplexity int, id string) int
		UpdateCartItemByID func(childComplexity int, input *gen.UpdateCartItemByIdRequest) int
		UpdateProductByID  func(childComplexity int, input gen1.UpdateProductByIdRequest) int
		UpdateUserByID     func(childComplexity int, input gen2.UpdateUserByIdRequest) int
	}

	Product struct {
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		DiscardedAt func(childComplexity int) int
		Id          func(childComplexity int) int
		Image       func(childComplexity int) int
		Name        func(childComplexity int) int
		Price       func(childComplexity int) int
		Stock       func(childComplexity int) int
		Uom         func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Query struct {
		FindCartItemsWithPagination func(childComplexity int, input *gen.FindCartItemsWithPaginationRequest) int
		FindProductByID             func(childComplexity int, id string) int
		FindProductsWithPagination  func(childComplexity int, filter gen1.FindProductsWithPaginationRequest) int
		FindUserByEmailAndPassword  func(childComplexity int, input gen2.FindUserByEmailAndPasswordRequest) int
		FindUserByID                func(childComplexity int, id string) int
	}

	UpdateCartItemByIdResponse struct {
		Id func(childComplexity int) int
	}

	UpdateUserByIdResponse struct {
		Id func(childComplexity int) int
	}

	User struct {
		CreatedAt   func(childComplexity int) int
		DiscardedAt func(childComplexity int) int
		Email       func(childComplexity int) int
		Id          func(childComplexity int) int
		Name        func(childComplexity int) int
		Password    func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "CartItem.crated_at":
		if e.complexity.CartItem.CratedAt == nil {
			break
		}

		return e.complexity.CartItem.CratedAt(childComplexity), true

	case "CartItem.id":
		if e.complexity.CartItem.Id == nil {
			break
		}

		return e.complexity.CartItem.Id(childComplexity), true

	case "CartItem.price":
		if e.complexity.CartItem.Price == nil {
			break
		}

		return e.complexity.CartItem.Price(childComplexity), true

	case "CartItem.productId":
		if e.complexity.CartItem.ProductId == nil {
			break
		}

		return e.complexity.CartItem.ProductId(childComplexity), true

	case "CartItem.qty":
		if e.complexity.CartItem.Qty == nil {
			break
		}

		return e.complexity.CartItem.Qty(childComplexity), true

	case "CartItem.updated_at":
		if e.complexity.CartItem.UpdatedAt == nil {
			break
		}

		return e.complexity.CartItem.UpdatedAt(childComplexity), true

	case "CartItem.userId":
		if e.complexity.CartItem.UserId == nil {
			break
		}

		return e.complexity.CartItem.UserId(childComplexity), true

	case "CreateCartItemResponse.id":
		if e.complexity.CreateCartItemResponse.Id == nil {
			break
		}

		return e.complexity.CreateCartItemResponse.Id(childComplexity), true

	case "CreateProductResponse.id":
		if e.complexity.CreateProductResponse.Id == nil {
			break
		}

		return e.complexity.CreateProductResponse.Id(childComplexity), true

	case "CreateUserResponse.id":
		if e.complexity.CreateUserResponse.Id == nil {
			break
		}

		return e.complexity.CreateUserResponse.Id(childComplexity), true

	case "DeleteCartItemResponse.userId":
		if e.complexity.DeleteCartItemResponse.UserID == nil {
			break
		}

		return e.complexity.DeleteCartItemResponse.UserID(childComplexity), true

	case "DeleteProductByIdResponse.message":
		if e.complexity.DeleteProductByIdResponse.Message == nil {
			break
		}

		return e.complexity.DeleteProductByIdResponse.Message(childComplexity), true

	case "FindCartItemsWithPaginationResponse.items":
		if e.complexity.FindCartItemsWithPaginationResponse.Items == nil {
			break
		}

		return e.complexity.FindCartItemsWithPaginationResponse.Items(childComplexity), true

	case "FindCartItemsWithPaginationResponse.limit":
		if e.complexity.FindCartItemsWithPaginationResponse.Limit == nil {
			break
		}

		return e.complexity.FindCartItemsWithPaginationResponse.Limit(childComplexity), true

	case "FindCartItemsWithPaginationResponse.page":
		if e.complexity.FindCartItemsWithPaginationResponse.Page == nil {
			break
		}

		return e.complexity.FindCartItemsWithPaginationResponse.Page(childComplexity), true

	case "FindProductsWithPaginationResponse.data":
		if e.complexity.FindProductsWithPaginationResponse.Data == nil {
			break
		}

		return e.complexity.FindProductsWithPaginationResponse.Data(childComplexity), true

	case "FindProductsWithPaginationResponse.limit":
		if e.complexity.FindProductsWithPaginationResponse.Limit == nil {
			break
		}

		return e.complexity.FindProductsWithPaginationResponse.Limit(childComplexity), true

	case "FindProductsWithPaginationResponse.page":
		if e.complexity.FindProductsWithPaginationResponse.Page == nil {
			break
		}

		return e.complexity.FindProductsWithPaginationResponse.Page(childComplexity), true

	case "FindProductsWithPaginationResponse.total":
		if e.complexity.FindProductsWithPaginationResponse.Total == nil {
			break
		}

		return e.complexity.FindProductsWithPaginationResponse.Total(childComplexity), true

	case "Mutation.createCartItem":
		if e.complexity.Mutation.CreateCartItem == nil {
			break
		}

		args, err := ec.field_Mutation_createCartItem_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateCartItem(childComplexity, args["input"].(*gen.CreateCartItemRequest)), true

	case "Mutation.createProduct":
		if e.complexity.Mutation.CreateProduct == nil {
			break
		}

		args, err := ec.field_Mutation_createProduct_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateProduct(childComplexity, args["input"].(gen1.CreateProductRequest)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(gen2.CreateUserRequest)), true

	case "Mutation.deleteCartItem":
		if e.complexity.Mutation.DeleteCartItem == nil {
			break
		}

		args, err := ec.field_Mutation_deleteCartItem_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteCartItem(childComplexity, args["input"].(*DeleteCartItemRequest)), true

	case "Mutation.deleteProductById":
		if e.complexity.Mutation.DeleteProductByID == nil {
			break
		}

		args, err := ec.field_Mutation_deleteProductById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteProductByID(childComplexity, args["id"].(string)), true

	case "Mutation.updateCartItemById":
		if e.complexity.Mutation.UpdateCartItemByID == nil {
			break
		}

		args, err := ec.field_Mutation_updateCartItemById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateCartItemByID(childComplexity, args["input"].(*gen.UpdateCartItemByIdRequest)), true

	case "Mutation.updateProductById":
		if e.complexity.Mutation.UpdateProductByID == nil {
			break
		}

		args, err := ec.field_Mutation_updateProductById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateProductByID(childComplexity, args["input"].(gen1.UpdateProductByIdRequest)), true

	case "Mutation.updateUserById":
		if e.complexity.Mutation.UpdateUserByID == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserByID(childComplexity, args["input"].(gen2.UpdateUserByIdRequest)), true

	case "Product.createdAt":
		if e.complexity.Product.CreatedAt == nil {
			break
		}

		return e.complexity.Product.CreatedAt(childComplexity), true

	case "Product.description":
		if e.complexity.Product.Description == nil {
			break
		}

		return e.complexity.Product.Description(childComplexity), true

	case "Product.discardedAt":
		if e.complexity.Product.DiscardedAt == nil {
			break
		}

		return e.complexity.Product.DiscardedAt(childComplexity), true

	case "Product.id":
		if e.complexity.Product.Id == nil {
			break
		}

		return e.complexity.Product.Id(childComplexity), true

	case "Product.image":
		if e.complexity.Product.Image == nil {
			break
		}

		return e.complexity.Product.Image(childComplexity), true

	case "Product.name":
		if e.complexity.Product.Name == nil {
			break
		}

		return e.complexity.Product.Name(childComplexity), true

	case "Product.price":
		if e.complexity.Product.Price == nil {
			break
		}

		return e.complexity.Product.Price(childComplexity), true

	case "Product.stock":
		if e.complexity.Product.Stock == nil {
			break
		}

		return e.complexity.Product.Stock(childComplexity), true

	case "Product.uom":
		if e.complexity.Product.Uom == nil {
			break
		}

		return e.complexity.Product.Uom(childComplexity), true

	case "Product.updatedAt":
		if e.complexity.Product.UpdatedAt == nil {
			break
		}

		return e.complexity.Product.UpdatedAt(childComplexity), true

	case "Query.findCartItemsWithPagination":
		if e.complexity.Query.FindCartItemsWithPagination == nil {
			break
		}

		args, err := ec.field_Query_findCartItemsWithPagination_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindCartItemsWithPagination(childComplexity, args["input"].(*gen.FindCartItemsWithPaginationRequest)), true

	case "Query.findProductById":
		if e.complexity.Query.FindProductByID == nil {
			break
		}

		args, err := ec.field_Query_findProductById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindProductByID(childComplexity, args["id"].(string)), true

	case "Query.findProductsWithPagination":
		if e.complexity.Query.FindProductsWithPagination == nil {
			break
		}

		args, err := ec.field_Query_findProductsWithPagination_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindProductsWithPagination(childComplexity, args["filter"].(gen1.FindProductsWithPaginationRequest)), true

	case "Query.findUserByEmailAndPassword":
		if e.complexity.Query.FindUserByEmailAndPassword == nil {
			break
		}

		args, err := ec.field_Query_findUserByEmailAndPassword_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindUserByEmailAndPassword(childComplexity, args["input"].(gen2.FindUserByEmailAndPasswordRequest)), true

	case "Query.findUserById":
		if e.complexity.Query.FindUserByID == nil {
			break
		}

		args, err := ec.field_Query_findUserById_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindUserByID(childComplexity, args["id"].(string)), true

	case "UpdateCartItemByIdResponse.id":
		if e.complexity.UpdateCartItemByIdResponse.Id == nil {
			break
		}

		return e.complexity.UpdateCartItemByIdResponse.Id(childComplexity), true

	case "UpdateUserByIdResponse.id":
		if e.complexity.UpdateUserByIdResponse.Id == nil {
			break
		}

		return e.complexity.UpdateUserByIdResponse.Id(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.discardedAt":
		if e.complexity.User.DiscardedAt == nil {
			break
		}

		return e.complexity.User.DiscardedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.Id == nil {
			break
		}

		return e.complexity.User.Id(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.password":
		if e.complexity.User.Password == nil {
			break
		}

		return e.complexity.User.Password(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreateCartItemRequest,
		ec.unmarshalInputCreateProductRequest,
		ec.unmarshalInputCreateUserRequest,
		ec.unmarshalInputDeleteCartItemRequest,
		ec.unmarshalInputFindCartItemsWithPaginationRequest,
		ec.unmarshalInputFindProductsWithPaginationRequest,
		ec.unmarshalInputFindUserByEmailAndPasswordRequest,
		ec.unmarshalInputUpdateCartItemByIdRequest,
		ec.unmarshalInputUpdateProductByIdRequest,
		ec.unmarshalInputUpdateUserByIdRequest,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/cart.graphqls", Input: `type CartItem {
    id: String
    productId: String
    userId: String
    qty: Int
    price: Float
    crated_at: Time
    updated_at: Time
}

input CreateCartItemRequest {
    productId: String
    userId: String
    qty: Int
    price: Float
}

type CreateCartItemResponse {
    id: String
}

input UpdateCartItemByIdRequest {
    id: String
    productId: String
    userId: String
    qty: Int
    price: Float
}

type UpdateCartItemByIdResponse {
    id: String
}

input DeleteCartItemRequest {
    productId: String
    userId: String
}

type DeleteCartItemResponse {
    userId: String
}

input FindCartItemsWithPaginationRequest {
    userId: String
    productIds: [String]
    page: Int
    limit: Int
}

type FindCartItemsWithPaginationResponse {
    items: [CartItem]
    page: Int
    limit: Int
}
`, BuiltIn: false},
	{Name: "../schema/cartMutation.graphqls", Input: `extend type Mutation {
    createCartItem(input: CreateCartItemRequest): CreateCartItemResponse
    updateCartItemById(input: UpdateCartItemByIdRequest): UpdateCartItemByIdResponse
    deleteCartItem(input: DeleteCartItemRequest): DeleteCartItemResponse
}`, BuiltIn: false},
	{Name: "../schema/cartQuery.graphqls", Input: `extend type Query {
    findCartItemsWithPagination(input: FindCartItemsWithPaginationRequest): FindCartItemsWithPaginationResponse
}`, BuiltIn: false},
	{Name: "../schema/product.graphqls", Input: `scalar Time

type Product {
    id: ID!
    name: String!
    description: String!
    uom: String!
    image: String!
    price: Float!
    stock: Int!
    createdAt: Time
    updatedAt: Time
    discardedAt: Time
}

type FindProductsWithPaginationResponse {
    data: [Product!]!
    limit: Int!
    page: Int!
    total: Int!
}

type DeleteProductByIdResponse {
    message: String!
}

input CreateProductRequest {
    name: String!
    description: String!
    uom: String!
    image: String!
    price: Float!
    stock: Int!
}

input UpdateProductByIdRequest {
    id: ID!
    name: String
    description: String
    uom: String
    image: String
    price: Float
    stock: Int
}

input FindProductsWithPaginationRequest {
    ids: [ID]
    name: [String!]
    page: Int!
    limit: Int!
}

type CreateProductResponse {
    id: ID!
}`, BuiltIn: false},
	{Name: "../schema/productMutation.graphqls", Input: `extend type Mutation {
    createProduct(input: CreateProductRequest!): CreateProductResponse!
    updateProductById(input: UpdateProductByIdRequest!): Product!
    deleteProductById(id: ID!): DeleteProductByIdResponse!
}
`, BuiltIn: false},
	{Name: "../schema/productQuery.graphqls", Input: `extend type Query {
    findProductsWithPagination(filter: FindProductsWithPaginationRequest!): FindProductsWithPaginationResponse!
    findProductById(id: String!): Product!
}`, BuiltIn: false},
	{Name: "../schema/user.graphqls", Input: `type User {
    id: ID!
    name: String!
    email: String!
    password: String
    createdAt: Time
    updatedAt: Time
    discardedAt: Time
}

input CreateUserRequest {
    name: String!
    email: String!
    password: String!
}

type CreateUserResponse {
    id : String!
}

input UpdateUserByIdRequest {
    id: String!
    name: String
    email: String
    password: String
}

type UpdateUserByIdResponse {
    id: String!
}

input FindUserByEmailAndPasswordRequest {
    email: String!
    password: String!
}`, BuiltIn: false},
	{Name: "../schema/userMutation.graphqls", Input: `extend type Mutation {
    createUser(input: CreateUserRequest!): CreateUserResponse!
    updateUserById(input: UpdateUserByIdRequest!): UpdateUserByIdResponse
}`, BuiltIn: false},
	{Name: "../schema/userQuery.graphqls", Input: `extend type Query {
    findUserById(id: String!): User
    findUserByEmailAndPassword(input: FindUserByEmailAndPasswordRequest!): User
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
