// This file is @generated by prost-build.
/// SHIPPING PROTO DEFINITION
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateShippingRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.CreateShippingRequest.user_id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.CreateShippingRequest.payment_id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub payment_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "shipping.CreateShippingRequest.shipping_provider_id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub shipping_provider_id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShippingByIdRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.GetShippingByIdRequest.id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListShippingRequest {
    #[prost(uint32, tag = "1")]
    #[validate(name = "shipping.ListShippingRequest.page")]
    #[validate(r#type(uint32(gt = 0)))]
    pub page: u32,
    #[prost(uint32, tag = "2")]
    #[validate(name = "shipping.ListShippingRequest.limit")]
    #[validate(r#type(uint32(gt = 0)))]
    pub limit: u32,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateShippingRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.UpdateShippingRequest.id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.UpdateShippingRequest.user_id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "shipping.UpdateShippingRequest.payment_id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub payment_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[validate(name = "shipping.UpdateShippingRequest.shipping_provider_id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub shipping_provider_id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteShippingRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.DeleteShippingRequest.id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub id: ::prost::alloc::string::String,
}
/// SHIPPING PROVIDER PROTO DEFINITION
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShippingProviderByIdRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.GetShippingProviderByIdRequest.id")]
    #[validate(r#type(string(ignore_empty = false)))]
    pub id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListShippingProvidersRequest {
    #[prost(uint32, tag = "1")]
    #[validate(name = "shipping.ListShippingProvidersRequest.page")]
    #[validate(r#type(uint32(gt = 0)))]
    pub page: u32,
    #[prost(uint32, tag = "2")]
    #[validate(name = "shipping.ListShippingProvidersRequest.limit")]
    #[validate(r#type(uint32(gt = 0)))]
    pub limit: u32,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShippingProvider {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.ShippingProvider.id")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.ShippingProvider.name")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "shipping.ShippingProvider.created_at")]
    #[schema(value_type = String, format = "date-time")]
    pub created_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "shipping.ShippingProvider.updated_at")]
    #[schema(value_type = String, format = "date-time")]
    pub updated_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "5")]
    #[validate(name = "shipping.ShippingProvider.discarded_at")]
    #[schema(value_type = String, format = "date-time")]
    pub discarded_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Shipping {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.Shipping.id")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.Shipping.user_id")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "shipping.Shipping.payment_id")]
    pub payment_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[validate(name = "shipping.Shipping.shipping_provider_id")]
    pub shipping_provider_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "100")]
    #[validate(name = "shipping.Shipping.created_at")]
    #[schema(value_type = String, format = "date-time")]
    pub created_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "1002")]
    #[validate(name = "shipping.Shipping.updated_at")]
    #[schema(value_type = String, format = "date-time")]
    pub updated_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "1003")]
    #[validate(name = "shipping.Shipping.discarded_at")]
    #[schema(value_type = String, format = "date-time")]
    pub discarded_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ShippingFullResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.ShippingFullResponse.id")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    #[validate(name = "shipping.ShippingFullResponse.user")]
    pub user: ::core::option::Option<super::user::User>,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "shipping.ShippingFullResponse.payment")]
    pub payment: ::core::option::Option<super::payment::Payment>,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "shipping.ShippingFullResponse.shipping_provider")]
    pub shipping_provider: ::core::option::Option<ShippingProvider>,
    #[prost(message, optional, tag = "100")]
    #[validate(name = "shipping.ShippingFullResponse.created_at")]
    #[schema(value_type = String, format = "date-time")]
    pub created_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "1002")]
    #[validate(name = "shipping.ShippingFullResponse.updated_at")]
    #[schema(value_type = String, format = "date-time")]
    pub updated_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "1003")]
    #[validate(name = "shipping.ShippingFullResponse.discarded_at")]
    #[schema(value_type = String, format = "date-time")]
    pub discarded_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateShippingResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.CreateShippingResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.CreateShippingResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "shipping.CreateShippingResponse.data")]
    pub data: ::core::option::Option<
        create_shipping_response::CreateShippingResponseData,
    >,
}
/// Nested message and enum types in `CreateShippingResponse`.
pub mod create_shipping_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CreateShippingResponseData {
        #[prost(string, tag = "1")]
        #[validate(
            name = "shipping.CreateShippingResponse.CreateShippingResponseData.id"
        )]
        pub id: ::prost::alloc::string::String,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShippingByIdResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.GetShippingByIdResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.GetShippingByIdResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "shipping.GetShippingByIdResponse.data")]
    pub data: ::core::option::Option<ShippingFullResponse>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListShippingResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.ListShippingResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.ListShippingResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    #[validate(name = "shipping.ListShippingResponse.data")]
    pub data: ::prost::alloc::vec::Vec<Shipping>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateShippingResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.UpdateShippingResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.UpdateShippingResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "shipping.UpdateShippingResponse.data")]
    pub data: ::core::option::Option<
        update_shipping_response::UpdateShippingResponseData,
    >,
}
/// Nested message and enum types in `UpdateShippingResponse`.
pub mod update_shipping_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UpdateShippingResponseData {
        #[prost(string, tag = "1")]
        #[validate(
            name = "shipping.UpdateShippingResponse.UpdateShippingResponseData.id"
        )]
        pub id: ::prost::alloc::string::String,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteShippingResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.DeleteShippingResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.DeleteShippingResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "shipping.DeleteShippingResponse.data")]
    pub data: ::core::option::Option<
        delete_shipping_response::DeleteShippingResponseData,
    >,
}
/// Nested message and enum types in `DeleteShippingResponse`.
pub mod delete_shipping_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DeleteShippingResponseData {
        #[prost(string, tag = "1")]
        #[validate(
            name = "shipping.DeleteShippingResponse.DeleteShippingResponseData.id"
        )]
        pub id: ::prost::alloc::string::String,
    }
}
/// SHIPPING PROVIDER PROTO DEFINITION
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShippingProviderByIdResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.GetShippingProviderByIdResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.GetShippingProviderByIdResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "shipping.GetShippingProviderByIdResponse.data")]
    pub data: ::core::option::Option<ShippingProvider>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListShippingProvidersResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "shipping.ListShippingProvidersResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "shipping.ListShippingProvidersResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "shipping.ListShippingProvidersResponse.data")]
    pub data: ::core::option::Option<
        list_shipping_providers_response::ListShippingProvidersResponseData,
    >,
}
/// Nested message and enum types in `ListShippingProvidersResponse`.
pub mod list_shipping_providers_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct ListShippingProvidersResponseData {
        #[prost(message, repeated, tag = "1")]
        #[validate(
            name = "shipping.ListShippingProvidersResponse.ListShippingProvidersResponseData.shipping_providers"
        )]
        pub shipping_providers: ::prost::alloc::vec::Vec<super::ShippingProvider>,
        #[prost(uint32, tag = "2")]
        #[validate(
            name = "shipping.ListShippingProvidersResponse.ListShippingProvidersResponseData.total_count"
        )]
        pub total_count: u32,
        #[prost(uint32, tag = "3")]
        #[validate(
            name = "shipping.ListShippingProvidersResponse.ListShippingProvidersResponseData.page"
        )]
        pub page: u32,
        #[prost(uint32, tag = "4")]
        #[validate(
            name = "shipping.ListShippingProvidersResponse.ListShippingProvidersResponseData.limit"
        )]
        pub limit: u32,
    }
}
/// Generated client implementations.
pub mod shipping_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ShippingServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ShippingServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ShippingServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ShippingServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ShippingServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn create_shipping(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateShippingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateShippingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/shipping.ShippingService/CreateShipping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("shipping.ShippingService", "CreateShipping"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_shipping_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::GetShippingByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetShippingByIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/shipping.ShippingService/GetShippingById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("shipping.ShippingService", "GetShippingById"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_shipping(
            &mut self,
            request: impl tonic::IntoRequest<super::ListShippingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListShippingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/shipping.ShippingService/ListShipping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("shipping.ShippingService", "ListShipping"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_shipping(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateShippingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateShippingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/shipping.ShippingService/UpdateShipping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("shipping.ShippingService", "UpdateShipping"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_shipping(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteShippingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteShippingResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/shipping.ShippingService/DeleteShipping",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("shipping.ShippingService", "DeleteShipping"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod shipping_provider_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ShippingProviderServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ShippingProviderServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ShippingProviderServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ShippingProviderServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ShippingProviderServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_shipping_provider_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::GetShippingProviderByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetShippingProviderByIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/shipping.ShippingProviderService/GetShippingProviderById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "shipping.ShippingProviderService",
                        "GetShippingProviderById",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn list_shipping_providers(
            &mut self,
            request: impl tonic::IntoRequest<super::ListShippingProvidersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListShippingProvidersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/shipping.ShippingProviderService/ListShippingProviders",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "shipping.ShippingProviderService",
                        "ListShippingProviders",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod shipping_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ShippingServiceServer.
    #[async_trait]
    pub trait ShippingService: std::marker::Send + std::marker::Sync + 'static {
        async fn create_shipping(
            &self,
            request: tonic::Request<super::CreateShippingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreateShippingResponse>,
            tonic::Status,
        >;
        async fn get_shipping_by_id(
            &self,
            request: tonic::Request<super::GetShippingByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetShippingByIdResponse>,
            tonic::Status,
        >;
        async fn list_shipping(
            &self,
            request: tonic::Request<super::ListShippingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListShippingResponse>,
            tonic::Status,
        >;
        async fn update_shipping(
            &self,
            request: tonic::Request<super::UpdateShippingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateShippingResponse>,
            tonic::Status,
        >;
        async fn delete_shipping(
            &self,
            request: tonic::Request<super::DeleteShippingRequest>,
        ) -> std::result::Result<
            tonic::Response<super::DeleteShippingResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ShippingServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ShippingServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ShippingServiceServer<T>
    where
        T: ShippingService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/shipping.ShippingService/CreateShipping" => {
                    #[allow(non_camel_case_types)]
                    struct CreateShippingSvc<T: ShippingService>(pub Arc<T>);
                    impl<
                        T: ShippingService,
                    > tonic::server::UnaryService<super::CreateShippingRequest>
                    for CreateShippingSvc<T> {
                        type Response = super::CreateShippingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateShippingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ShippingService>::create_shipping(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateShippingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/shipping.ShippingService/GetShippingById" => {
                    #[allow(non_camel_case_types)]
                    struct GetShippingByIdSvc<T: ShippingService>(pub Arc<T>);
                    impl<
                        T: ShippingService,
                    > tonic::server::UnaryService<super::GetShippingByIdRequest>
                    for GetShippingByIdSvc<T> {
                        type Response = super::GetShippingByIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetShippingByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ShippingService>::get_shipping_by_id(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetShippingByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/shipping.ShippingService/ListShipping" => {
                    #[allow(non_camel_case_types)]
                    struct ListShippingSvc<T: ShippingService>(pub Arc<T>);
                    impl<
                        T: ShippingService,
                    > tonic::server::UnaryService<super::ListShippingRequest>
                    for ListShippingSvc<T> {
                        type Response = super::ListShippingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListShippingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ShippingService>::list_shipping(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListShippingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/shipping.ShippingService/UpdateShipping" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateShippingSvc<T: ShippingService>(pub Arc<T>);
                    impl<
                        T: ShippingService,
                    > tonic::server::UnaryService<super::UpdateShippingRequest>
                    for UpdateShippingSvc<T> {
                        type Response = super::UpdateShippingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateShippingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ShippingService>::update_shipping(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateShippingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/shipping.ShippingService/DeleteShipping" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteShippingSvc<T: ShippingService>(pub Arc<T>);
                    impl<
                        T: ShippingService,
                    > tonic::server::UnaryService<super::DeleteShippingRequest>
                    for DeleteShippingSvc<T> {
                        type Response = super::DeleteShippingResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteShippingRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ShippingService>::delete_shipping(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteShippingSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ShippingServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "shipping.ShippingService";
    impl<T> tonic::server::NamedService for ShippingServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod shipping_provider_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ShippingProviderServiceServer.
    #[async_trait]
    pub trait ShippingProviderService: std::marker::Send + std::marker::Sync + 'static {
        async fn get_shipping_provider_by_id(
            &self,
            request: tonic::Request<super::GetShippingProviderByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetShippingProviderByIdResponse>,
            tonic::Status,
        >;
        async fn list_shipping_providers(
            &self,
            request: tonic::Request<super::ListShippingProvidersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListShippingProvidersResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct ShippingProviderServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ShippingProviderServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for ShippingProviderServiceServer<T>
    where
        T: ShippingProviderService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/shipping.ShippingProviderService/GetShippingProviderById" => {
                    #[allow(non_camel_case_types)]
                    struct GetShippingProviderByIdSvc<T: ShippingProviderService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ShippingProviderService,
                    > tonic::server::UnaryService<super::GetShippingProviderByIdRequest>
                    for GetShippingProviderByIdSvc<T> {
                        type Response = super::GetShippingProviderByIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetShippingProviderByIdRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ShippingProviderService>::get_shipping_provider_by_id(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetShippingProviderByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/shipping.ShippingProviderService/ListShippingProviders" => {
                    #[allow(non_camel_case_types)]
                    struct ListShippingProvidersSvc<T: ShippingProviderService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ShippingProviderService,
                    > tonic::server::UnaryService<super::ListShippingProvidersRequest>
                    for ListShippingProvidersSvc<T> {
                        type Response = super::ListShippingProvidersResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListShippingProvidersRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ShippingProviderService>::list_shipping_providers(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListShippingProvidersSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ShippingProviderServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "shipping.ShippingProviderService";
    impl<T> tonic::server::NamedService for ShippingProviderServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
