// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/shipping/response.proto

package shipping

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShippingProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShippingProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShippingProviderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateShippingProviderResponseMultiError, or nil if none found.
func (m *CreateShippingProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateShippingProviderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateShippingProviderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateShippingProviderResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateShippingProviderResponseMultiError(errors)
	}

	return nil
}

// CreateShippingProviderResponseMultiError is an error wrapping multiple
// validation errors returned by CreateShippingProviderResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateShippingProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingProviderResponseMultiError) AllErrors() []error { return m }

// CreateShippingProviderResponseValidationError is the validation error
// returned by CreateShippingProviderResponse.Validate if the designated
// constraints aren't met.
type CreateShippingProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingProviderResponseValidationError) ErrorName() string {
	return "CreateShippingProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingProviderResponseValidationError{}

// Validate checks the field values on GetShippingProviderByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetShippingProviderByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetShippingProviderByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetShippingProviderByIdResponseMultiError, or nil if none found.
func (m *GetShippingProviderByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetShippingProviderByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetShippingProviderByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetShippingProviderByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetShippingProviderByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetShippingProviderByIdResponseMultiError(errors)
	}

	return nil
}

// GetShippingProviderByIdResponseMultiError is an error wrapping multiple
// validation errors returned by GetShippingProviderByIdResponse.ValidateAll()
// if the designated constraints aren't met.
type GetShippingProviderByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetShippingProviderByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetShippingProviderByIdResponseMultiError) AllErrors() []error { return m }

// GetShippingProviderByIdResponseValidationError is the validation error
// returned by GetShippingProviderByIdResponse.Validate if the designated
// constraints aren't met.
type GetShippingProviderByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetShippingProviderByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetShippingProviderByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetShippingProviderByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetShippingProviderByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetShippingProviderByIdResponseValidationError) ErrorName() string {
	return "GetShippingProviderByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetShippingProviderByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetShippingProviderByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetShippingProviderByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetShippingProviderByIdResponseValidationError{}

// Validate checks the field values on UpdateShippingProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateShippingProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateShippingProviderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateShippingProviderResponseMultiError, or nil if none found.
func (m *UpdateShippingProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateShippingProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateShippingProviderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateShippingProviderResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateShippingProviderResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateShippingProviderResponseMultiError(errors)
	}

	return nil
}

// UpdateShippingProviderResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateShippingProviderResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateShippingProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateShippingProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateShippingProviderResponseMultiError) AllErrors() []error { return m }

// UpdateShippingProviderResponseValidationError is the validation error
// returned by UpdateShippingProviderResponse.Validate if the designated
// constraints aren't met.
type UpdateShippingProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateShippingProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateShippingProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateShippingProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateShippingProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateShippingProviderResponseValidationError) ErrorName() string {
	return "UpdateShippingProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateShippingProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateShippingProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateShippingProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateShippingProviderResponseValidationError{}

// Validate checks the field values on DeleteShippingProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteShippingProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteShippingProviderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteShippingProviderResponseMultiError, or nil if none found.
func (m *DeleteShippingProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteShippingProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteShippingProviderResponseMultiError(errors)
	}

	return nil
}

// DeleteShippingProviderResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteShippingProviderResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteShippingProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteShippingProviderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteShippingProviderResponseMultiError) AllErrors() []error { return m }

// DeleteShippingProviderResponseValidationError is the validation error
// returned by DeleteShippingProviderResponse.Validate if the designated
// constraints aren't met.
type DeleteShippingProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShippingProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShippingProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShippingProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShippingProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShippingProviderResponseValidationError) ErrorName() string {
	return "DeleteShippingProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShippingProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShippingProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShippingProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShippingProviderResponseValidationError{}

// Validate checks the field values on ListShippingProvidersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShippingProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListShippingProvidersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListShippingProvidersResponseMultiError, or nil if none found.
func (m *ListShippingProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShippingProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListShippingProvidersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListShippingProvidersResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListShippingProvidersResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListShippingProvidersResponseMultiError(errors)
	}

	return nil
}

// ListShippingProvidersResponseMultiError is an error wrapping multiple
// validation errors returned by ListShippingProvidersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListShippingProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShippingProvidersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShippingProvidersResponseMultiError) AllErrors() []error { return m }

// ListShippingProvidersResponseValidationError is the validation error
// returned by ListShippingProvidersResponse.Validate if the designated
// constraints aren't met.
type ListShippingProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShippingProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShippingProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShippingProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShippingProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShippingProvidersResponseValidationError) ErrorName() string {
	return "ListShippingProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListShippingProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShippingProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShippingProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShippingProvidersResponseValidationError{}

// Validate checks the field values on
// ListShippingProvidersResponse_ListShippingProvidersResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListShippingProvidersResponse_ListShippingProvidersResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// ListShippingProvidersResponse_ListShippingProvidersResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListShippingProvidersResponse_ListShippingProvidersResponseDataMultiError,
// or nil if none found.
func (m *ListShippingProvidersResponse_ListShippingProvidersResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *ListShippingProvidersResponse_ListShippingProvidersResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetShippingProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError{
						field:  fmt.Sprintf("ShippingProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError{
						field:  fmt.Sprintf("ShippingProviders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError{
					field:  fmt.Sprintf("ShippingProviders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListShippingProvidersResponse_ListShippingProvidersResponseDataMultiError(errors)
	}

	return nil
}

// ListShippingProvidersResponse_ListShippingProvidersResponseDataMultiError is
// an error wrapping multiple validation errors returned by
// ListShippingProvidersResponse_ListShippingProvidersResponseData.ValidateAll()
// if the designated constraints aren't met.
type ListShippingProvidersResponse_ListShippingProvidersResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListShippingProvidersResponse_ListShippingProvidersResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListShippingProvidersResponse_ListShippingProvidersResponseDataMultiError) AllErrors() []error {
	return m
}

// ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError
// is the validation error returned by
// ListShippingProvidersResponse_ListShippingProvidersResponseData.Validate if
// the designated constraints aren't met.
type ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError) ErrorName() string {
	return "ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShippingProvidersResponse_ListShippingProvidersResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShippingProvidersResponse_ListShippingProvidersResponseDataValidationError{}
