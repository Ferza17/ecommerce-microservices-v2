// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/event/service.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventStoreService_StoreEvent_FullMethodName     = "/event.EventStoreService/StoreEvent"
	EventStoreService_StoreEvents_FullMethodName    = "/event.EventStoreService/StoreEvents"
	EventStoreService_GetEventStream_FullMethodName = "/event.EventStoreService/GetEventStream"
	EventStoreService_StreamEvents_FullMethodName   = "/event.EventStoreService/StreamEvents"
)

// EventStoreServiceClient is the client API for EventStoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definitions
type EventStoreServiceClient interface {
	// Store a single event
	StoreEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*StoreEventResponse, error)
	// Store multiple events atomically
	StoreEvents(ctx context.Context, in *StoreEventsRequest, opts ...grpc.CallOption) (*StoreEventResponse, error)
	// Get events by aggregate
	GetEventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (*EventStreamResponse, error)
	// Stream events in real-time
	StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
}

type eventStoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreServiceClient(cc grpc.ClientConnInterface) EventStoreServiceClient {
	return &eventStoreServiceClient{cc}
}

func (c *eventStoreServiceClient) StoreEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*StoreEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreEventResponse)
	err := c.cc.Invoke(ctx, EventStoreService_StoreEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreServiceClient) StoreEvents(ctx context.Context, in *StoreEventsRequest, opts ...grpc.CallOption) (*StoreEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreEventResponse)
	err := c.cc.Invoke(ctx, EventStoreService_StoreEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreServiceClient) GetEventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (*EventStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventStreamResponse)
	err := c.cc.Invoke(ctx, EventStoreService_GetEventStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreServiceClient) StreamEvents(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventStoreService_ServiceDesc.Streams[0], EventStoreService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventStreamRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventStoreService_StreamEventsClient = grpc.ServerStreamingClient[Event]

// EventStoreServiceServer is the server API for EventStoreService service.
// All implementations should embed UnimplementedEventStoreServiceServer
// for forward compatibility.
//
// Service definitions
type EventStoreServiceServer interface {
	// Store a single event
	StoreEvent(context.Context, *Event) (*StoreEventResponse, error)
	// Store multiple events atomically
	StoreEvents(context.Context, *StoreEventsRequest) (*StoreEventResponse, error)
	// Get events by aggregate
	GetEventStream(context.Context, *EventStreamRequest) (*EventStreamResponse, error)
	// Stream events in real-time
	StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[Event]) error
}

// UnimplementedEventStoreServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventStoreServiceServer struct{}

func (UnimplementedEventStoreServiceServer) StoreEvent(context.Context, *Event) (*StoreEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreEvent not implemented")
}
func (UnimplementedEventStoreServiceServer) StoreEvents(context.Context, *StoreEventsRequest) (*StoreEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreEvents not implemented")
}
func (UnimplementedEventStoreServiceServer) GetEventStream(context.Context, *EventStreamRequest) (*EventStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventStream not implemented")
}
func (UnimplementedEventStoreServiceServer) StreamEvents(*EventStreamRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedEventStoreServiceServer) testEmbeddedByValue() {}

// UnsafeEventStoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServiceServer will
// result in compilation errors.
type UnsafeEventStoreServiceServer interface {
	mustEmbedUnimplementedEventStoreServiceServer()
}

func RegisterEventStoreServiceServer(s grpc.ServiceRegistrar, srv EventStoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedEventStoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventStoreService_ServiceDesc, srv)
}

func _EventStoreService_StoreEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServiceServer).StoreEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStoreService_StoreEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServiceServer).StoreEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStoreService_StoreEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServiceServer).StoreEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStoreService_StoreEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServiceServer).StoreEvents(ctx, req.(*StoreEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStoreService_GetEventStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServiceServer).GetEventStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStoreService_GetEventStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServiceServer).GetEventStream(ctx, req.(*EventStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStoreService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServiceServer).StreamEvents(m, &grpc.GenericServerStream[EventStreamRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventStoreService_StreamEventsServer = grpc.ServerStreamingServer[Event]

// EventStoreService_ServiceDesc is the grpc.ServiceDesc for EventStoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventStoreService",
	HandlerType: (*EventStoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreEvent",
			Handler:    _EventStoreService_StoreEvent_Handler,
		},
		{
			MethodName: "StoreEvents",
			Handler:    _EventStoreService_StoreEvents_Handler,
		},
		{
			MethodName: "GetEventStream",
			Handler:    _EventStoreService_GetEventStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventStoreService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/event/service.proto",
}

const (
	SagaEventService_StoreSagaEvent_FullMethodName         = "/event.SagaEventService/StoreSagaEvent"
	SagaEventService_StoreCompensationEvent_FullMethodName = "/event.SagaEventService/StoreCompensationEvent"
	SagaEventService_GetSagaEvents_FullMethodName          = "/event.SagaEventService/GetSagaEvents"
	SagaEventService_StreamSagaEvents_FullMethodName       = "/event.SagaEventService/StreamSagaEvents"
	SagaEventService_GetCompensationEvents_FullMethodName  = "/event.SagaEventService/GetCompensationEvents"
)

// SagaEventServiceClient is the client API for SagaEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SagaEventServiceClient interface {
	// Store saga event
	StoreSagaEvent(ctx context.Context, in *SagaEvent, opts ...grpc.CallOption) (*StoreSagaEventResponse, error)
	// Store compensation event
	StoreCompensationEvent(ctx context.Context, in *CompensationEvent, opts ...grpc.CallOption) (*StoreCompensationEventResponse, error)
	// Get saga events
	GetSagaEvents(ctx context.Context, in *SagaStreamRequest, opts ...grpc.CallOption) (*SagaStreamResponse, error)
	// Stream saga events
	StreamSagaEvents(ctx context.Context, in *SagaStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SagaEvent], error)
	// Get compensation events for a saga
	GetCompensationEvents(ctx context.Context, in *GetCompensationEventsRequest, opts ...grpc.CallOption) (*GetCompensationEventsResponse, error)
}

type sagaEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSagaEventServiceClient(cc grpc.ClientConnInterface) SagaEventServiceClient {
	return &sagaEventServiceClient{cc}
}

func (c *sagaEventServiceClient) StoreSagaEvent(ctx context.Context, in *SagaEvent, opts ...grpc.CallOption) (*StoreSagaEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreSagaEventResponse)
	err := c.cc.Invoke(ctx, SagaEventService_StoreSagaEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaEventServiceClient) StoreCompensationEvent(ctx context.Context, in *CompensationEvent, opts ...grpc.CallOption) (*StoreCompensationEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreCompensationEventResponse)
	err := c.cc.Invoke(ctx, SagaEventService_StoreCompensationEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaEventServiceClient) GetSagaEvents(ctx context.Context, in *SagaStreamRequest, opts ...grpc.CallOption) (*SagaStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SagaStreamResponse)
	err := c.cc.Invoke(ctx, SagaEventService_GetSagaEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaEventServiceClient) StreamSagaEvents(ctx context.Context, in *SagaStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SagaEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SagaEventService_ServiceDesc.Streams[0], SagaEventService_StreamSagaEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SagaStreamRequest, SagaEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SagaEventService_StreamSagaEventsClient = grpc.ServerStreamingClient[SagaEvent]

func (c *sagaEventServiceClient) GetCompensationEvents(ctx context.Context, in *GetCompensationEventsRequest, opts ...grpc.CallOption) (*GetCompensationEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompensationEventsResponse)
	err := c.cc.Invoke(ctx, SagaEventService_GetCompensationEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SagaEventServiceServer is the server API for SagaEventService service.
// All implementations should embed UnimplementedSagaEventServiceServer
// for forward compatibility.
type SagaEventServiceServer interface {
	// Store saga event
	StoreSagaEvent(context.Context, *SagaEvent) (*StoreSagaEventResponse, error)
	// Store compensation event
	StoreCompensationEvent(context.Context, *CompensationEvent) (*StoreCompensationEventResponse, error)
	// Get saga events
	GetSagaEvents(context.Context, *SagaStreamRequest) (*SagaStreamResponse, error)
	// Stream saga events
	StreamSagaEvents(*SagaStreamRequest, grpc.ServerStreamingServer[SagaEvent]) error
	// Get compensation events for a saga
	GetCompensationEvents(context.Context, *GetCompensationEventsRequest) (*GetCompensationEventsResponse, error)
}

// UnimplementedSagaEventServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSagaEventServiceServer struct{}

func (UnimplementedSagaEventServiceServer) StoreSagaEvent(context.Context, *SagaEvent) (*StoreSagaEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreSagaEvent not implemented")
}
func (UnimplementedSagaEventServiceServer) StoreCompensationEvent(context.Context, *CompensationEvent) (*StoreCompensationEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreCompensationEvent not implemented")
}
func (UnimplementedSagaEventServiceServer) GetSagaEvents(context.Context, *SagaStreamRequest) (*SagaStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSagaEvents not implemented")
}
func (UnimplementedSagaEventServiceServer) StreamSagaEvents(*SagaStreamRequest, grpc.ServerStreamingServer[SagaEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSagaEvents not implemented")
}
func (UnimplementedSagaEventServiceServer) GetCompensationEvents(context.Context, *GetCompensationEventsRequest) (*GetCompensationEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompensationEvents not implemented")
}
func (UnimplementedSagaEventServiceServer) testEmbeddedByValue() {}

// UnsafeSagaEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SagaEventServiceServer will
// result in compilation errors.
type UnsafeSagaEventServiceServer interface {
	mustEmbedUnimplementedSagaEventServiceServer()
}

func RegisterSagaEventServiceServer(s grpc.ServiceRegistrar, srv SagaEventServiceServer) {
	// If the following call pancis, it indicates UnimplementedSagaEventServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SagaEventService_ServiceDesc, srv)
}

func _SagaEventService_StoreSagaEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SagaEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaEventServiceServer).StoreSagaEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaEventService_StoreSagaEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaEventServiceServer).StoreSagaEvent(ctx, req.(*SagaEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaEventService_StoreCompensationEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompensationEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaEventServiceServer).StoreCompensationEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaEventService_StoreCompensationEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaEventServiceServer).StoreCompensationEvent(ctx, req.(*CompensationEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaEventService_GetSagaEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SagaStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaEventServiceServer).GetSagaEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaEventService_GetSagaEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaEventServiceServer).GetSagaEvents(ctx, req.(*SagaStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaEventService_StreamSagaEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SagaStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SagaEventServiceServer).StreamSagaEvents(m, &grpc.GenericServerStream[SagaStreamRequest, SagaEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SagaEventService_StreamSagaEventsServer = grpc.ServerStreamingServer[SagaEvent]

func _SagaEventService_GetCompensationEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompensationEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaEventServiceServer).GetCompensationEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SagaEventService_GetCompensationEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaEventServiceServer).GetCompensationEvents(ctx, req.(*GetCompensationEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SagaEventService_ServiceDesc is the grpc.ServiceDesc for SagaEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SagaEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.SagaEventService",
	HandlerType: (*SagaEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreSagaEvent",
			Handler:    _SagaEventService_StoreSagaEvent_Handler,
		},
		{
			MethodName: "StoreCompensationEvent",
			Handler:    _SagaEventService_StoreCompensationEvent_Handler,
		},
		{
			MethodName: "GetSagaEvents",
			Handler:    _SagaEventService_GetSagaEvents_Handler,
		},
		{
			MethodName: "GetCompensationEvents",
			Handler:    _SagaEventService_GetCompensationEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSagaEvents",
			Handler:       _SagaEventService_StreamSagaEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/event/service.proto",
}
