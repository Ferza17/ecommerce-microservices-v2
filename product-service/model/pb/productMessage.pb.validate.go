// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: productMessage.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Product) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Product with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProductMultiError, or nil if none found.
func (m *Product) ValidateAll() error {
	return m.validate(true)
}

func (m *Product) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Uom

	// no validation rules for Image

	// no validation rules for Price

	// no validation rules for Stock

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscardedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "DiscardedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProductValidationError{
					field:  "DiscardedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscardedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProductValidationError{
				field:  "DiscardedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProductMultiError(errors)
	}

	return nil
}

// ProductMultiError is an error wrapping multiple validation errors returned
// by Product.ValidateAll() if the designated constraints aren't met.
type ProductMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductMultiError) AllErrors() []error { return m }

// ProductValidationError is the validation error returned by Product.Validate
// if the designated constraints aren't met.
type ProductValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductValidationError) ErrorName() string { return "ProductValidationError" }

// Error satisfies the builtin error interface
func (e ProductValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProduct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductValidationError{}

// Validate checks the field values on FindProductsWithPaginationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindProductsWithPaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProductsWithPaginationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindProductsWithPaginationRequestMultiError, or nil if none found.
func (m *FindProductsWithPaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProductsWithPaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := FindProductsWithPaginationRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := FindProductsWithPaginationRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindProductsWithPaginationRequestMultiError(errors)
	}

	return nil
}

// FindProductsWithPaginationRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindProductsWithPaginationRequest.ValidateAll() if the designated
// constraints aren't met.
type FindProductsWithPaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProductsWithPaginationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProductsWithPaginationRequestMultiError) AllErrors() []error { return m }

// FindProductsWithPaginationRequestValidationError is the validation error
// returned by FindProductsWithPaginationRequest.Validate if the designated
// constraints aren't met.
type FindProductsWithPaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProductsWithPaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProductsWithPaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProductsWithPaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProductsWithPaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProductsWithPaginationRequestValidationError) ErrorName() string {
	return "FindProductsWithPaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindProductsWithPaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProductsWithPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProductsWithPaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProductsWithPaginationRequestValidationError{}

// Validate checks the field values on FindProductsWithPaginationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindProductsWithPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProductsWithPaginationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindProductsWithPaginationResponseMultiError, or nil if none found.
func (m *FindProductsWithPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProductsWithPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetProducts()))
		i := 0
		for key := range m.GetProducts() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetProducts()[key]
			_ = val

			// no validation rules for Products[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, FindProductsWithPaginationResponseValidationError{
							field:  fmt.Sprintf("Products[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, FindProductsWithPaginationResponseValidationError{
							field:  fmt.Sprintf("Products[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return FindProductsWithPaginationResponseValidationError{
						field:  fmt.Sprintf("Products[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	// no validation rules for Limit

	// no validation rules for Page

	if len(errors) > 0 {
		return FindProductsWithPaginationResponseMultiError(errors)
	}

	return nil
}

// FindProductsWithPaginationResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindProductsWithPaginationResponse.ValidateAll() if the designated
// constraints aren't met.
type FindProductsWithPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProductsWithPaginationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProductsWithPaginationResponseMultiError) AllErrors() []error { return m }

// FindProductsWithPaginationResponseValidationError is the validation error
// returned by FindProductsWithPaginationResponse.Validate if the designated
// constraints aren't met.
type FindProductsWithPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProductsWithPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProductsWithPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProductsWithPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProductsWithPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProductsWithPaginationResponseValidationError) ErrorName() string {
	return "FindProductsWithPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindProductsWithPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProductsWithPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProductsWithPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProductsWithPaginationResponseValidationError{}

// Validate checks the field values on FindProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindProductByIdRequestMultiError, or nil if none found.
func (m *FindProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

	}

	if len(errors) > 0 {
		return FindProductByIdRequestMultiError(errors)
	}

	return nil
}

// FindProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProductByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProductByIdRequestMultiError) AllErrors() []error { return m }

// FindProductByIdRequestValidationError is the validation error returned by
// FindProductByIdRequest.Validate if the designated constraints aren't met.
type FindProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProductByIdRequestValidationError) ErrorName() string {
	return "FindProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProductByIdRequestValidationError{}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetName() != "" {

	}

	if m.GetDescription() != "" {

	}

	if m.GetUom() != "" {

	}

	if m.GetImage() != "" {

	}

	if m.GetPrice() <= 0 {
		err := CreateProductRequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStock() <= 0 {
		err := CreateProductRequestValidationError{
			field:  "Stock",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductResponseMultiError, or nil if none found.
func (m *CreateProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateProductResponseMultiError(errors)
	}

	return nil
}

// CreateProductResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProductResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductResponseMultiError) AllErrors() []error { return m }

// CreateProductResponseValidationError is the validation error returned by
// CreateProductResponse.Validate if the designated constraints aren't met.
type CreateProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductResponseValidationError) ErrorName() string {
	return "CreateProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductResponseValidationError{}

// Validate checks the field values on UpdateProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductByIdRequestMultiError, or nil if none found.
func (m *UpdateProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

	}

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Uom != nil {
		// no validation rules for Uom
	}

	if m.Image != nil {
		// no validation rules for Image
	}

	if m.Price != nil {
		// no validation rules for Price
	}

	if m.Stock != nil {
		// no validation rules for Stock
	}

	if len(errors) > 0 {
		return UpdateProductByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductByIdRequestMultiError) AllErrors() []error { return m }

// UpdateProductByIdRequestValidationError is the validation error returned by
// UpdateProductByIdRequest.Validate if the designated constraints aren't met.
type UpdateProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductByIdRequestValidationError) ErrorName() string {
	return "UpdateProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductByIdRequestValidationError{}

// Validate checks the field values on DeleteProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIdRequestMultiError, or nil if none found.
func (m *DeleteProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() != "" {

	}

	if len(errors) > 0 {
		return DeleteProductByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIdRequestMultiError) AllErrors() []error { return m }

// DeleteProductByIdRequestValidationError is the validation error returned by
// DeleteProductByIdRequest.Validate if the designated constraints aren't met.
type DeleteProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIdRequestValidationError) ErrorName() string {
	return "DeleteProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIdRequestValidationError{}

// Validate checks the field values on DeleteProductByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIdResponseMultiError, or nil if none found.
func (m *DeleteProductByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteProductByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteProductByIdResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIdResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteProductByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIdResponseMultiError) AllErrors() []error { return m }

// DeleteProductByIdResponseValidationError is the validation error returned by
// DeleteProductByIdResponse.Validate if the designated constraints aren't met.
type DeleteProductByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIdResponseValidationError) ErrorName() string {
	return "DeleteProductByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIdResponseValidationError{}
