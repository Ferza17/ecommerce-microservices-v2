// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: commerce/v1/cartServices.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	CreateCartItem(ctx context.Context, in *CreateCartItemRequest, opts ...grpc.CallOption) (*CreateCartItemResponse, error)
	FindCartItemById(ctx context.Context, in *FindCartItemByIdRequest, opts ...grpc.CallOption) (*CartItem, error)
	FindCartItemsWithPagination(ctx context.Context, in *FindCartItemsWithPaginationRequest, opts ...grpc.CallOption) (*FindCartItemsWithPaginationResponse, error)
	UpdateCartItemById(ctx context.Context, in *UpdateCartItemByIdRequest, opts ...grpc.CallOption) (*UpdateCartItemByIdResponse, error)
	DeleteCartItemById(ctx context.Context, in *DeleteCartItemByIdRequest, opts ...grpc.CallOption) (*DeleteCartItemByIdResponse, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) CreateCartItem(ctx context.Context, in *CreateCartItemRequest, opts ...grpc.CallOption) (*CreateCartItemResponse, error) {
	out := new(CreateCartItemResponse)
	err := c.cc.Invoke(ctx, "/pb.CartService/CreateCartItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) FindCartItemById(ctx context.Context, in *FindCartItemByIdRequest, opts ...grpc.CallOption) (*CartItem, error) {
	out := new(CartItem)
	err := c.cc.Invoke(ctx, "/pb.CartService/FindCartItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) FindCartItemsWithPagination(ctx context.Context, in *FindCartItemsWithPaginationRequest, opts ...grpc.CallOption) (*FindCartItemsWithPaginationResponse, error) {
	out := new(FindCartItemsWithPaginationResponse)
	err := c.cc.Invoke(ctx, "/pb.CartService/FindCartItemsWithPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) UpdateCartItemById(ctx context.Context, in *UpdateCartItemByIdRequest, opts ...grpc.CallOption) (*UpdateCartItemByIdResponse, error) {
	out := new(UpdateCartItemByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CartService/UpdateCartItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DeleteCartItemById(ctx context.Context, in *DeleteCartItemByIdRequest, opts ...grpc.CallOption) (*DeleteCartItemByIdResponse, error) {
	out := new(DeleteCartItemByIdResponse)
	err := c.cc.Invoke(ctx, "/pb.CartService/DeleteCartItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations should embed UnimplementedCartServiceServer
// for forward compatibility
type CartServiceServer interface {
	CreateCartItem(context.Context, *CreateCartItemRequest) (*CreateCartItemResponse, error)
	FindCartItemById(context.Context, *FindCartItemByIdRequest) (*CartItem, error)
	FindCartItemsWithPagination(context.Context, *FindCartItemsWithPaginationRequest) (*FindCartItemsWithPaginationResponse, error)
	UpdateCartItemById(context.Context, *UpdateCartItemByIdRequest) (*UpdateCartItemByIdResponse, error)
	DeleteCartItemById(context.Context, *DeleteCartItemByIdRequest) (*DeleteCartItemByIdResponse, error)
}

// UnimplementedCartServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCartServiceServer struct {
}

func (UnimplementedCartServiceServer) CreateCartItem(context.Context, *CreateCartItemRequest) (*CreateCartItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCartItem not implemented")
}
func (UnimplementedCartServiceServer) FindCartItemById(context.Context, *FindCartItemByIdRequest) (*CartItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCartItemById not implemented")
}
func (UnimplementedCartServiceServer) FindCartItemsWithPagination(context.Context, *FindCartItemsWithPaginationRequest) (*FindCartItemsWithPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCartItemsWithPagination not implemented")
}
func (UnimplementedCartServiceServer) UpdateCartItemById(context.Context, *UpdateCartItemByIdRequest) (*UpdateCartItemByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCartItemById not implemented")
}
func (UnimplementedCartServiceServer) DeleteCartItemById(context.Context, *DeleteCartItemByIdRequest) (*DeleteCartItemByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItemById not implemented")
}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_CreateCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CreateCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CartService/CreateCartItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CreateCartItem(ctx, req.(*CreateCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_FindCartItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCartItemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).FindCartItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CartService/FindCartItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).FindCartItemById(ctx, req.(*FindCartItemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_FindCartItemsWithPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCartItemsWithPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).FindCartItemsWithPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CartService/FindCartItemsWithPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).FindCartItemsWithPagination(ctx, req.(*FindCartItemsWithPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_UpdateCartItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartItemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).UpdateCartItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CartService/UpdateCartItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).UpdateCartItemById(ctx, req.(*UpdateCartItemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DeleteCartItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteCartItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CartService/DeleteCartItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteCartItemById(ctx, req.(*DeleteCartItemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCartItem",
			Handler:    _CartService_CreateCartItem_Handler,
		},
		{
			MethodName: "FindCartItemById",
			Handler:    _CartService_FindCartItemById_Handler,
		},
		{
			MethodName: "FindCartItemsWithPagination",
			Handler:    _CartService_FindCartItemsWithPagination_Handler,
		},
		{
			MethodName: "UpdateCartItemById",
			Handler:    _CartService_UpdateCartItemById_Handler,
		},
		{
			MethodName: "DeleteCartItemById",
			Handler:    _CartService_DeleteCartItemById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "commerce/v1/cartServices.proto",
}
