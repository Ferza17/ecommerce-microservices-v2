// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/event/request.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EventStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EventStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EventStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EventStreamRequestMultiError, or nil if none found.
func (m *EventStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EventStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateId

	// no validation rules for AggregateType

	// no validation rules for FromVersion

	// no validation rules for ToVersion

	if all {
		switch v := interface{}(m.GetFromTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventStreamRequestValidationError{
					field:  "FromTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventStreamRequestValidationError{
					field:  "FromTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFromTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventStreamRequestValidationError{
				field:  "FromTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetToTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventStreamRequestValidationError{
					field:  "ToTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventStreamRequestValidationError{
					field:  "ToTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventStreamRequestValidationError{
				field:  "ToTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return EventStreamRequestMultiError(errors)
	}

	return nil
}

// EventStreamRequestMultiError is an error wrapping multiple validation errors
// returned by EventStreamRequest.ValidateAll() if the designated constraints
// aren't met.
type EventStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventStreamRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventStreamRequestMultiError) AllErrors() []error { return m }

// EventStreamRequestValidationError is the validation error returned by
// EventStreamRequest.Validate if the designated constraints aren't met.
type EventStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventStreamRequestValidationError) ErrorName() string {
	return "EventStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EventStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventStreamRequestValidationError{}

// Validate checks the field values on SagaStreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SagaStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SagaStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SagaStreamRequestMultiError, or nil if none found.
func (m *SagaStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SagaStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SagaId

	// no validation rules for SagaType

	if all {
		switch v := interface{}(m.GetFromTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SagaStreamRequestValidationError{
					field:  "FromTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SagaStreamRequestValidationError{
					field:  "FromTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFromTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagaStreamRequestValidationError{
				field:  "FromTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetToTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SagaStreamRequestValidationError{
					field:  "ToTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SagaStreamRequestValidationError{
					field:  "ToTimestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SagaStreamRequestValidationError{
				field:  "ToTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	if len(errors) > 0 {
		return SagaStreamRequestMultiError(errors)
	}

	return nil
}

// SagaStreamRequestMultiError is an error wrapping multiple validation errors
// returned by SagaStreamRequest.ValidateAll() if the designated constraints
// aren't met.
type SagaStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SagaStreamRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SagaStreamRequestMultiError) AllErrors() []error { return m }

// SagaStreamRequestValidationError is the validation error returned by
// SagaStreamRequest.Validate if the designated constraints aren't met.
type SagaStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SagaStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SagaStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SagaStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SagaStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SagaStreamRequestValidationError) ErrorName() string {
	return "SagaStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SagaStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSagaStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SagaStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SagaStreamRequestValidationError{}

// Validate checks the field values on StoreEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StoreEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StoreEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StoreEventsRequestMultiError, or nil if none found.
func (m *StoreEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StoreEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StoreEventsRequestValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StoreEventsRequestValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StoreEventsRequestValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TransactionId

	if len(errors) > 0 {
		return StoreEventsRequestMultiError(errors)
	}

	return nil
}

// StoreEventsRequestMultiError is an error wrapping multiple validation errors
// returned by StoreEventsRequest.ValidateAll() if the designated constraints
// aren't met.
type StoreEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StoreEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StoreEventsRequestMultiError) AllErrors() []error { return m }

// StoreEventsRequestValidationError is the validation error returned by
// StoreEventsRequest.Validate if the designated constraints aren't met.
type StoreEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StoreEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StoreEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StoreEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StoreEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StoreEventsRequestValidationError) ErrorName() string {
	return "StoreEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StoreEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStoreEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StoreEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StoreEventsRequestValidationError{}

// Validate checks the field values on GetCompensationEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCompensationEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCompensationEventsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCompensationEventsRequestMultiError, or nil if none found.
func (m *GetCompensationEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCompensationEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SagaId

	// no validation rules for Status

	if len(errors) > 0 {
		return GetCompensationEventsRequestMultiError(errors)
	}

	return nil
}

// GetCompensationEventsRequestMultiError is an error wrapping multiple
// validation errors returned by GetCompensationEventsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetCompensationEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCompensationEventsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCompensationEventsRequestMultiError) AllErrors() []error { return m }

// GetCompensationEventsRequestValidationError is the validation error returned
// by GetCompensationEventsRequest.Validate if the designated constraints
// aren't met.
type GetCompensationEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompensationEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompensationEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompensationEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompensationEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompensationEventsRequestValidationError) ErrorName() string {
	return "GetCompensationEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompensationEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompensationEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompensationEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompensationEventsRequestValidationError{}
