// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user/response.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthUserRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserRegisterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserRegisterResponseMultiError, or nil if none found.
func (m *AuthUserRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserRegisterResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserRegisterResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserRegisterResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserRegisterResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserRegisterResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserRegisterResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccessControl() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthUserRegisterResponseValidationError{
						field:  fmt.Sprintf("AccessControl[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthUserRegisterResponseValidationError{
						field:  fmt.Sprintf("AccessControl[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthUserRegisterResponseValidationError{
					field:  fmt.Sprintf("AccessControl[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthUserRegisterResponseMultiError(errors)
	}

	return nil
}

// AuthUserRegisterResponseMultiError is an error wrapping multiple validation
// errors returned by AuthUserRegisterResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthUserRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserRegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserRegisterResponseMultiError) AllErrors() []error { return m }

// AuthUserRegisterResponseValidationError is the validation error returned by
// AuthUserRegisterResponse.Validate if the designated constraints aren't met.
type AuthUserRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserRegisterResponseValidationError) ErrorName() string {
	return "AuthUserRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserRegisterResponseValidationError{}

// Validate checks the field values on AuthUserVerifyOtpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserVerifyOtpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserVerifyOtpResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserVerifyOtpResponseMultiError, or nil if none found.
func (m *AuthUserVerifyOtpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserVerifyOtpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AuthUserVerifyOtpResponseMultiError(errors)
	}

	return nil
}

// AuthUserVerifyOtpResponseMultiError is an error wrapping multiple validation
// errors returned by AuthUserVerifyOtpResponse.ValidateAll() if the
// designated constraints aren't met.
type AuthUserVerifyOtpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserVerifyOtpResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserVerifyOtpResponseMultiError) AllErrors() []error { return m }

// AuthUserVerifyOtpResponseValidationError is the validation error returned by
// AuthUserVerifyOtpResponse.Validate if the designated constraints aren't met.
type AuthUserVerifyOtpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserVerifyOtpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserVerifyOtpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserVerifyOtpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserVerifyOtpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserVerifyOtpResponseValidationError) ErrorName() string {
	return "AuthUserVerifyOtpResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserVerifyOtpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserVerifyOtpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserVerifyOtpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserVerifyOtpResponseValidationError{}

// Validate checks the field values on AuthUserLogoutByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserLogoutByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserLogoutByTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthUserLogoutByTokenResponseMultiError, or nil if none found.
func (m *AuthUserLogoutByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserLogoutByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	if len(errors) > 0 {
		return AuthUserLogoutByTokenResponseMultiError(errors)
	}

	return nil
}

// AuthUserLogoutByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by AuthUserLogoutByTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type AuthUserLogoutByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserLogoutByTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserLogoutByTokenResponseMultiError) AllErrors() []error { return m }

// AuthUserLogoutByTokenResponseValidationError is the validation error
// returned by AuthUserLogoutByTokenResponse.Validate if the designated
// constraints aren't met.
type AuthUserLogoutByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserLogoutByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserLogoutByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserLogoutByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserLogoutByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserLogoutByTokenResponseValidationError) ErrorName() string {
	return "AuthUserLogoutByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserLogoutByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserLogoutByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserLogoutByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserLogoutByTokenResponseValidationError{}

// Validate checks the field values on AuthUserVerifyAccessControlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthUserVerifyAccessControlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserVerifyAccessControlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuthUserVerifyAccessControlResponseMultiError, or nil if none found.
func (m *AuthUserVerifyAccessControlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserVerifyAccessControlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserVerifyAccessControlResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserVerifyAccessControlResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccessControls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthUserVerifyAccessControlResponseValidationError{
						field:  fmt.Sprintf("AccessControls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthUserVerifyAccessControlResponseValidationError{
						field:  fmt.Sprintf("AccessControls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthUserVerifyAccessControlResponseValidationError{
					field:  fmt.Sprintf("AccessControls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthUserVerifyAccessControlResponseMultiError(errors)
	}

	return nil
}

// AuthUserVerifyAccessControlResponseMultiError is an error wrapping multiple
// validation errors returned by
// AuthUserVerifyAccessControlResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthUserVerifyAccessControlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserVerifyAccessControlResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserVerifyAccessControlResponseMultiError) AllErrors() []error { return m }

// AuthUserVerifyAccessControlResponseValidationError is the validation error
// returned by AuthUserVerifyAccessControlResponse.Validate if the designated
// constraints aren't met.
type AuthUserVerifyAccessControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserVerifyAccessControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserVerifyAccessControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserVerifyAccessControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserVerifyAccessControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserVerifyAccessControlResponseValidationError) ErrorName() string {
	return "AuthUserVerifyAccessControlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserVerifyAccessControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserVerifyAccessControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserVerifyAccessControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserVerifyAccessControlResponseValidationError{}

// Validate checks the field values on AuthUserFindUserByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserFindUserByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserFindUserByTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthUserFindUserByTokenResponseMultiError, or nil if none found.
func (m *AuthUserFindUserByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserFindUserByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserFindUserByTokenResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserFindUserByTokenResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserFindUserByTokenResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserFindUserByTokenResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserFindUserByTokenResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserFindUserByTokenResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccessControls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthUserFindUserByTokenResponseValidationError{
						field:  fmt.Sprintf("AccessControls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthUserFindUserByTokenResponseValidationError{
						field:  fmt.Sprintf("AccessControls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthUserFindUserByTokenResponseValidationError{
					field:  fmt.Sprintf("AccessControls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthUserFindUserByTokenResponseMultiError(errors)
	}

	return nil
}

// AuthUserFindUserByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by AuthUserFindUserByTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type AuthUserFindUserByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserFindUserByTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserFindUserByTokenResponseMultiError) AllErrors() []error { return m }

// AuthUserFindUserByTokenResponseValidationError is the validation error
// returned by AuthUserFindUserByTokenResponse.Validate if the designated
// constraints aren't met.
type AuthUserFindUserByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserFindUserByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserFindUserByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserFindUserByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserFindUserByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserFindUserByTokenResponseValidationError) ErrorName() string {
	return "AuthUserFindUserByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserFindUserByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserFindUserByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserFindUserByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserFindUserByTokenResponseValidationError{}

// Validate checks the field values on UpdateUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserByIdResponseMultiError, or nil if none found.
func (m *UpdateUserByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateUserByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateUserByIdResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIdResponseMultiError) AllErrors() []error { return m }

// UpdateUserByIdResponseValidationError is the validation error returned by
// UpdateUserByIdResponse.Validate if the designated constraints aren't met.
type UpdateUserByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIdResponseValidationError) ErrorName() string {
	return "UpdateUserByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIdResponseValidationError{}
