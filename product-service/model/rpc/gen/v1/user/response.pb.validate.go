// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user/response.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthLogoutByTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthLogoutByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthLogoutByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthLogoutByTokenResponseMultiError, or nil if none found.
func (m *AuthLogoutByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthLogoutByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	if len(errors) > 0 {
		return AuthLogoutByTokenResponseMultiError(errors)
	}

	return nil
}

// AuthLogoutByTokenResponseMultiError is an error wrapping multiple validation
// errors returned by AuthLogoutByTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type AuthLogoutByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthLogoutByTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthLogoutByTokenResponseMultiError) AllErrors() []error { return m }

// AuthLogoutByTokenResponseValidationError is the validation error returned by
// AuthLogoutByTokenResponse.Validate if the designated constraints aren't met.
type AuthLogoutByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthLogoutByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthLogoutByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthLogoutByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthLogoutByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthLogoutByTokenResponseValidationError) ErrorName() string {
	return "AuthLogoutByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthLogoutByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthLogoutByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthLogoutByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthLogoutByTokenResponseValidationError{}

// Validate checks the field values on AuthVerifyOtpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthVerifyOtpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthVerifyOtpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthVerifyOtpResponseMultiError, or nil if none found.
func (m *AuthVerifyOtpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthVerifyOtpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AuthVerifyOtpResponseMultiError(errors)
	}

	return nil
}

// AuthVerifyOtpResponseMultiError is an error wrapping multiple validation
// errors returned by AuthVerifyOtpResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthVerifyOtpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthVerifyOtpResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthVerifyOtpResponseMultiError) AllErrors() []error { return m }

// AuthVerifyOtpResponseValidationError is the validation error returned by
// AuthVerifyOtpResponse.Validate if the designated constraints aren't met.
type AuthVerifyOtpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthVerifyOtpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthVerifyOtpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthVerifyOtpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthVerifyOtpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthVerifyOtpResponseValidationError) ErrorName() string {
	return "AuthVerifyOtpResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthVerifyOtpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthVerifyOtpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthVerifyOtpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthVerifyOtpResponseValidationError{}

// Validate checks the field values on VerifiedAccessControlUserByTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VerifiedAccessControlUserByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// VerifiedAccessControlUserByTokenResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// VerifiedAccessControlUserByTokenResponseMultiError, or nil if none found.
func (m *VerifiedAccessControlUserByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifiedAccessControlUserByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifiedAccessControlUserByTokenResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifiedAccessControlUserByTokenResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifiedAccessControlUserByTokenResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifiedAccessControlUserByTokenResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifiedAccessControlUserByTokenResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifiedAccessControlUserByTokenResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccessControls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VerifiedAccessControlUserByTokenResponseValidationError{
						field:  fmt.Sprintf("AccessControls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VerifiedAccessControlUserByTokenResponseValidationError{
						field:  fmt.Sprintf("AccessControls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VerifiedAccessControlUserByTokenResponseValidationError{
					field:  fmt.Sprintf("AccessControls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VerifiedAccessControlUserByTokenResponseMultiError(errors)
	}

	return nil
}

// VerifiedAccessControlUserByTokenResponseMultiError is an error wrapping
// multiple validation errors returned by
// VerifiedAccessControlUserByTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifiedAccessControlUserByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifiedAccessControlUserByTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifiedAccessControlUserByTokenResponseMultiError) AllErrors() []error { return m }

// VerifiedAccessControlUserByTokenResponseValidationError is the validation
// error returned by VerifiedAccessControlUserByTokenResponse.Validate if the
// designated constraints aren't met.
type VerifiedAccessControlUserByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifiedAccessControlUserByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifiedAccessControlUserByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifiedAccessControlUserByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifiedAccessControlUserByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifiedAccessControlUserByTokenResponseValidationError) ErrorName() string {
	return "VerifiedAccessControlUserByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifiedAccessControlUserByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifiedAccessControlUserByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifiedAccessControlUserByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifiedAccessControlUserByTokenResponseValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on UpdateUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserByIdResponseMultiError, or nil if none found.
func (m *UpdateUserByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateUserByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateUserByIdResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIdResponseMultiError) AllErrors() []error { return m }

// UpdateUserByIdResponseValidationError is the validation error returned by
// UpdateUserByIdResponse.Validate if the designated constraints aren't met.
type UpdateUserByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIdResponseValidationError) ErrorName() string {
	return "UpdateUserByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIdResponseValidationError{}
