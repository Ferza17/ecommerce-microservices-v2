spring:
  application:
    name: commerce-service
    version: 0.0.1

  config.import: "consul:"

  data:
    mongodb:
      uri: mongodb://mongo:1234@localhost:27017/commerce?directConnection=true&replicaSet=rs0
      database: commerce

  kafka:
    bootstrap-servers: localhost:9092
    properties:
      schema.registry.url: http://localhost:8081
    consumer:
      group-id: commerce-service
      auto-offset-reset: earliest
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  cloud:
    consul:
      host: localhost
      port: 8500

      config:
        prefix: config
        default-context: application
        profile-separator: ","

      discovery:
        enabled: true
        instance-id: commerce-service
        serviceName: ${spring.application.name}
        management-port: ${spring.grpc.server.port}
        management-tags:
          - service
          - kafka-subscriber
        healthCheckPath: ${management.server.servlet.context-path}/check
        healthCheckInterval: 15s

  grpc:
    server:
      enabled: true
      host: 0.0.0.0
      port: 50051
      shutdown-grace-period: 15s

      reflection.enabled: true
      observations.enabled: true
      exception-handling.enabled: true
      security.csrf.enabled: false
      servlet.enabled: false

      health:
        actuator:
          enabled: true
          update-overall-health: true
          update-initial-delay: 5s
          update-rate: 5s
      ssl:
        secure: false
        client-auth: none

      netty:
        boss-executor: default
        worker-executor: default

    client:
      channels:
        product:
          address: 127.0.0.1:50055
          negotiation-type: plaintext
        user:
          address: 127.0.0.1:50056
          negotiation-type: plaintext

server:
  port: 40051
  metric:
    port: 30051


otel:
  exporter.jaeger.endpoint: http://localhost:6831
  sdk:
    trace:
      batch:
        schedule_delay_millis: 1000
        max_queue_size: 2048
        max_export_batch_size: 512
        export_timeout_millis: 30000

logging:
  level:
    root: INFO
    com.ferza17.ecommercemicroservicesv2: DEBUG
    io.grpc: DEBUG
    io.grpc.Context: INFO
    io.opentelemetry: DEBUG
