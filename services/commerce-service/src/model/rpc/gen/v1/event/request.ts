// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/event/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Event, Snapshot } from "./model";

export const protobufPackage = "event";

export interface AppendRequest {
  aggregateId: string;
  aggregateType: string;
  /** -1 for new stream */
  expectedVersion: number;
  /** version must be expected_version+1..+n */
  events: Event[];
}

export interface ReadByAggregateRequest {
  aggregateId: string;
  /** default 0 */
  fromVersion: number;
}

export interface ReadByTypeRequest {
  aggregateType: string;
  limit: number;
  /** pagination token */
  afterId: string;
}

export interface SubscribeRequest {
  /** optional, empty = all */
  aggregateType: string;
  /** resume token (optional) */
  fromEventId: string;
}

export interface GetSnapshotRequest {
  aggregateId: string;
}

export interface PutSnapshotRequest {
  snapshot: Snapshot | undefined;
}

function createBaseAppendRequest(): AppendRequest {
  return { aggregateId: "", aggregateType: "", expectedVersion: 0, events: [] };
}

export const AppendRequest: MessageFns<AppendRequest> = {
  encode(message: AppendRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aggregateId !== "") {
      writer.uint32(10).string(message.aggregateId);
    }
    if (message.aggregateType !== "") {
      writer.uint32(18).string(message.aggregateType);
    }
    if (message.expectedVersion !== 0) {
      writer.uint32(24).int64(message.expectedVersion);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppendRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppendRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.aggregateType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expectedVersion = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppendRequest {
    return {
      aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
      aggregateType: isSet(object.aggregateType) ? globalThis.String(object.aggregateType) : "",
      expectedVersion: isSet(object.expectedVersion) ? globalThis.Number(object.expectedVersion) : 0,
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
    };
  },

  toJSON(message: AppendRequest): unknown {
    const obj: any = {};
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    if (message.aggregateType !== "") {
      obj.aggregateType = message.aggregateType;
    }
    if (message.expectedVersion !== 0) {
      obj.expectedVersion = Math.round(message.expectedVersion);
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AppendRequest>): AppendRequest {
    return AppendRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppendRequest>): AppendRequest {
    const message = createBaseAppendRequest();
    message.aggregateId = object.aggregateId ?? "";
    message.aggregateType = object.aggregateType ?? "";
    message.expectedVersion = object.expectedVersion ?? 0;
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReadByAggregateRequest(): ReadByAggregateRequest {
  return { aggregateId: "", fromVersion: 0 };
}

export const ReadByAggregateRequest: MessageFns<ReadByAggregateRequest> = {
  encode(message: ReadByAggregateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aggregateId !== "") {
      writer.uint32(10).string(message.aggregateId);
    }
    if (message.fromVersion !== 0) {
      writer.uint32(16).int64(message.fromVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadByAggregateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadByAggregateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.fromVersion = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadByAggregateRequest {
    return {
      aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
      fromVersion: isSet(object.fromVersion) ? globalThis.Number(object.fromVersion) : 0,
    };
  },

  toJSON(message: ReadByAggregateRequest): unknown {
    const obj: any = {};
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    if (message.fromVersion !== 0) {
      obj.fromVersion = Math.round(message.fromVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<ReadByAggregateRequest>): ReadByAggregateRequest {
    return ReadByAggregateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadByAggregateRequest>): ReadByAggregateRequest {
    const message = createBaseReadByAggregateRequest();
    message.aggregateId = object.aggregateId ?? "";
    message.fromVersion = object.fromVersion ?? 0;
    return message;
  },
};

function createBaseReadByTypeRequest(): ReadByTypeRequest {
  return { aggregateType: "", limit: 0, afterId: "" };
}

export const ReadByTypeRequest: MessageFns<ReadByTypeRequest> = {
  encode(message: ReadByTypeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aggregateType !== "") {
      writer.uint32(10).string(message.aggregateType);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int64(message.limit);
    }
    if (message.afterId !== "") {
      writer.uint32(26).string(message.afterId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadByTypeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadByTypeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aggregateType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.afterId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadByTypeRequest {
    return {
      aggregateType: isSet(object.aggregateType) ? globalThis.String(object.aggregateType) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      afterId: isSet(object.afterId) ? globalThis.String(object.afterId) : "",
    };
  },

  toJSON(message: ReadByTypeRequest): unknown {
    const obj: any = {};
    if (message.aggregateType !== "") {
      obj.aggregateType = message.aggregateType;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.afterId !== "") {
      obj.afterId = message.afterId;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadByTypeRequest>): ReadByTypeRequest {
    return ReadByTypeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadByTypeRequest>): ReadByTypeRequest {
    const message = createBaseReadByTypeRequest();
    message.aggregateType = object.aggregateType ?? "";
    message.limit = object.limit ?? 0;
    message.afterId = object.afterId ?? "";
    return message;
  },
};

function createBaseSubscribeRequest(): SubscribeRequest {
  return { aggregateType: "", fromEventId: "" };
}

export const SubscribeRequest: MessageFns<SubscribeRequest> = {
  encode(message: SubscribeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aggregateType !== "") {
      writer.uint32(10).string(message.aggregateType);
    }
    if (message.fromEventId !== "") {
      writer.uint32(18).string(message.fromEventId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aggregateType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fromEventId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeRequest {
    return {
      aggregateType: isSet(object.aggregateType) ? globalThis.String(object.aggregateType) : "",
      fromEventId: isSet(object.fromEventId) ? globalThis.String(object.fromEventId) : "",
    };
  },

  toJSON(message: SubscribeRequest): unknown {
    const obj: any = {};
    if (message.aggregateType !== "") {
      obj.aggregateType = message.aggregateType;
    }
    if (message.fromEventId !== "") {
      obj.fromEventId = message.fromEventId;
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeRequest>): SubscribeRequest {
    return SubscribeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeRequest>): SubscribeRequest {
    const message = createBaseSubscribeRequest();
    message.aggregateType = object.aggregateType ?? "";
    message.fromEventId = object.fromEventId ?? "";
    return message;
  },
};

function createBaseGetSnapshotRequest(): GetSnapshotRequest {
  return { aggregateId: "" };
}

export const GetSnapshotRequest: MessageFns<GetSnapshotRequest> = {
  encode(message: GetSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aggregateId !== "") {
      writer.uint32(10).string(message.aggregateId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSnapshotRequest {
    return { aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "" };
  },

  toJSON(message: GetSnapshotRequest): unknown {
    const obj: any = {};
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSnapshotRequest>): GetSnapshotRequest {
    return GetSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSnapshotRequest>): GetSnapshotRequest {
    const message = createBaseGetSnapshotRequest();
    message.aggregateId = object.aggregateId ?? "";
    return message;
  },
};

function createBasePutSnapshotRequest(): PutSnapshotRequest {
  return { snapshot: undefined };
}

export const PutSnapshotRequest: MessageFns<PutSnapshotRequest> = {
  encode(message: PutSnapshotRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapshot !== undefined) {
      Snapshot.encode(message.snapshot, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PutSnapshotRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePutSnapshotRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapshot = Snapshot.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PutSnapshotRequest {
    return { snapshot: isSet(object.snapshot) ? Snapshot.fromJSON(object.snapshot) : undefined };
  },

  toJSON(message: PutSnapshotRequest): unknown {
    const obj: any = {};
    if (message.snapshot !== undefined) {
      obj.snapshot = Snapshot.toJSON(message.snapshot);
    }
    return obj;
  },

  create(base?: DeepPartial<PutSnapshotRequest>): PutSnapshotRequest {
    return PutSnapshotRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PutSnapshotRequest>): PutSnapshotRequest {
    const message = createBasePutSnapshotRequest();
    message.snapshot = (object.snapshot !== undefined && object.snapshot !== null)
      ? Snapshot.fromPartial(object.snapshot)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
