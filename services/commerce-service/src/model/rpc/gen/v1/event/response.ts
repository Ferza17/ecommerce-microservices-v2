// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/event/response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Event, Snapshot } from "./model";

export const protobufPackage = "event";

export interface AppendResponse {
  nextVersion: number;
}

export interface ReadByAggregateResponse {
  events: Event[];
}

export interface ReadByTypeResponse {
  events: Event[];
  nextAfterId: string;
}

export interface GetSnapshotResponse {
  snapshot: Snapshot | undefined;
}

export interface PutSnapshotResponse {
}

function createBaseAppendResponse(): AppendResponse {
  return { nextVersion: 0 };
}

export const AppendResponse: MessageFns<AppendResponse> = {
  encode(message: AppendResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.nextVersion !== 0) {
      writer.uint32(8).int64(message.nextVersion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AppendResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAppendResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.nextVersion = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AppendResponse {
    return { nextVersion: isSet(object.nextVersion) ? globalThis.Number(object.nextVersion) : 0 };
  },

  toJSON(message: AppendResponse): unknown {
    const obj: any = {};
    if (message.nextVersion !== 0) {
      obj.nextVersion = Math.round(message.nextVersion);
    }
    return obj;
  },

  create(base?: DeepPartial<AppendResponse>): AppendResponse {
    return AppendResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AppendResponse>): AppendResponse {
    const message = createBaseAppendResponse();
    message.nextVersion = object.nextVersion ?? 0;
    return message;
  },
};

function createBaseReadByAggregateResponse(): ReadByAggregateResponse {
  return { events: [] };
}

export const ReadByAggregateResponse: MessageFns<ReadByAggregateResponse> = {
  encode(message: ReadByAggregateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadByAggregateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadByAggregateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadByAggregateResponse {
    return { events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [] };
  },

  toJSON(message: ReadByAggregateResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ReadByAggregateResponse>): ReadByAggregateResponse {
    return ReadByAggregateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadByAggregateResponse>): ReadByAggregateResponse {
    const message = createBaseReadByAggregateResponse();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseReadByTypeResponse(): ReadByTypeResponse {
  return { events: [], nextAfterId: "" };
}

export const ReadByTypeResponse: MessageFns<ReadByTypeResponse> = {
  encode(message: ReadByTypeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextAfterId !== "") {
      writer.uint32(18).string(message.nextAfterId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadByTypeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadByTypeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextAfterId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadByTypeResponse {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      nextAfterId: isSet(object.nextAfterId) ? globalThis.String(object.nextAfterId) : "",
    };
  },

  toJSON(message: ReadByTypeResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.nextAfterId !== "") {
      obj.nextAfterId = message.nextAfterId;
    }
    return obj;
  },

  create(base?: DeepPartial<ReadByTypeResponse>): ReadByTypeResponse {
    return ReadByTypeResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReadByTypeResponse>): ReadByTypeResponse {
    const message = createBaseReadByTypeResponse();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.nextAfterId = object.nextAfterId ?? "";
    return message;
  },
};

function createBaseGetSnapshotResponse(): GetSnapshotResponse {
  return { snapshot: undefined };
}

export const GetSnapshotResponse: MessageFns<GetSnapshotResponse> = {
  encode(message: GetSnapshotResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.snapshot !== undefined) {
      Snapshot.encode(message.snapshot, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSnapshotResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSnapshotResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.snapshot = Snapshot.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSnapshotResponse {
    return { snapshot: isSet(object.snapshot) ? Snapshot.fromJSON(object.snapshot) : undefined };
  },

  toJSON(message: GetSnapshotResponse): unknown {
    const obj: any = {};
    if (message.snapshot !== undefined) {
      obj.snapshot = Snapshot.toJSON(message.snapshot);
    }
    return obj;
  },

  create(base?: DeepPartial<GetSnapshotResponse>): GetSnapshotResponse {
    return GetSnapshotResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSnapshotResponse>): GetSnapshotResponse {
    const message = createBaseGetSnapshotResponse();
    message.snapshot = (object.snapshot !== undefined && object.snapshot !== null)
      ? Snapshot.fromPartial(object.snapshot)
      : undefined;
    return message;
  },
};

function createBasePutSnapshotResponse(): PutSnapshotResponse {
  return {};
}

export const PutSnapshotResponse: MessageFns<PutSnapshotResponse> = {
  encode(_: PutSnapshotResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PutSnapshotResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePutSnapshotResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PutSnapshotResponse {
    return {};
  },

  toJSON(_: PutSnapshotResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<PutSnapshotResponse>): PutSnapshotResponse {
    return PutSnapshotResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<PutSnapshotResponse>): PutSnapshotResponse {
    const message = createBasePutSnapshotResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
