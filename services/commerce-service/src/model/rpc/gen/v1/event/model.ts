// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/event/model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "event";

export interface Event {
  Id: string;
  aggregateId: string;
  aggregateType: string;
  eventType: string;
  version: number;
  timestamp: Date | undefined;
  sagaId: string;
  metadata: { [key: string]: string };
  /**
   * oneof payload {
   *    user.User user = 10;
   *    product.Product product = 11;
   *    payment.Payment payment = 12;
   *    shipping.Shipping shipping = 13;
   *  }
   */
  payload: Buffer;
}

export interface Event_MetadataEntry {
  key: string;
  value: string;
}

export interface ReserveEvent {
  sagaId: string;
  aggregateType: string;
}

function createBaseEvent(): Event {
  return {
    Id: "",
    aggregateId: "",
    aggregateType: "",
    eventType: "",
    version: 0,
    timestamp: undefined,
    sagaId: "",
    metadata: {},
    payload: Buffer.alloc(0),
  };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.Id !== "") {
      writer.uint32(10).string(message.Id);
    }
    if (message.aggregateId !== "") {
      writer.uint32(18).string(message.aggregateId);
    }
    if (message.aggregateType !== "") {
      writer.uint32(26).string(message.aggregateType);
    }
    if (message.eventType !== "") {
      writer.uint32(34).string(message.eventType);
    }
    if (message.version !== 0) {
      writer.uint32(40).int32(message.version);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(50).fork()).join();
    }
    if (message.sagaId !== "") {
      writer.uint32(58).string(message.sagaId);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      Event_MetadataEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    if (message.payload.length !== 0) {
      writer.uint32(74).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.Id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.aggregateType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sagaId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = Event_MetadataEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.metadata[entry8.key] = entry8.value;
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.payload = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      Id: isSet(object.Id) ? globalThis.String(object.Id) : "",
      aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
      aggregateType: isSet(object.aggregateType) ? globalThis.String(object.aggregateType) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      sagaId: isSet(object.sagaId) ? globalThis.String(object.sagaId) : "",
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      payload: isSet(object.payload) ? Buffer.from(bytesFromBase64(object.payload)) : Buffer.alloc(0),
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.Id !== "") {
      obj.Id = message.Id;
    }
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    if (message.aggregateType !== "") {
      obj.aggregateType = message.aggregateType;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.sagaId !== "") {
      obj.sagaId = message.sagaId;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create(base?: DeepPartial<Event>): Event {
    return Event.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event>): Event {
    const message = createBaseEvent();
    message.Id = object.Id ?? "";
    message.aggregateId = object.aggregateId ?? "";
    message.aggregateType = object.aggregateType ?? "";
    message.eventType = object.eventType ?? "";
    message.version = object.version ?? 0;
    message.timestamp = object.timestamp ?? undefined;
    message.sagaId = object.sagaId ?? "";
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.payload = object.payload ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseEvent_MetadataEntry(): Event_MetadataEntry {
  return { key: "", value: "" };
}

export const Event_MetadataEntry: MessageFns<Event_MetadataEntry> = {
  encode(message: Event_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Event_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Event_MetadataEntry>): Event_MetadataEntry {
    return Event_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event_MetadataEntry>): Event_MetadataEntry {
    const message = createBaseEvent_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseReserveEvent(): ReserveEvent {
  return { sagaId: "", aggregateType: "" };
}

export const ReserveEvent: MessageFns<ReserveEvent> = {
  encode(message: ReserveEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sagaId !== "") {
      writer.uint32(10).string(message.sagaId);
    }
    if (message.aggregateType !== "") {
      writer.uint32(18).string(message.aggregateType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReserveEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReserveEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sagaId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.aggregateType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReserveEvent {
    return {
      sagaId: isSet(object.sagaId) ? globalThis.String(object.sagaId) : "",
      aggregateType: isSet(object.aggregateType) ? globalThis.String(object.aggregateType) : "",
    };
  },

  toJSON(message: ReserveEvent): unknown {
    const obj: any = {};
    if (message.sagaId !== "") {
      obj.sagaId = message.sagaId;
    }
    if (message.aggregateType !== "") {
      obj.aggregateType = message.aggregateType;
    }
    return obj;
  },

  create(base?: DeepPartial<ReserveEvent>): ReserveEvent {
    return ReserveEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReserveEvent>): ReserveEvent {
    const message = createBaseReserveEvent();
    message.sagaId = object.sagaId ?? "";
    message.aggregateType = object.aggregateType ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
