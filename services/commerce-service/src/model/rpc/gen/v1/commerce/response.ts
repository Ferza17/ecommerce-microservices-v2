// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/commerce/response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { CartItem, WishlistItem } from "./model";

export const protobufPackage = "commerce";

/** CART ITEM RESPONSE DEFINITION */
export interface CreateCartItemResponse {
  id: string;
}

export interface UpdateCartItemByIdResponse {
  id: string;
}

export interface FindCartItemsWithPaginationResponse {
  items: CartItem[];
  page: number;
  limit: number;
  total: number;
}

export interface DeleteCartItemByIdResponse {
  message: string;
}

export interface CreateWishlistItemResponse {
  id: string;
}

/** WISHLIST ITEM RESPONSE DEFINITION */
export interface FindWishlistItemWithPaginationResponse {
  items: WishlistItem[];
  page: number;
  limit: number;
}

export interface DeleteWishlistItemByIdResponse {
  userId: string;
}

function createBaseCreateCartItemResponse(): CreateCartItemResponse {
  return { id: "" };
}

export const CreateCartItemResponse: MessageFns<CreateCartItemResponse> = {
  encode(message: CreateCartItemResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCartItemResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCartItemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCartItemResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreateCartItemResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCartItemResponse>): CreateCartItemResponse {
    return CreateCartItemResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCartItemResponse>): CreateCartItemResponse {
    const message = createBaseCreateCartItemResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUpdateCartItemByIdResponse(): UpdateCartItemByIdResponse {
  return { id: "" };
}

export const UpdateCartItemByIdResponse: MessageFns<UpdateCartItemByIdResponse> = {
  encode(message: UpdateCartItemByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCartItemByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCartItemByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCartItemByIdResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: UpdateCartItemByIdResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCartItemByIdResponse>): UpdateCartItemByIdResponse {
    return UpdateCartItemByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCartItemByIdResponse>): UpdateCartItemByIdResponse {
    const message = createBaseUpdateCartItemByIdResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFindCartItemsWithPaginationResponse(): FindCartItemsWithPaginationResponse {
  return { items: [], page: 0, limit: 0, total: 0 };
}

export const FindCartItemsWithPaginationResponse: MessageFns<FindCartItemsWithPaginationResponse> = {
  encode(message: FindCartItemsWithPaginationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      CartItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    if (message.total !== 0) {
      writer.uint32(32).int32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindCartItemsWithPaginationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindCartItemsWithPaginationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(CartItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.total = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindCartItemsWithPaginationResponse {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => CartItem.fromJSON(e)) : [],
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: FindCartItemsWithPaginationResponse): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => CartItem.toJSON(e));
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create(base?: DeepPartial<FindCartItemsWithPaginationResponse>): FindCartItemsWithPaginationResponse {
    return FindCartItemsWithPaginationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindCartItemsWithPaginationResponse>): FindCartItemsWithPaginationResponse {
    const message = createBaseFindCartItemsWithPaginationResponse();
    message.items = object.items?.map((e) => CartItem.fromPartial(e)) || [];
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseDeleteCartItemByIdResponse(): DeleteCartItemByIdResponse {
  return { message: "" };
}

export const DeleteCartItemByIdResponse: MessageFns<DeleteCartItemByIdResponse> = {
  encode(message: DeleteCartItemByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCartItemByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCartItemByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCartItemByIdResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: DeleteCartItemByIdResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCartItemByIdResponse>): DeleteCartItemByIdResponse {
    return DeleteCartItemByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCartItemByIdResponse>): DeleteCartItemByIdResponse {
    const message = createBaseDeleteCartItemByIdResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCreateWishlistItemResponse(): CreateWishlistItemResponse {
  return { id: "" };
}

export const CreateWishlistItemResponse: MessageFns<CreateWishlistItemResponse> = {
  encode(message: CreateWishlistItemResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWishlistItemResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWishlistItemResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWishlistItemResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreateWishlistItemResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateWishlistItemResponse>): CreateWishlistItemResponse {
    return CreateWishlistItemResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateWishlistItemResponse>): CreateWishlistItemResponse {
    const message = createBaseCreateWishlistItemResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFindWishlistItemWithPaginationResponse(): FindWishlistItemWithPaginationResponse {
  return { items: [], page: 0, limit: 0 };
}

export const FindWishlistItemWithPaginationResponse: MessageFns<FindWishlistItemWithPaginationResponse> = {
  encode(message: FindWishlistItemWithPaginationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      WishlistItem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.page !== 0) {
      writer.uint32(16).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindWishlistItemWithPaginationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindWishlistItemWithPaginationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(WishlistItem.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindWishlistItemWithPaginationResponse {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => WishlistItem.fromJSON(e)) : [],
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: FindWishlistItemWithPaginationResponse): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => WishlistItem.toJSON(e));
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<FindWishlistItemWithPaginationResponse>): FindWishlistItemWithPaginationResponse {
    return FindWishlistItemWithPaginationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindWishlistItemWithPaginationResponse>): FindWishlistItemWithPaginationResponse {
    const message = createBaseFindWishlistItemWithPaginationResponse();
    message.items = object.items?.map((e) => WishlistItem.fromPartial(e)) || [];
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseDeleteWishlistItemByIdResponse(): DeleteWishlistItemByIdResponse {
  return { userId: "" };
}

export const DeleteWishlistItemByIdResponse: MessageFns<DeleteWishlistItemByIdResponse> = {
  encode(message: DeleteWishlistItemByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWishlistItemByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWishlistItemByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWishlistItemByIdResponse {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: DeleteWishlistItemByIdResponse): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteWishlistItemByIdResponse>): DeleteWishlistItemByIdResponse {
    return DeleteWishlistItemByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteWishlistItemByIdResponse>): DeleteWishlistItemByIdResponse {
    const message = createBaseDeleteWishlistItemByIdResponse();
    message.userId = object.userId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
