// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/common/response/response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../../google/protobuf/struct";

export const protobufPackage = "response";

export interface Response {
  status: string;
  message: string;
  data: { [key: string]: any } | undefined;
}

export interface ResponseCommand {
  status: string;
  message: string;
  data: ResponseCommand_ResponseCommandData | undefined;
}

export interface ResponseCommand_ResponseCommandData {
  requestId: string;
  websocketNotificationUrl: string;
}

function createBaseResponse(): Response {
  return { status: "", message: "", data: undefined };
}

export const Response: MessageFns<Response> = {
  encode(message: Response, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.data !== undefined) {
      Struct.encode(Struct.wrap(message.data), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Response {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.data = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Response {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isObject(object.data) ? object.data : undefined,
    };
  },

  toJSON(message: Response): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== undefined) {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<Response>): Response {
    return Response.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Response>): Response {
    const message = createBaseResponse();
    message.status = object.status ?? "";
    message.message = object.message ?? "";
    message.data = object.data ?? undefined;
    return message;
  },
};

function createBaseResponseCommand(): ResponseCommand {
  return { status: "", message: "", data: undefined };
}

export const ResponseCommand: MessageFns<ResponseCommand> = {
  encode(message: ResponseCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== "") {
      writer.uint32(10).string(message.status);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.data !== undefined) {
      ResponseCommand_ResponseCommandData.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ResponseCommand_ResponseCommandData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseCommand {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? ResponseCommand_ResponseCommandData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: ResponseCommand): unknown {
    const obj: any = {};
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== undefined) {
      obj.data = ResponseCommand_ResponseCommandData.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseCommand>): ResponseCommand {
    return ResponseCommand.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseCommand>): ResponseCommand {
    const message = createBaseResponseCommand();
    message.status = object.status ?? "";
    message.message = object.message ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ResponseCommand_ResponseCommandData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseResponseCommand_ResponseCommandData(): ResponseCommand_ResponseCommandData {
  return { requestId: "", websocketNotificationUrl: "" };
}

export const ResponseCommand_ResponseCommandData: MessageFns<ResponseCommand_ResponseCommandData> = {
  encode(message: ResponseCommand_ResponseCommandData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(26).string(message.requestId);
    }
    if (message.websocketNotificationUrl !== "") {
      writer.uint32(34).string(message.websocketNotificationUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseCommand_ResponseCommandData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseCommand_ResponseCommandData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.websocketNotificationUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseCommand_ResponseCommandData {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      websocketNotificationUrl: isSet(object.websocketNotificationUrl)
        ? globalThis.String(object.websocketNotificationUrl)
        : "",
    };
  },

  toJSON(message: ResponseCommand_ResponseCommandData): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.websocketNotificationUrl !== "") {
      obj.websocketNotificationUrl = message.websocketNotificationUrl;
    }
    return obj;
  },

  create(base?: DeepPartial<ResponseCommand_ResponseCommandData>): ResponseCommand_ResponseCommandData {
    return ResponseCommand_ResponseCommandData.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ResponseCommand_ResponseCommandData>): ResponseCommand_ResponseCommandData {
    const message = createBaseResponseCommand_ResponseCommandData();
    message.requestId = object.requestId ?? "";
    message.websocketNotificationUrl = object.websocketNotificationUrl ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
