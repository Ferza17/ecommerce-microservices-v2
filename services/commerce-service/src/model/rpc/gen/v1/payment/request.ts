// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/payment/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PaymentStatus, paymentStatusFromJSON, paymentStatusToJSON } from "./enum";

export const protobufPackage = "payment";

/** PAYMENT REQUEST DEFINITION */
export interface CreatePaymentItemRequest {
  productId: string;
  qty: number;
}

export interface CreatePaymentRequest {
  items: CreatePaymentItemRequest[];
  providerId: string;
  shippingProviderId: string;
}

export interface PaymentOrderDelayedCancelledRequest {
  id: string;
}

export interface CallBackPaymentRequest {
  paymentId: string;
  amount: number;
}

export interface FindPaymentByIdRequest {
  id: string;
}

export interface FindPaymentByUserIdAndStatusRequest {
  userId: string;
  status: PaymentStatus;
}

/** PAYMENT PROVIDER REQUEST DEFINITION */
export interface FindPaymentProvidersRequest {
  name: string;
}

export interface FindPaymentProviderByIdRequest {
  id: string;
}

function createBaseCreatePaymentItemRequest(): CreatePaymentItemRequest {
  return { productId: "", qty: 0 };
}

export const CreatePaymentItemRequest: MessageFns<CreatePaymentItemRequest> = {
  encode(message: CreatePaymentItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.qty !== 0) {
      writer.uint32(16).int32(message.qty);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.qty = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentItemRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      qty: isSet(object.qty) ? globalThis.Number(object.qty) : 0,
    };
  },

  toJSON(message: CreatePaymentItemRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.qty !== 0) {
      obj.qty = Math.round(message.qty);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePaymentItemRequest>): CreatePaymentItemRequest {
    return CreatePaymentItemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePaymentItemRequest>): CreatePaymentItemRequest {
    const message = createBaseCreatePaymentItemRequest();
    message.productId = object.productId ?? "";
    message.qty = object.qty ?? 0;
    return message;
  },
};

function createBaseCreatePaymentRequest(): CreatePaymentRequest {
  return { items: [], providerId: "", shippingProviderId: "" };
}

export const CreatePaymentRequest: MessageFns<CreatePaymentRequest> = {
  encode(message: CreatePaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      CreatePaymentItemRequest.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.providerId !== "") {
      writer.uint32(18).string(message.providerId);
    }
    if (message.shippingProviderId !== "") {
      writer.uint32(26).string(message.shippingProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(CreatePaymentItemRequest.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.providerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shippingProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentRequest {
    return {
      items: globalThis.Array.isArray(object?.items)
        ? object.items.map((e: any) => CreatePaymentItemRequest.fromJSON(e))
        : [],
      providerId: isSet(object.providerId) ? globalThis.String(object.providerId) : "",
      shippingProviderId: isSet(object.shippingProviderId) ? globalThis.String(object.shippingProviderId) : "",
    };
  },

  toJSON(message: CreatePaymentRequest): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => CreatePaymentItemRequest.toJSON(e));
    }
    if (message.providerId !== "") {
      obj.providerId = message.providerId;
    }
    if (message.shippingProviderId !== "") {
      obj.shippingProviderId = message.shippingProviderId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePaymentRequest>): CreatePaymentRequest {
    return CreatePaymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePaymentRequest>): CreatePaymentRequest {
    const message = createBaseCreatePaymentRequest();
    message.items = object.items?.map((e) => CreatePaymentItemRequest.fromPartial(e)) || [];
    message.providerId = object.providerId ?? "";
    message.shippingProviderId = object.shippingProviderId ?? "";
    return message;
  },
};

function createBasePaymentOrderDelayedCancelledRequest(): PaymentOrderDelayedCancelledRequest {
  return { id: "" };
}

export const PaymentOrderDelayedCancelledRequest: MessageFns<PaymentOrderDelayedCancelledRequest> = {
  encode(message: PaymentOrderDelayedCancelledRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentOrderDelayedCancelledRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentOrderDelayedCancelledRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentOrderDelayedCancelledRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: PaymentOrderDelayedCancelledRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<PaymentOrderDelayedCancelledRequest>): PaymentOrderDelayedCancelledRequest {
    return PaymentOrderDelayedCancelledRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PaymentOrderDelayedCancelledRequest>): PaymentOrderDelayedCancelledRequest {
    const message = createBasePaymentOrderDelayedCancelledRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCallBackPaymentRequest(): CallBackPaymentRequest {
  return { paymentId: "", amount: 0 };
}

export const CallBackPaymentRequest: MessageFns<CallBackPaymentRequest> = {
  encode(message: CallBackPaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentId !== "") {
      writer.uint32(10).string(message.paymentId);
    }
    if (message.amount !== 0) {
      writer.uint32(17).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallBackPaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallBackPaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paymentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallBackPaymentRequest {
    return {
      paymentId: isSet(object.paymentId) ? globalThis.String(object.paymentId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: CallBackPaymentRequest): unknown {
    const obj: any = {};
    if (message.paymentId !== "") {
      obj.paymentId = message.paymentId;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<CallBackPaymentRequest>): CallBackPaymentRequest {
    return CallBackPaymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallBackPaymentRequest>): CallBackPaymentRequest {
    const message = createBaseCallBackPaymentRequest();
    message.paymentId = object.paymentId ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseFindPaymentByIdRequest(): FindPaymentByIdRequest {
  return { id: "" };
}

export const FindPaymentByIdRequest: MessageFns<FindPaymentByIdRequest> = {
  encode(message: FindPaymentByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindPaymentByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentByIdRequest>): FindPaymentByIdRequest {
    return FindPaymentByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentByIdRequest>): FindPaymentByIdRequest {
    const message = createBaseFindPaymentByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFindPaymentByUserIdAndStatusRequest(): FindPaymentByUserIdAndStatusRequest {
  return { userId: "", status: 0 };
}

export const FindPaymentByUserIdAndStatusRequest: MessageFns<FindPaymentByUserIdAndStatusRequest> = {
  encode(message: FindPaymentByUserIdAndStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentByUserIdAndStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentByUserIdAndStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentByUserIdAndStatusRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      status: isSet(object.status) ? paymentStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: FindPaymentByUserIdAndStatusRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.status !== 0) {
      obj.status = paymentStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentByUserIdAndStatusRequest>): FindPaymentByUserIdAndStatusRequest {
    return FindPaymentByUserIdAndStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentByUserIdAndStatusRequest>): FindPaymentByUserIdAndStatusRequest {
    const message = createBaseFindPaymentByUserIdAndStatusRequest();
    message.userId = object.userId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseFindPaymentProvidersRequest(): FindPaymentProvidersRequest {
  return { name: "" };
}

export const FindPaymentProvidersRequest: MessageFns<FindPaymentProvidersRequest> = {
  encode(message: FindPaymentProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentProvidersRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: FindPaymentProvidersRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentProvidersRequest>): FindPaymentProvidersRequest {
    return FindPaymentProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentProvidersRequest>): FindPaymentProvidersRequest {
    const message = createBaseFindPaymentProvidersRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseFindPaymentProviderByIdRequest(): FindPaymentProviderByIdRequest {
  return { id: "" };
}

export const FindPaymentProviderByIdRequest: MessageFns<FindPaymentProviderByIdRequest> = {
  encode(message: FindPaymentProviderByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentProviderByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentProviderByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentProviderByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindPaymentProviderByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentProviderByIdRequest>): FindPaymentProviderByIdRequest {
    return FindPaymentProviderByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentProviderByIdRequest>): FindPaymentProviderByIdRequest {
    const message = createBaseFindPaymentProviderByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
