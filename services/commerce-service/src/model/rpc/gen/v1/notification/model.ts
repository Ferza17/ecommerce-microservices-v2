// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/notification/model.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../google/protobuf/struct";

export const protobufPackage = "notification";

export enum NotificationTypeEnum {
  NOTIFICATION_EMAIL_USER_OTP = 0,
  NOTIFICATION_EMAIL_PAYMENT_ORDER_CREATED = 1,
  UNRECOGNIZED = -1,
}

export function notificationTypeEnumFromJSON(object: any): NotificationTypeEnum {
  switch (object) {
    case 0:
    case "NOTIFICATION_EMAIL_USER_OTP":
      return NotificationTypeEnum.NOTIFICATION_EMAIL_USER_OTP;
    case 1:
    case "NOTIFICATION_EMAIL_PAYMENT_ORDER_CREATED":
      return NotificationTypeEnum.NOTIFICATION_EMAIL_PAYMENT_ORDER_CREATED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NotificationTypeEnum.UNRECOGNIZED;
  }
}

export function notificationTypeEnumToJSON(object: NotificationTypeEnum): string {
  switch (object) {
    case NotificationTypeEnum.NOTIFICATION_EMAIL_USER_OTP:
      return "NOTIFICATION_EMAIL_USER_OTP";
    case NotificationTypeEnum.NOTIFICATION_EMAIL_PAYMENT_ORDER_CREATED:
      return "NOTIFICATION_EMAIL_PAYMENT_ORDER_CREATED";
    case NotificationTypeEnum.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface NotificationTemplate {
  id: string;
  type: string;
  template: string;
  templateVars: { [key: string]: any } | undefined;
}

function createBaseNotificationTemplate(): NotificationTemplate {
  return { id: "", type: "", template: "", templateVars: undefined };
}

export const NotificationTemplate: MessageFns<NotificationTemplate> = {
  encode(message: NotificationTemplate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    if (message.template !== "") {
      writer.uint32(26).string(message.template);
    }
    if (message.templateVars !== undefined) {
      Struct.encode(Struct.wrap(message.templateVars), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): NotificationTemplate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNotificationTemplate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.template = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.templateVars = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): NotificationTemplate {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      template: isSet(object.template) ? globalThis.String(object.template) : "",
      templateVars: isObject(object.templateVars) ? object.templateVars : undefined,
    };
  },

  toJSON(message: NotificationTemplate): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.template !== "") {
      obj.template = message.template;
    }
    if (message.templateVars !== undefined) {
      obj.templateVars = message.templateVars;
    }
    return obj;
  },

  create(base?: DeepPartial<NotificationTemplate>): NotificationTemplate {
    return NotificationTemplate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<NotificationTemplate>): NotificationTemplate {
    const message = createBaseNotificationTemplate();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    message.template = object.template ?? "";
    message.templateVars = object.templateVars ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
