// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/notification/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Payment, Provider } from "../payment/model";
import { NotificationTypeEnum, notificationTypeEnumFromJSON, notificationTypeEnumToJSON } from "./model";

export const protobufPackage = "notification";

export interface SendOtpEmailNotificationRequest {
  otp: string;
  email: string;
  notificationType: NotificationTypeEnum;
}

export interface SendEmailPaymentOrderCreateRequest {
  email: string;
  payment: Payment | undefined;
  paymentProvider: Provider | undefined;
  notificationType: NotificationTypeEnum;
}

function createBaseSendOtpEmailNotificationRequest(): SendOtpEmailNotificationRequest {
  return { otp: "", email: "", notificationType: 0 };
}

export const SendOtpEmailNotificationRequest: MessageFns<SendOtpEmailNotificationRequest> = {
  encode(message: SendOtpEmailNotificationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.otp !== "") {
      writer.uint32(10).string(message.otp);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.notificationType !== 0) {
      writer.uint32(24).int32(message.notificationType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendOtpEmailNotificationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendOtpEmailNotificationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.otp = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.notificationType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendOtpEmailNotificationRequest {
    return {
      otp: isSet(object.otp) ? globalThis.String(object.otp) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      notificationType: isSet(object.notificationType) ? notificationTypeEnumFromJSON(object.notificationType) : 0,
    };
  },

  toJSON(message: SendOtpEmailNotificationRequest): unknown {
    const obj: any = {};
    if (message.otp !== "") {
      obj.otp = message.otp;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.notificationType !== 0) {
      obj.notificationType = notificationTypeEnumToJSON(message.notificationType);
    }
    return obj;
  },

  create(base?: DeepPartial<SendOtpEmailNotificationRequest>): SendOtpEmailNotificationRequest {
    return SendOtpEmailNotificationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendOtpEmailNotificationRequest>): SendOtpEmailNotificationRequest {
    const message = createBaseSendOtpEmailNotificationRequest();
    message.otp = object.otp ?? "";
    message.email = object.email ?? "";
    message.notificationType = object.notificationType ?? 0;
    return message;
  },
};

function createBaseSendEmailPaymentOrderCreateRequest(): SendEmailPaymentOrderCreateRequest {
  return { email: "", payment: undefined, paymentProvider: undefined, notificationType: 0 };
}

export const SendEmailPaymentOrderCreateRequest: MessageFns<SendEmailPaymentOrderCreateRequest> = {
  encode(message: SendEmailPaymentOrderCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.payment !== undefined) {
      Payment.encode(message.payment, writer.uint32(18).fork()).join();
    }
    if (message.paymentProvider !== undefined) {
      Provider.encode(message.paymentProvider, writer.uint32(26).fork()).join();
    }
    if (message.notificationType !== 0) {
      writer.uint32(32).int32(message.notificationType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendEmailPaymentOrderCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendEmailPaymentOrderCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payment = Payment.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.paymentProvider = Provider.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.notificationType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendEmailPaymentOrderCreateRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      payment: isSet(object.payment) ? Payment.fromJSON(object.payment) : undefined,
      paymentProvider: isSet(object.paymentProvider) ? Provider.fromJSON(object.paymentProvider) : undefined,
      notificationType: isSet(object.notificationType) ? notificationTypeEnumFromJSON(object.notificationType) : 0,
    };
  },

  toJSON(message: SendEmailPaymentOrderCreateRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.payment !== undefined) {
      obj.payment = Payment.toJSON(message.payment);
    }
    if (message.paymentProvider !== undefined) {
      obj.paymentProvider = Provider.toJSON(message.paymentProvider);
    }
    if (message.notificationType !== 0) {
      obj.notificationType = notificationTypeEnumToJSON(message.notificationType);
    }
    return obj;
  },

  create(base?: DeepPartial<SendEmailPaymentOrderCreateRequest>): SendEmailPaymentOrderCreateRequest {
    return SendEmailPaymentOrderCreateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendEmailPaymentOrderCreateRequest>): SendEmailPaymentOrderCreateRequest {
    const message = createBaseSendEmailPaymentOrderCreateRequest();
    message.email = object.email ?? "";
    message.payment = (object.payment !== undefined && object.payment !== null)
      ? Payment.fromPartial(object.payment)
      : undefined;
    message.paymentProvider = (object.paymentProvider !== undefined && object.paymentProvider !== null)
      ? Provider.fromPartial(object.paymentProvider)
      : undefined;
    message.notificationType = object.notificationType ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
