// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/shipping/service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  CreateShippingRequest,
  DeleteShippingRequest,
  GetShippingByIdRequest,
  GetShippingProviderByIdRequest,
  ListShippingProvidersRequest,
  ListShippingRequest,
  UpdateShippingRequest,
} from "./request";
import {
  CreateShippingResponse,
  DeleteShippingResponse,
  GetShippingByIdResponse,
  GetShippingProviderByIdResponse,
  ListShippingProvidersResponse,
  ListShippingResponse,
  UpdateShippingResponse,
} from "./response";

export const protobufPackage = "shipping";

export type ShippingServiceService = typeof ShippingServiceService;
export const ShippingServiceService = {
  createShipping: {
    path: "/shipping.ShippingService/CreateShipping",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateShippingRequest) => Buffer.from(CreateShippingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateShippingRequest.decode(value),
    responseSerialize: (value: CreateShippingResponse) => Buffer.from(CreateShippingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateShippingResponse.decode(value),
  },
  getShippingById: {
    path: "/shipping.ShippingService/GetShippingById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetShippingByIdRequest) => Buffer.from(GetShippingByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetShippingByIdRequest.decode(value),
    responseSerialize: (value: GetShippingByIdResponse) => Buffer.from(GetShippingByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetShippingByIdResponse.decode(value),
  },
  listShipping: {
    path: "/shipping.ShippingService/ListShipping",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListShippingRequest) => Buffer.from(ListShippingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListShippingRequest.decode(value),
    responseSerialize: (value: ListShippingResponse) => Buffer.from(ListShippingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListShippingResponse.decode(value),
  },
  updateShipping: {
    path: "/shipping.ShippingService/UpdateShipping",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateShippingRequest) => Buffer.from(UpdateShippingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateShippingRequest.decode(value),
    responseSerialize: (value: UpdateShippingResponse) => Buffer.from(UpdateShippingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateShippingResponse.decode(value),
  },
  deleteShipping: {
    path: "/shipping.ShippingService/DeleteShipping",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteShippingRequest) => Buffer.from(DeleteShippingRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteShippingRequest.decode(value),
    responseSerialize: (value: DeleteShippingResponse) => Buffer.from(DeleteShippingResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteShippingResponse.decode(value),
  },
} as const;

export interface ShippingServiceServer extends UntypedServiceImplementation {
  createShipping: handleUnaryCall<CreateShippingRequest, CreateShippingResponse>;
  getShippingById: handleUnaryCall<GetShippingByIdRequest, GetShippingByIdResponse>;
  listShipping: handleUnaryCall<ListShippingRequest, ListShippingResponse>;
  updateShipping: handleUnaryCall<UpdateShippingRequest, UpdateShippingResponse>;
  deleteShipping: handleUnaryCall<DeleteShippingRequest, DeleteShippingResponse>;
}

export interface ShippingServiceClient extends Client {
  createShipping(
    request: CreateShippingRequest,
    callback: (error: ServiceError | null, response: CreateShippingResponse) => void,
  ): ClientUnaryCall;
  createShipping(
    request: CreateShippingRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateShippingResponse) => void,
  ): ClientUnaryCall;
  createShipping(
    request: CreateShippingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateShippingResponse) => void,
  ): ClientUnaryCall;
  getShippingById(
    request: GetShippingByIdRequest,
    callback: (error: ServiceError | null, response: GetShippingByIdResponse) => void,
  ): ClientUnaryCall;
  getShippingById(
    request: GetShippingByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetShippingByIdResponse) => void,
  ): ClientUnaryCall;
  getShippingById(
    request: GetShippingByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetShippingByIdResponse) => void,
  ): ClientUnaryCall;
  listShipping(
    request: ListShippingRequest,
    callback: (error: ServiceError | null, response: ListShippingResponse) => void,
  ): ClientUnaryCall;
  listShipping(
    request: ListShippingRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListShippingResponse) => void,
  ): ClientUnaryCall;
  listShipping(
    request: ListShippingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListShippingResponse) => void,
  ): ClientUnaryCall;
  updateShipping(
    request: UpdateShippingRequest,
    callback: (error: ServiceError | null, response: UpdateShippingResponse) => void,
  ): ClientUnaryCall;
  updateShipping(
    request: UpdateShippingRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateShippingResponse) => void,
  ): ClientUnaryCall;
  updateShipping(
    request: UpdateShippingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateShippingResponse) => void,
  ): ClientUnaryCall;
  deleteShipping(
    request: DeleteShippingRequest,
    callback: (error: ServiceError | null, response: DeleteShippingResponse) => void,
  ): ClientUnaryCall;
  deleteShipping(
    request: DeleteShippingRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteShippingResponse) => void,
  ): ClientUnaryCall;
  deleteShipping(
    request: DeleteShippingRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteShippingResponse) => void,
  ): ClientUnaryCall;
}

export const ShippingServiceClient = makeGenericClientConstructor(
  ShippingServiceService,
  "shipping.ShippingService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ShippingServiceClient;
  service: typeof ShippingServiceService;
  serviceName: string;
};

export type ShippingProviderServiceService = typeof ShippingProviderServiceService;
export const ShippingProviderServiceService = {
  getShippingProviderById: {
    path: "/shipping.ShippingProviderService/GetShippingProviderById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetShippingProviderByIdRequest) =>
      Buffer.from(GetShippingProviderByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetShippingProviderByIdRequest.decode(value),
    responseSerialize: (value: GetShippingProviderByIdResponse) =>
      Buffer.from(GetShippingProviderByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetShippingProviderByIdResponse.decode(value),
  },
  listShippingProviders: {
    path: "/shipping.ShippingProviderService/ListShippingProviders",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListShippingProvidersRequest) =>
      Buffer.from(ListShippingProvidersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListShippingProvidersRequest.decode(value),
    responseSerialize: (value: ListShippingProvidersResponse) =>
      Buffer.from(ListShippingProvidersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListShippingProvidersResponse.decode(value),
  },
} as const;

export interface ShippingProviderServiceServer extends UntypedServiceImplementation {
  getShippingProviderById: handleUnaryCall<GetShippingProviderByIdRequest, GetShippingProviderByIdResponse>;
  listShippingProviders: handleUnaryCall<ListShippingProvidersRequest, ListShippingProvidersResponse>;
}

export interface ShippingProviderServiceClient extends Client {
  getShippingProviderById(
    request: GetShippingProviderByIdRequest,
    callback: (error: ServiceError | null, response: GetShippingProviderByIdResponse) => void,
  ): ClientUnaryCall;
  getShippingProviderById(
    request: GetShippingProviderByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetShippingProviderByIdResponse) => void,
  ): ClientUnaryCall;
  getShippingProviderById(
    request: GetShippingProviderByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetShippingProviderByIdResponse) => void,
  ): ClientUnaryCall;
  listShippingProviders(
    request: ListShippingProvidersRequest,
    callback: (error: ServiceError | null, response: ListShippingProvidersResponse) => void,
  ): ClientUnaryCall;
  listShippingProviders(
    request: ListShippingProvidersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListShippingProvidersResponse) => void,
  ): ClientUnaryCall;
  listShippingProviders(
    request: ListShippingProvidersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListShippingProvidersResponse) => void,
  ): ClientUnaryCall;
}

export const ShippingProviderServiceClient = makeGenericClientConstructor(
  ShippingProviderServiceService,
  "shipping.ShippingProviderService",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): ShippingProviderServiceClient;
  service: typeof ShippingProviderServiceService;
  serviceName: string;
};
