// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/shipping/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "shipping";

/** SHIPPING PROTO DEFINITION */
export interface CreateShippingRequest {
  userId: string;
  paymentId: string;
  shippingProviderId: string;
}

export interface GetShippingByIdRequest {
  id: string;
}

export interface ListShippingRequest {
  page: number;
  limit: number;
}

export interface UpdateShippingRequest {
  id: string;
  userId: string;
  paymentId: string;
  shippingProviderId: string;
}

export interface DeleteShippingRequest {
  id: string;
}

/** SHIPPING PROVIDER PROTO DEFINITION */
export interface GetShippingProviderByIdRequest {
  id: string;
}

export interface ListShippingProvidersRequest {
  page: number;
  limit: number;
}

function createBaseCreateShippingRequest(): CreateShippingRequest {
  return { userId: "", paymentId: "", shippingProviderId: "" };
}

export const CreateShippingRequest: MessageFns<CreateShippingRequest> = {
  encode(message: CreateShippingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.paymentId !== "") {
      writer.uint32(18).string(message.paymentId);
    }
    if (message.shippingProviderId !== "") {
      writer.uint32(26).string(message.shippingProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShippingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShippingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.paymentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.shippingProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateShippingRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      paymentId: isSet(object.paymentId) ? globalThis.String(object.paymentId) : "",
      shippingProviderId: isSet(object.shippingProviderId) ? globalThis.String(object.shippingProviderId) : "",
    };
  },

  toJSON(message: CreateShippingRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.paymentId !== "") {
      obj.paymentId = message.paymentId;
    }
    if (message.shippingProviderId !== "") {
      obj.shippingProviderId = message.shippingProviderId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateShippingRequest>): CreateShippingRequest {
    return CreateShippingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateShippingRequest>): CreateShippingRequest {
    const message = createBaseCreateShippingRequest();
    message.userId = object.userId ?? "";
    message.paymentId = object.paymentId ?? "";
    message.shippingProviderId = object.shippingProviderId ?? "";
    return message;
  },
};

function createBaseGetShippingByIdRequest(): GetShippingByIdRequest {
  return { id: "" };
}

export const GetShippingByIdRequest: MessageFns<GetShippingByIdRequest> = {
  encode(message: GetShippingByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShippingByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShippingByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetShippingByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetShippingByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetShippingByIdRequest>): GetShippingByIdRequest {
    return GetShippingByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShippingByIdRequest>): GetShippingByIdRequest {
    const message = createBaseGetShippingByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListShippingRequest(): ListShippingRequest {
  return { page: 0, limit: 0 };
}

export const ListShippingRequest: MessageFns<ListShippingRequest> = {
  encode(message: ListShippingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).uint32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListShippingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShippingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShippingRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ListShippingRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<ListShippingRequest>): ListShippingRequest {
    return ListShippingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListShippingRequest>): ListShippingRequest {
    const message = createBaseListShippingRequest();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseUpdateShippingRequest(): UpdateShippingRequest {
  return { id: "", userId: "", paymentId: "", shippingProviderId: "" };
}

export const UpdateShippingRequest: MessageFns<UpdateShippingRequest> = {
  encode(message: UpdateShippingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.paymentId !== "") {
      writer.uint32(26).string(message.paymentId);
    }
    if (message.shippingProviderId !== "") {
      writer.uint32(34).string(message.shippingProviderId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateShippingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateShippingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.paymentId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shippingProviderId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateShippingRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      paymentId: isSet(object.paymentId) ? globalThis.String(object.paymentId) : "",
      shippingProviderId: isSet(object.shippingProviderId) ? globalThis.String(object.shippingProviderId) : "",
    };
  },

  toJSON(message: UpdateShippingRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.paymentId !== "") {
      obj.paymentId = message.paymentId;
    }
    if (message.shippingProviderId !== "") {
      obj.shippingProviderId = message.shippingProviderId;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateShippingRequest>): UpdateShippingRequest {
    return UpdateShippingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateShippingRequest>): UpdateShippingRequest {
    const message = createBaseUpdateShippingRequest();
    message.id = object.id ?? "";
    message.userId = object.userId ?? "";
    message.paymentId = object.paymentId ?? "";
    message.shippingProviderId = object.shippingProviderId ?? "";
    return message;
  },
};

function createBaseDeleteShippingRequest(): DeleteShippingRequest {
  return { id: "" };
}

export const DeleteShippingRequest: MessageFns<DeleteShippingRequest> = {
  encode(message: DeleteShippingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteShippingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteShippingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteShippingRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteShippingRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteShippingRequest>): DeleteShippingRequest {
    return DeleteShippingRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteShippingRequest>): DeleteShippingRequest {
    const message = createBaseDeleteShippingRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetShippingProviderByIdRequest(): GetShippingProviderByIdRequest {
  return { id: "" };
}

export const GetShippingProviderByIdRequest: MessageFns<GetShippingProviderByIdRequest> = {
  encode(message: GetShippingProviderByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShippingProviderByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShippingProviderByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetShippingProviderByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetShippingProviderByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetShippingProviderByIdRequest>): GetShippingProviderByIdRequest {
    return GetShippingProviderByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShippingProviderByIdRequest>): GetShippingProviderByIdRequest {
    const message = createBaseGetShippingProviderByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseListShippingProvidersRequest(): ListShippingProvidersRequest {
  return { page: 0, limit: 0 };
}

export const ListShippingProvidersRequest: MessageFns<ListShippingProvidersRequest> = {
  encode(message: ListShippingProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).uint32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(16).uint32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListShippingProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShippingProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShippingProvidersRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ListShippingProvidersRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<ListShippingProvidersRequest>): ListShippingProvidersRequest {
    return ListShippingProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListShippingProvidersRequest>): ListShippingProvidersRequest {
    const message = createBaseListShippingProvidersRequest();
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
