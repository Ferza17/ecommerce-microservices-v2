// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rabbitmq

import (
	"github.com/ferza17/ecommerce-microservices-v2/notification-service/infrastructure/mailhog"
	"github.com/ferza17/ecommerce-microservices-v2/notification-service/infrastructure/mongodb"
	"github.com/ferza17/ecommerce-microservices-v2/notification-service/infrastructure/rabbitmq"
	"github.com/ferza17/ecommerce-microservices-v2/notification-service/infrastructure/services/payment"
	"github.com/ferza17/ecommerce-microservices-v2/notification-service/infrastructure/telemetry"
	"github.com/ferza17/ecommerce-microservices-v2/notification-service/module/email/consumer"
	mongodb2 "github.com/ferza17/ecommerce-microservices-v2/notification-service/module/email/repository/mongodb"
	"github.com/ferza17/ecommerce-microservices-v2/notification-service/module/email/usecase"
	"github.com/ferza17/ecommerce-microservices-v2/notification-service/pkg/logger"
)

// Injectors from wire.go:

func ProvideRabbitMQServer() *RabbitMQTransport {
	iZapLogger := logger.NewZapLogger()
	iTelemetryInfrastructure := telemetry.NewTelemetry(iZapLogger)
	iRabbitMQInfrastructure := rabbitmq.NewRabbitMQInfrastructure(iZapLogger, iTelemetryInfrastructure)
	iMongoDBInfrastructure := mongodb.NewMongoDBInfrastructure(iZapLogger)
	iNotificationEmailRepository := mongodb2.NewNotificationEmailRepository(iMongoDBInfrastructure, iTelemetryInfrastructure, iZapLogger)
	iMailhogInfrastructure := mailhog.NewMailhogInfrastructure(iZapLogger)
	iPaymentService := payment.NewPaymentService(iZapLogger)
	iNotificationEmailUseCase := usecase.NewNotificationEmailUseCase(iNotificationEmailRepository, iRabbitMQInfrastructure, iMailhogInfrastructure, iTelemetryInfrastructure, iPaymentService, iZapLogger)
	iNotificationEmailConsumer := consumer.NewNotificationConsumer(iRabbitMQInfrastructure, iNotificationEmailUseCase, iTelemetryInfrastructure, iZapLogger)
	rabbitMQTransport := NewServer(iZapLogger, iNotificationEmailConsumer, iRabbitMQInfrastructure, iTelemetryInfrastructure)
	return rabbitMQTransport
}
