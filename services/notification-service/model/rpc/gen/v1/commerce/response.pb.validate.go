// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/commerce/response.proto

package commerce

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddToCartResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddToCartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddToCartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddToCartResponseMultiError, or nil if none found.
func (m *AddToCartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddToCartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddToCartResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddToCartResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddToCartResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddToCartResponseMultiError(errors)
	}

	return nil
}

// AddToCartResponseMultiError is an error wrapping multiple validation errors
// returned by AddToCartResponse.ValidateAll() if the designated constraints
// aren't met.
type AddToCartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddToCartResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddToCartResponseMultiError) AllErrors() []error { return m }

// AddToCartResponseValidationError is the validation error returned by
// AddToCartResponse.Validate if the designated constraints aren't met.
type AddToCartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToCartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToCartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToCartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToCartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToCartResponseValidationError) ErrorName() string {
	return "AddToCartResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddToCartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToCartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToCartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToCartResponseValidationError{}

// Validate checks the field values on FindCartItemsWithPaginationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindCartItemsWithPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCartItemsWithPaginationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindCartItemsWithPaginationResponseMultiError, or nil if none found.
func (m *FindCartItemsWithPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCartItemsWithPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindCartItemsWithPaginationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindCartItemsWithPaginationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindCartItemsWithPaginationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindCartItemsWithPaginationResponseMultiError(errors)
	}

	return nil
}

// FindCartItemsWithPaginationResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindCartItemsWithPaginationResponse.ValidateAll() if the designated
// constraints aren't met.
type FindCartItemsWithPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCartItemsWithPaginationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCartItemsWithPaginationResponseMultiError) AllErrors() []error { return m }

// FindCartItemsWithPaginationResponseValidationError is the validation error
// returned by FindCartItemsWithPaginationResponse.Validate if the designated
// constraints aren't met.
type FindCartItemsWithPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCartItemsWithPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCartItemsWithPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCartItemsWithPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCartItemsWithPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCartItemsWithPaginationResponseValidationError) ErrorName() string {
	return "FindCartItemsWithPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCartItemsWithPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCartItemsWithPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCartItemsWithPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCartItemsWithPaginationResponseValidationError{}

// Validate checks the field values on DeleteCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemByIdResponseMultiError, or nil if none found.
func (m *DeleteCartItemByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteCartItemByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteCartItemByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteCartItemByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteCartItemByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteCartItemByIdResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCartItemByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCartItemByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemByIdResponseMultiError) AllErrors() []error { return m }

// DeleteCartItemByIdResponseValidationError is the validation error returned
// by DeleteCartItemByIdResponse.Validate if the designated constraints aren't met.
type DeleteCartItemByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemByIdResponseValidationError) ErrorName() string {
	return "DeleteCartItemByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemByIdResponseValidationError{}

// Validate checks the field values on AddToWishlistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddToWishlistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddToWishlistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddToWishlistResponseMultiError, or nil if none found.
func (m *AddToWishlistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddToWishlistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddToWishlistResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddToWishlistResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddToWishlistResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddToWishlistResponseMultiError(errors)
	}

	return nil
}

// AddToWishlistResponseMultiError is an error wrapping multiple validation
// errors returned by AddToWishlistResponse.ValidateAll() if the designated
// constraints aren't met.
type AddToWishlistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddToWishlistResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddToWishlistResponseMultiError) AllErrors() []error { return m }

// AddToWishlistResponseValidationError is the validation error returned by
// AddToWishlistResponse.Validate if the designated constraints aren't met.
type AddToWishlistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToWishlistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToWishlistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToWishlistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToWishlistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToWishlistResponseValidationError) ErrorName() string {
	return "AddToWishlistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddToWishlistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToWishlistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToWishlistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToWishlistResponseValidationError{}

// Validate checks the field values on FindWishlistItemWithPaginationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindWishlistItemWithPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindWishlistItemWithPaginationResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// FindWishlistItemWithPaginationResponseMultiError, or nil if none found.
func (m *FindWishlistItemWithPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindWishlistItemWithPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindWishlistItemWithPaginationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindWishlistItemWithPaginationResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindWishlistItemWithPaginationResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindWishlistItemWithPaginationResponseMultiError(errors)
	}

	return nil
}

// FindWishlistItemWithPaginationResponseMultiError is an error wrapping
// multiple validation errors returned by
// FindWishlistItemWithPaginationResponse.ValidateAll() if the designated
// constraints aren't met.
type FindWishlistItemWithPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindWishlistItemWithPaginationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindWishlistItemWithPaginationResponseMultiError) AllErrors() []error { return m }

// FindWishlistItemWithPaginationResponseValidationError is the validation
// error returned by FindWishlistItemWithPaginationResponse.Validate if the
// designated constraints aren't met.
type FindWishlistItemWithPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindWishlistItemWithPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindWishlistItemWithPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindWishlistItemWithPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindWishlistItemWithPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindWishlistItemWithPaginationResponseValidationError) ErrorName() string {
	return "FindWishlistItemWithPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindWishlistItemWithPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindWishlistItemWithPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindWishlistItemWithPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindWishlistItemWithPaginationResponseValidationError{}

// Validate checks the field values on DeleteWishlistItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWishlistItemByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWishlistItemByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWishlistItemByIdResponseMultiError, or nil if none found.
func (m *DeleteWishlistItemByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWishlistItemByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteWishlistItemByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteWishlistItemByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteWishlistItemByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteWishlistItemByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteWishlistItemByIdResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteWishlistItemByIdResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteWishlistItemByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWishlistItemByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWishlistItemByIdResponseMultiError) AllErrors() []error { return m }

// DeleteWishlistItemByIdResponseValidationError is the validation error
// returned by DeleteWishlistItemByIdResponse.Validate if the designated
// constraints aren't met.
type DeleteWishlistItemByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWishlistItemByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWishlistItemByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWishlistItemByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWishlistItemByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWishlistItemByIdResponseValidationError) ErrorName() string {
	return "DeleteWishlistItemByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWishlistItemByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWishlistItemByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWishlistItemByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWishlistItemByIdResponseValidationError{}

// Validate checks the field values on AddToCartResponse_AddToCartResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AddToCartResponse_AddToCartResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddToCartResponse_AddToCartResponseData with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AddToCartResponse_AddToCartResponseDataMultiError, or nil if none found.
func (m *AddToCartResponse_AddToCartResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AddToCartResponse_AddToCartResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddToCartResponse_AddToCartResponseDataMultiError(errors)
	}

	return nil
}

// AddToCartResponse_AddToCartResponseDataMultiError is an error wrapping
// multiple validation errors returned by
// AddToCartResponse_AddToCartResponseData.ValidateAll() if the designated
// constraints aren't met.
type AddToCartResponse_AddToCartResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddToCartResponse_AddToCartResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddToCartResponse_AddToCartResponseDataMultiError) AllErrors() []error { return m }

// AddToCartResponse_AddToCartResponseDataValidationError is the validation
// error returned by AddToCartResponse_AddToCartResponseData.Validate if the
// designated constraints aren't met.
type AddToCartResponse_AddToCartResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToCartResponse_AddToCartResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToCartResponse_AddToCartResponseDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToCartResponse_AddToCartResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToCartResponse_AddToCartResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToCartResponse_AddToCartResponseDataValidationError) ErrorName() string {
	return "AddToCartResponse_AddToCartResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AddToCartResponse_AddToCartResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToCartResponse_AddToCartResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToCartResponse_AddToCartResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToCartResponse_AddToCartResponseDataValidationError{}

// Validate checks the field values on
// FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataMultiError,
// or nil if none found.
func (m *FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Total

	if len(errors) > 0 {
		return FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataMultiError(errors)
	}

	return nil
}

// FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataMultiError
// is an error wrapping multiple validation errors returned by
// FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseData.ValidateAll()
// if the designated constraints aren't met.
type FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataMultiError) AllErrors() []error {
	return m
}

// FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError
// is the validation error returned by
// FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseData.Validate
// if the designated constraints aren't met.
type FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError) ErrorName() string {
	return "FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCartItemsWithPaginationResponse_FindCartItemsWithPaginationResponseDataValidationError{}

// Validate checks the field values on
// DeleteCartItemByIdResponse_DeleteCartItemByIdResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemByIdResponse_DeleteCartItemByIdResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteCartItemByIdResponse_DeleteCartItemByIdResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataMultiError, or nil
// if none found.
func (m *DeleteCartItemByIdResponse_DeleteCartItemByIdResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemByIdResponse_DeleteCartItemByIdResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataMultiError(errors)
	}

	return nil
}

// DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataMultiError is an
// error wrapping multiple validation errors returned by
// DeleteCartItemByIdResponse_DeleteCartItemByIdResponseData.ValidateAll() if
// the designated constraints aren't met.
type DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataMultiError) AllErrors() []error {
	return m
}

// DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError is
// the validation error returned by
// DeleteCartItemByIdResponse_DeleteCartItemByIdResponseData.Validate if the
// designated constraints aren't met.
type DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError) ErrorName() string {
	return "DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemByIdResponse_DeleteCartItemByIdResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemByIdResponse_DeleteCartItemByIdResponseDataValidationError{}

// Validate checks the field values on
// AddToWishlistResponse_AddToWishlistResponseData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddToWishlistResponse_AddToWishlistResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AddToWishlistResponse_AddToWishlistResponseData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// AddToWishlistResponse_AddToWishlistResponseDataMultiError, or nil if none found.
func (m *AddToWishlistResponse_AddToWishlistResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AddToWishlistResponse_AddToWishlistResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddToWishlistResponse_AddToWishlistResponseDataMultiError(errors)
	}

	return nil
}

// AddToWishlistResponse_AddToWishlistResponseDataMultiError is an error
// wrapping multiple validation errors returned by
// AddToWishlistResponse_AddToWishlistResponseData.ValidateAll() if the
// designated constraints aren't met.
type AddToWishlistResponse_AddToWishlistResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddToWishlistResponse_AddToWishlistResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddToWishlistResponse_AddToWishlistResponseDataMultiError) AllErrors() []error { return m }

// AddToWishlistResponse_AddToWishlistResponseDataValidationError is the
// validation error returned by
// AddToWishlistResponse_AddToWishlistResponseData.Validate if the designated
// constraints aren't met.
type AddToWishlistResponse_AddToWishlistResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToWishlistResponse_AddToWishlistResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AddToWishlistResponse_AddToWishlistResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AddToWishlistResponse_AddToWishlistResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToWishlistResponse_AddToWishlistResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToWishlistResponse_AddToWishlistResponseDataValidationError) ErrorName() string {
	return "AddToWishlistResponse_AddToWishlistResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AddToWishlistResponse_AddToWishlistResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToWishlistResponse_AddToWishlistResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToWishlistResponse_AddToWishlistResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToWishlistResponse_AddToWishlistResponseDataValidationError{}

// Validate checks the field values on
// FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataMultiError,
// or nil if none found.
func (m *FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Total

	if len(errors) > 0 {
		return FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataMultiError(errors)
	}

	return nil
}

// FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataMultiError
// is an error wrapping multiple validation errors returned by
// FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseData.ValidateAll()
// if the designated constraints aren't met.
type FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataMultiError) AllErrors() []error {
	return m
}

// FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError
// is the validation error returned by
// FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseData.Validate
// if the designated constraints aren't met.
type FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError) ErrorName() string {
	return "FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindWishlistItemWithPaginationResponse_FindWishlistItemWithPaginationResponseDataValidationError{}

// Validate checks the field values on
// DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataMultiError,
// or nil if none found.
func (m *DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataMultiError(errors)
	}

	return nil
}

// DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataMultiError
// is an error wrapping multiple validation errors returned by
// DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseData.ValidateAll()
// if the designated constraints aren't met.
type DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataMultiError) AllErrors() []error {
	return m
}

// DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError
// is the validation error returned by
// DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseData.Validate
// if the designated constraints aren't met.
type DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError) ErrorName() string {
	return "DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWishlistItemByIdResponse_DeleteWishlistItemByIdResponseDataValidationError{}
