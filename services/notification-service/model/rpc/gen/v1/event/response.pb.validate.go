// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/event/response.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AppendResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppendResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppendResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppendResponseMultiError,
// or nil if none found.
func (m *AppendResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AppendResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextVersion

	if len(errors) > 0 {
		return AppendResponseMultiError(errors)
	}

	return nil
}

// AppendResponseMultiError is an error wrapping multiple validation errors
// returned by AppendResponse.ValidateAll() if the designated constraints
// aren't met.
type AppendResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppendResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppendResponseMultiError) AllErrors() []error { return m }

// AppendResponseValidationError is the validation error returned by
// AppendResponse.Validate if the designated constraints aren't met.
type AppendResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppendResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppendResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppendResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppendResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppendResponseValidationError) ErrorName() string { return "AppendResponseValidationError" }

// Error satisfies the builtin error interface
func (e AppendResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppendResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppendResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppendResponseValidationError{}

// Validate checks the field values on ReadByAggregateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadByAggregateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadByAggregateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadByAggregateResponseMultiError, or nil if none found.
func (m *ReadByAggregateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadByAggregateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadByAggregateResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadByAggregateResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadByAggregateResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadByAggregateResponseMultiError(errors)
	}

	return nil
}

// ReadByAggregateResponseMultiError is an error wrapping multiple validation
// errors returned by ReadByAggregateResponse.ValidateAll() if the designated
// constraints aren't met.
type ReadByAggregateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadByAggregateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadByAggregateResponseMultiError) AllErrors() []error { return m }

// ReadByAggregateResponseValidationError is the validation error returned by
// ReadByAggregateResponse.Validate if the designated constraints aren't met.
type ReadByAggregateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadByAggregateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadByAggregateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadByAggregateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadByAggregateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadByAggregateResponseValidationError) ErrorName() string {
	return "ReadByAggregateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadByAggregateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadByAggregateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadByAggregateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadByAggregateResponseValidationError{}

// Validate checks the field values on ReadByTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadByTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadByTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadByTypeResponseMultiError, or nil if none found.
func (m *ReadByTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadByTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadByTypeResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadByTypeResponseValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadByTypeResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextAfterId

	if len(errors) > 0 {
		return ReadByTypeResponseMultiError(errors)
	}

	return nil
}

// ReadByTypeResponseMultiError is an error wrapping multiple validation errors
// returned by ReadByTypeResponse.ValidateAll() if the designated constraints
// aren't met.
type ReadByTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadByTypeResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadByTypeResponseMultiError) AllErrors() []error { return m }

// ReadByTypeResponseValidationError is the validation error returned by
// ReadByTypeResponse.Validate if the designated constraints aren't met.
type ReadByTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadByTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadByTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadByTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadByTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadByTypeResponseValidationError) ErrorName() string {
	return "ReadByTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadByTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadByTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadByTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadByTypeResponseValidationError{}

// Validate checks the field values on GetSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSnapshotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSnapshotResponseMultiError, or nil if none found.
func (m *GetSnapshotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSnapshotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSnapshotResponseValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSnapshotResponseValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSnapshotResponseValidationError{
				field:  "Snapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSnapshotResponseMultiError(errors)
	}

	return nil
}

// GetSnapshotResponseMultiError is an error wrapping multiple validation
// errors returned by GetSnapshotResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSnapshotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSnapshotResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSnapshotResponseMultiError) AllErrors() []error { return m }

// GetSnapshotResponseValidationError is the validation error returned by
// GetSnapshotResponse.Validate if the designated constraints aren't met.
type GetSnapshotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSnapshotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSnapshotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSnapshotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSnapshotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSnapshotResponseValidationError) ErrorName() string {
	return "GetSnapshotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSnapshotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSnapshotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSnapshotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSnapshotResponseValidationError{}

// Validate checks the field values on PutSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutSnapshotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutSnapshotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutSnapshotResponseMultiError, or nil if none found.
func (m *PutSnapshotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutSnapshotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PutSnapshotResponseMultiError(errors)
	}

	return nil
}

// PutSnapshotResponseMultiError is an error wrapping multiple validation
// errors returned by PutSnapshotResponse.ValidateAll() if the designated
// constraints aren't met.
type PutSnapshotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutSnapshotResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutSnapshotResponseMultiError) AllErrors() []error { return m }

// PutSnapshotResponseValidationError is the validation error returned by
// PutSnapshotResponse.Validate if the designated constraints aren't met.
type PutSnapshotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutSnapshotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutSnapshotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutSnapshotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutSnapshotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutSnapshotResponseValidationError) ErrorName() string {
	return "PutSnapshotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutSnapshotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutSnapshotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutSnapshotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutSnapshotResponseValidationError{}
