// Code generated by mocktail; DO NOT EDIT.

package postgres

import (
	"database/sql"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// iPostgresSQLMock mock of IPostgresSQL.
type iPostgresSQLMock struct{ mock.Mock }

// NewIPostgresSQLMock creates a new iPostgresSQLMock.
func NewIPostgresSQLMock(tb testing.TB) *iPostgresSQLMock {
	tb.Helper()

	m := &iPostgresSQLMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iPostgresSQLMock) Close() error {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() error); ok {
		return _rf()
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *iPostgresSQLMock) OnClose() *iPostgresSQLCloseCall {
	return &iPostgresSQLCloseCall{Call: _m.Mock.On("Close"), Parent: _m}
}

func (_m *iPostgresSQLMock) OnCloseRaw() *iPostgresSQLCloseCall {
	return &iPostgresSQLCloseCall{Call: _m.Mock.On("Close"), Parent: _m}
}

type iPostgresSQLCloseCall struct {
	*mock.Call
	Parent *iPostgresSQLMock
}

func (_c *iPostgresSQLCloseCall) Panic(msg string) *iPostgresSQLCloseCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iPostgresSQLCloseCall) Once() *iPostgresSQLCloseCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iPostgresSQLCloseCall) Twice() *iPostgresSQLCloseCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iPostgresSQLCloseCall) Times(i int) *iPostgresSQLCloseCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iPostgresSQLCloseCall) WaitUntil(w <-chan time.Time) *iPostgresSQLCloseCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iPostgresSQLCloseCall) After(d time.Duration) *iPostgresSQLCloseCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iPostgresSQLCloseCall) Run(fn func(args mock.Arguments)) *iPostgresSQLCloseCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iPostgresSQLCloseCall) Maybe() *iPostgresSQLCloseCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iPostgresSQLCloseCall) TypedReturns(a error) *iPostgresSQLCloseCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iPostgresSQLCloseCall) ReturnsFn(fn func() error) *iPostgresSQLCloseCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iPostgresSQLCloseCall) TypedRun(fn func()) *iPostgresSQLCloseCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *iPostgresSQLCloseCall) OnClose() *iPostgresSQLCloseCall {
	return _c.Parent.OnClose()
}

func (_c *iPostgresSQLCloseCall) OnGormDB() *iPostgresSQLGormDBCall {
	return _c.Parent.OnGormDB()
}

func (_c *iPostgresSQLCloseCall) OnSqlDB() *iPostgresSQLSqlDBCall {
	return _c.Parent.OnSqlDB()
}

func (_c *iPostgresSQLCloseCall) OnCloseRaw() *iPostgresSQLCloseCall {
	return _c.Parent.OnCloseRaw()
}

func (_c *iPostgresSQLCloseCall) OnGormDBRaw() *iPostgresSQLGormDBCall {
	return _c.Parent.OnGormDBRaw()
}

func (_c *iPostgresSQLCloseCall) OnSqlDBRaw() *iPostgresSQLSqlDBCall {
	return _c.Parent.OnSqlDBRaw()
}

func (_m *iPostgresSQLMock) GormDB() *gorm.DB {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() *gorm.DB); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(*gorm.DB)

	return _ra0
}

func (_m *iPostgresSQLMock) OnGormDB() *iPostgresSQLGormDBCall {
	return &iPostgresSQLGormDBCall{Call: _m.Mock.On("GormDB"), Parent: _m}
}

func (_m *iPostgresSQLMock) OnGormDBRaw() *iPostgresSQLGormDBCall {
	return &iPostgresSQLGormDBCall{Call: _m.Mock.On("GormDB"), Parent: _m}
}

type iPostgresSQLGormDBCall struct {
	*mock.Call
	Parent *iPostgresSQLMock
}

func (_c *iPostgresSQLGormDBCall) Panic(msg string) *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iPostgresSQLGormDBCall) Once() *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iPostgresSQLGormDBCall) Twice() *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iPostgresSQLGormDBCall) Times(i int) *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iPostgresSQLGormDBCall) WaitUntil(w <-chan time.Time) *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iPostgresSQLGormDBCall) After(d time.Duration) *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iPostgresSQLGormDBCall) Run(fn func(args mock.Arguments)) *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iPostgresSQLGormDBCall) Maybe() *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iPostgresSQLGormDBCall) TypedReturns(a *gorm.DB) *iPostgresSQLGormDBCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iPostgresSQLGormDBCall) ReturnsFn(fn func() *gorm.DB) *iPostgresSQLGormDBCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iPostgresSQLGormDBCall) TypedRun(fn func()) *iPostgresSQLGormDBCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *iPostgresSQLGormDBCall) OnClose() *iPostgresSQLCloseCall {
	return _c.Parent.OnClose()
}

func (_c *iPostgresSQLGormDBCall) OnGormDB() *iPostgresSQLGormDBCall {
	return _c.Parent.OnGormDB()
}

func (_c *iPostgresSQLGormDBCall) OnSqlDB() *iPostgresSQLSqlDBCall {
	return _c.Parent.OnSqlDB()
}

func (_c *iPostgresSQLGormDBCall) OnCloseRaw() *iPostgresSQLCloseCall {
	return _c.Parent.OnCloseRaw()
}

func (_c *iPostgresSQLGormDBCall) OnGormDBRaw() *iPostgresSQLGormDBCall {
	return _c.Parent.OnGormDBRaw()
}

func (_c *iPostgresSQLGormDBCall) OnSqlDBRaw() *iPostgresSQLSqlDBCall {
	return _c.Parent.OnSqlDBRaw()
}

func (_m *iPostgresSQLMock) SqlDB() *sql.DB {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() *sql.DB); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(*sql.DB)

	return _ra0
}

func (_m *iPostgresSQLMock) OnSqlDB() *iPostgresSQLSqlDBCall {
	return &iPostgresSQLSqlDBCall{Call: _m.Mock.On("SqlDB"), Parent: _m}
}

func (_m *iPostgresSQLMock) OnSqlDBRaw() *iPostgresSQLSqlDBCall {
	return &iPostgresSQLSqlDBCall{Call: _m.Mock.On("SqlDB"), Parent: _m}
}

type iPostgresSQLSqlDBCall struct {
	*mock.Call
	Parent *iPostgresSQLMock
}

func (_c *iPostgresSQLSqlDBCall) Panic(msg string) *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iPostgresSQLSqlDBCall) Once() *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iPostgresSQLSqlDBCall) Twice() *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iPostgresSQLSqlDBCall) Times(i int) *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iPostgresSQLSqlDBCall) WaitUntil(w <-chan time.Time) *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iPostgresSQLSqlDBCall) After(d time.Duration) *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iPostgresSQLSqlDBCall) Run(fn func(args mock.Arguments)) *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iPostgresSQLSqlDBCall) Maybe() *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iPostgresSQLSqlDBCall) TypedReturns(a *sql.DB) *iPostgresSQLSqlDBCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iPostgresSQLSqlDBCall) ReturnsFn(fn func() *sql.DB) *iPostgresSQLSqlDBCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iPostgresSQLSqlDBCall) TypedRun(fn func()) *iPostgresSQLSqlDBCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *iPostgresSQLSqlDBCall) OnClose() *iPostgresSQLCloseCall {
	return _c.Parent.OnClose()
}

func (_c *iPostgresSQLSqlDBCall) OnGormDB() *iPostgresSQLGormDBCall {
	return _c.Parent.OnGormDB()
}

func (_c *iPostgresSQLSqlDBCall) OnSqlDB() *iPostgresSQLSqlDBCall {
	return _c.Parent.OnSqlDB()
}

func (_c *iPostgresSQLSqlDBCall) OnCloseRaw() *iPostgresSQLCloseCall {
	return _c.Parent.OnCloseRaw()
}

func (_c *iPostgresSQLSqlDBCall) OnGormDBRaw() *iPostgresSQLGormDBCall {
	return _c.Parent.OnGormDBRaw()
}

func (_c *iPostgresSQLSqlDBCall) OnSqlDBRaw() *iPostgresSQLSqlDBCall {
	return _c.Parent.OnSqlDBRaw()
}
