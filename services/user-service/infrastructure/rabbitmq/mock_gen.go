// Code generated by mocktail; DO NOT EDIT.

package rabbitmq

import (
	"context"
	"testing"
	"time"

	"github.com/rabbitmq/amqp091-go"
	"github.com/stretchr/testify/mock"
)

// iRabbitMqInfrastructureMock mock of IRabbitMQInfrastructure.
type iRabbitMqInfrastructureMock struct{ mock.Mock }

// NewIRabbitMqInfrastructureMock creates a new iRabbitMqInfrastructureMock.
func NewIRabbitMqInfrastructureMock(tb testing.TB) *iRabbitMqInfrastructureMock {
	tb.Helper()

	m := &iRabbitMqInfrastructureMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iRabbitMqInfrastructureMock) Close() error {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() error); ok {
		return _rf()
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *iRabbitMqInfrastructureMock) OnClose() *iRabbitMqInfrastructureCloseCall {
	return &iRabbitMqInfrastructureCloseCall{Call: _m.Mock.On("Close"), Parent: _m}
}

func (_m *iRabbitMqInfrastructureMock) OnCloseRaw() *iRabbitMqInfrastructureCloseCall {
	return &iRabbitMqInfrastructureCloseCall{Call: _m.Mock.On("Close"), Parent: _m}
}

type iRabbitMqInfrastructureCloseCall struct {
	*mock.Call
	Parent *iRabbitMqInfrastructureMock
}

func (_c *iRabbitMqInfrastructureCloseCall) Panic(msg string) *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) Once() *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) Twice() *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) Times(i int) *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) WaitUntil(w <-chan time.Time) *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) After(d time.Duration) *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) Run(fn func(args mock.Arguments)) *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) Maybe() *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) TypedReturns(a error) *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) ReturnsFn(fn func() error) *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) TypedRun(fn func()) *iRabbitMqInfrastructureCloseCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *iRabbitMqInfrastructureCloseCall) OnClose() *iRabbitMqInfrastructureCloseCall {
	return _c.Parent.OnClose()
}

func (_c *iRabbitMqInfrastructureCloseCall) OnGetConnection() *iRabbitMqInfrastructureGetConnectionCall {
	return _c.Parent.OnGetConnection()
}

func (_c *iRabbitMqInfrastructureCloseCall) OnPublish(requestId string, exchange string, queue string, message []byte) *iRabbitMqInfrastructurePublishCall {
	return _c.Parent.OnPublish(requestId, exchange, queue, message)
}

func (_c *iRabbitMqInfrastructureCloseCall) OnCloseRaw() *iRabbitMqInfrastructureCloseCall {
	return _c.Parent.OnCloseRaw()
}

func (_c *iRabbitMqInfrastructureCloseCall) OnGetConnectionRaw() *iRabbitMqInfrastructureGetConnectionCall {
	return _c.Parent.OnGetConnectionRaw()
}

func (_c *iRabbitMqInfrastructureCloseCall) OnPublishRaw(requestId interface{}, exchange interface{}, queue interface{}, message interface{}) *iRabbitMqInfrastructurePublishCall {
	return _c.Parent.OnPublishRaw(requestId, exchange, queue, message)
}

func (_m *iRabbitMqInfrastructureMock) GetConnection() *amqp091.Connection {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() *amqp091.Connection); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(*amqp091.Connection)

	return _ra0
}

func (_m *iRabbitMqInfrastructureMock) OnGetConnection() *iRabbitMqInfrastructureGetConnectionCall {
	return &iRabbitMqInfrastructureGetConnectionCall{Call: _m.Mock.On("GetConnection"), Parent: _m}
}

func (_m *iRabbitMqInfrastructureMock) OnGetConnectionRaw() *iRabbitMqInfrastructureGetConnectionCall {
	return &iRabbitMqInfrastructureGetConnectionCall{Call: _m.Mock.On("GetConnection"), Parent: _m}
}

type iRabbitMqInfrastructureGetConnectionCall struct {
	*mock.Call
	Parent *iRabbitMqInfrastructureMock
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) Panic(msg string) *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) Once() *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) Twice() *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) Times(i int) *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) WaitUntil(w <-chan time.Time) *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) After(d time.Duration) *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) Run(fn func(args mock.Arguments)) *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) Maybe() *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) TypedReturns(a *amqp091.Connection) *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) ReturnsFn(fn func() *amqp091.Connection) *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) TypedRun(fn func()) *iRabbitMqInfrastructureGetConnectionCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) OnClose() *iRabbitMqInfrastructureCloseCall {
	return _c.Parent.OnClose()
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) OnGetConnection() *iRabbitMqInfrastructureGetConnectionCall {
	return _c.Parent.OnGetConnection()
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) OnPublish(requestId string, exchange string, queue string, message []byte) *iRabbitMqInfrastructurePublishCall {
	return _c.Parent.OnPublish(requestId, exchange, queue, message)
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) OnCloseRaw() *iRabbitMqInfrastructureCloseCall {
	return _c.Parent.OnCloseRaw()
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) OnGetConnectionRaw() *iRabbitMqInfrastructureGetConnectionCall {
	return _c.Parent.OnGetConnectionRaw()
}

func (_c *iRabbitMqInfrastructureGetConnectionCall) OnPublishRaw(requestId interface{}, exchange interface{}, queue interface{}, message interface{}) *iRabbitMqInfrastructurePublishCall {
	return _c.Parent.OnPublishRaw(requestId, exchange, queue, message)
}

func (_m *iRabbitMqInfrastructureMock) Publish(_ context.Context, requestId string, exchange string, queue string, message []byte) error {
	_ret := _m.Called(requestId, exchange, queue, message)

	if _rf, ok := _ret.Get(0).(func(string, string, string, []byte) error); ok {
		return _rf(requestId, exchange, queue, message)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *iRabbitMqInfrastructureMock) OnPublish(requestId string, exchange string, queue string, message []byte) *iRabbitMqInfrastructurePublishCall {
	return &iRabbitMqInfrastructurePublishCall{Call: _m.Mock.On("Publish", requestId, exchange, queue, message), Parent: _m}
}

func (_m *iRabbitMqInfrastructureMock) OnPublishRaw(requestId interface{}, exchange interface{}, queue interface{}, message interface{}) *iRabbitMqInfrastructurePublishCall {
	return &iRabbitMqInfrastructurePublishCall{Call: _m.Mock.On("Publish", requestId, exchange, queue, message), Parent: _m}
}

type iRabbitMqInfrastructurePublishCall struct {
	*mock.Call
	Parent *iRabbitMqInfrastructureMock
}

func (_c *iRabbitMqInfrastructurePublishCall) Panic(msg string) *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) Once() *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) Twice() *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) Times(i int) *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) WaitUntil(w <-chan time.Time) *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) After(d time.Duration) *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) Run(fn func(args mock.Arguments)) *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) Maybe() *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) TypedReturns(a error) *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) ReturnsFn(fn func(string, string, string, []byte) error) *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) TypedRun(fn func(string, string, string, []byte)) *iRabbitMqInfrastructurePublishCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_exchange := args.String(1)
		_queue := args.String(2)
		_message, _ := args.Get(3).([]byte)
		fn(_requestId, _exchange, _queue, _message)
	})
	return _c
}

func (_c *iRabbitMqInfrastructurePublishCall) OnClose() *iRabbitMqInfrastructureCloseCall {
	return _c.Parent.OnClose()
}

func (_c *iRabbitMqInfrastructurePublishCall) OnGetConnection() *iRabbitMqInfrastructureGetConnectionCall {
	return _c.Parent.OnGetConnection()
}

func (_c *iRabbitMqInfrastructurePublishCall) OnPublish(requestId string, exchange string, queue string, message []byte) *iRabbitMqInfrastructurePublishCall {
	return _c.Parent.OnPublish(requestId, exchange, queue, message)
}

func (_c *iRabbitMqInfrastructurePublishCall) OnCloseRaw() *iRabbitMqInfrastructureCloseCall {
	return _c.Parent.OnCloseRaw()
}

func (_c *iRabbitMqInfrastructurePublishCall) OnGetConnectionRaw() *iRabbitMqInfrastructureGetConnectionCall {
	return _c.Parent.OnGetConnectionRaw()
}

func (_c *iRabbitMqInfrastructurePublishCall) OnPublishRaw(requestId interface{}, exchange interface{}, queue interface{}, message interface{}) *iRabbitMqInfrastructurePublishCall {
	return _c.Parent.OnPublishRaw(requestId, exchange, queue, message)
}
