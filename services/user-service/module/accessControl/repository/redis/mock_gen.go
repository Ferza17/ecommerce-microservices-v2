// Code generated by mocktail; DO NOT EDIT.

package redis

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// iAccessControlRedisRepositoryMock mock of IAccessControlRedisRepository.
type iAccessControlRedisRepositoryMock struct{ mock.Mock }

// NewIAccessControlRedisRepositoryMock creates a new iAccessControlRedisRepositoryMock.
func NewIAccessControlRedisRepositoryMock(tb testing.TB) *iAccessControlRedisRepositoryMock {
	tb.Helper()

	m := &iAccessControlRedisRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iAccessControlRedisRepositoryMock) GetAccessControlHTTP(_ context.Context, requestId string, role string, method string, url string) (bool, error) {
	_ret := _m.Called(requestId, role, method, url)

	if _rf, ok := _ret.Get(0).(func(string, string, string, string) (bool, error)); ok {
		return _rf(requestId, role, method, url)
	}

	_ra0 := _ret.Bool(0)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlRedisRepositoryMock) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return &iAccessControlRedisRepositoryGetAccessControlHTTPCall{Call: _m.Mock.On("GetAccessControlHTTP", requestId, role, method, url), Parent: _m}
}

func (_m *iAccessControlRedisRepositoryMock) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return &iAccessControlRedisRepositoryGetAccessControlHTTPCall{Call: _m.Mock.On("GetAccessControlHTTP", requestId, role, method, url), Parent: _m}
}

type iAccessControlRedisRepositoryGetAccessControlHTTPCall struct {
	*mock.Call
	Parent *iAccessControlRedisRepositoryMock
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) Panic(msg string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) Once() *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) Twice() *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) Times(i int) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) WaitUntil(w <-chan time.Time) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) After(d time.Duration) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) Run(fn func(args mock.Arguments)) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) Maybe() *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) TypedReturns(a bool, b error) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) ReturnsFn(fn func(string, string, string, string) (bool, error)) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) TypedRun(fn func(string, string, string, string)) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_role := args.String(1)
		_method := args.String(2)
		_url := args.String(3)
		fn(_requestId, _role, _method, _url)
	})
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPCall) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_m *iAccessControlRedisRepositoryMock) GetAccessControlHTTPExcluded(_ context.Context, requestId string, method string, url string) (bool, error) {
	_ret := _m.Called(requestId, method, url)

	if _rf, ok := _ret.Get(0).(func(string, string, string) (bool, error)); ok {
		return _rf(requestId, method, url)
	}

	_ra0 := _ret.Bool(0)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlRedisRepositoryMock) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return &iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall{Call: _m.Mock.On("GetAccessControlHTTPExcluded", requestId, method, url), Parent: _m}
}

func (_m *iAccessControlRedisRepositoryMock) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return &iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall{Call: _m.Mock.On("GetAccessControlHTTPExcluded", requestId, method, url), Parent: _m}
}

type iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall struct {
	*mock.Call
	Parent *iAccessControlRedisRepositoryMock
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) Panic(msg string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) Once() *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) Twice() *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) Times(i int) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) WaitUntil(w <-chan time.Time) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) After(d time.Duration) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) Run(fn func(args mock.Arguments)) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) Maybe() *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) TypedReturns(a bool, b error) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) ReturnsFn(fn func(string, string, string) (bool, error)) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) TypedRun(fn func(string, string, string)) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_method := args.String(1)
		_url := args.String(2)
		fn(_requestId, _method, _url)
	})
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_m *iAccessControlRedisRepositoryMock) GetAccessControlRPC(_ context.Context, requestId string, role string, fullMethodName string) (bool, error) {
	_ret := _m.Called(requestId, role, fullMethodName)

	if _rf, ok := _ret.Get(0).(func(string, string, string) (bool, error)); ok {
		return _rf(requestId, role, fullMethodName)
	}

	_ra0 := _ret.Bool(0)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlRedisRepositoryMock) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return &iAccessControlRedisRepositoryGetAccessControlRPCCall{Call: _m.Mock.On("GetAccessControlRPC", requestId, role, fullMethodName), Parent: _m}
}

func (_m *iAccessControlRedisRepositoryMock) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return &iAccessControlRedisRepositoryGetAccessControlRPCCall{Call: _m.Mock.On("GetAccessControlRPC", requestId, role, fullMethodName), Parent: _m}
}

type iAccessControlRedisRepositoryGetAccessControlRPCCall struct {
	*mock.Call
	Parent *iAccessControlRedisRepositoryMock
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) Panic(msg string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) Once() *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) Twice() *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) Times(i int) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) WaitUntil(w <-chan time.Time) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) After(d time.Duration) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) Run(fn func(args mock.Arguments)) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) Maybe() *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) TypedReturns(a bool, b error) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) ReturnsFn(fn func(string, string, string) (bool, error)) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) TypedRun(fn func(string, string, string)) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_role := args.String(1)
		_fullMethodName := args.String(2)
		fn(_requestId, _role, _fullMethodName)
	})
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCCall) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_m *iAccessControlRedisRepositoryMock) GetAccessControlRPCExcluded(_ context.Context, requestId string, fullMethodName string) (bool, error) {
	_ret := _m.Called(requestId, fullMethodName)

	if _rf, ok := _ret.Get(0).(func(string, string) (bool, error)); ok {
		return _rf(requestId, fullMethodName)
	}

	_ra0 := _ret.Bool(0)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlRedisRepositoryMock) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return &iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall{Call: _m.Mock.On("GetAccessControlRPCExcluded", requestId, fullMethodName), Parent: _m}
}

func (_m *iAccessControlRedisRepositoryMock) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return &iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall{Call: _m.Mock.On("GetAccessControlRPCExcluded", requestId, fullMethodName), Parent: _m}
}

type iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall struct {
	*mock.Call
	Parent *iAccessControlRedisRepositoryMock
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) Panic(msg string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) Once() *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) Twice() *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) Times(i int) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) WaitUntil(w <-chan time.Time) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) After(d time.Duration) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) Run(fn func(args mock.Arguments)) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) Maybe() *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) TypedReturns(a bool, b error) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) ReturnsFn(fn func(string, string) (bool, error)) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) TypedRun(fn func(string, string)) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_fullMethodName := args.String(1)
		fn(_requestId, _fullMethodName)
	})
	return _c
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_m *iAccessControlRedisRepositoryMock) SetAccessControlHTTP(_ context.Context, requestId string, role string, method string, url string) error {
	_ret := _m.Called(requestId, role, method, url)

	if _rf, ok := _ret.Get(0).(func(string, string, string, string) error); ok {
		return _rf(requestId, role, method, url)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *iAccessControlRedisRepositoryMock) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return &iAccessControlRedisRepositorySetAccessControlHTTPCall{Call: _m.Mock.On("SetAccessControlHTTP", requestId, role, method, url), Parent: _m}
}

func (_m *iAccessControlRedisRepositoryMock) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return &iAccessControlRedisRepositorySetAccessControlHTTPCall{Call: _m.Mock.On("SetAccessControlHTTP", requestId, role, method, url), Parent: _m}
}

type iAccessControlRedisRepositorySetAccessControlHTTPCall struct {
	*mock.Call
	Parent *iAccessControlRedisRepositoryMock
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) Panic(msg string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) Once() *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) Twice() *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) Times(i int) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) WaitUntil(w <-chan time.Time) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) After(d time.Duration) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) Run(fn func(args mock.Arguments)) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) Maybe() *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) TypedReturns(a error) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) ReturnsFn(fn func(string, string, string, string) error) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) TypedRun(fn func(string, string, string, string)) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_role := args.String(1)
		_method := args.String(2)
		_url := args.String(3)
		fn(_requestId, _role, _method, _url)
	})
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPCall) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_m *iAccessControlRedisRepositoryMock) SetAccessControlHTTPExcluded(_ context.Context, requestId string, method string, url string) error {
	_ret := _m.Called(requestId, method, url)

	if _rf, ok := _ret.Get(0).(func(string, string, string) error); ok {
		return _rf(requestId, method, url)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *iAccessControlRedisRepositoryMock) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return &iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall{Call: _m.Mock.On("SetAccessControlHTTPExcluded", requestId, method, url), Parent: _m}
}

func (_m *iAccessControlRedisRepositoryMock) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return &iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall{Call: _m.Mock.On("SetAccessControlHTTPExcluded", requestId, method, url), Parent: _m}
}

type iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall struct {
	*mock.Call
	Parent *iAccessControlRedisRepositoryMock
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) Panic(msg string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) Once() *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) Twice() *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) Times(i int) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) WaitUntil(w <-chan time.Time) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) After(d time.Duration) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) Run(fn func(args mock.Arguments)) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) Maybe() *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) TypedReturns(a error) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) ReturnsFn(fn func(string, string, string) error) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) TypedRun(fn func(string, string, string)) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_method := args.String(1)
		_url := args.String(2)
		fn(_requestId, _method, _url)
	})
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_m *iAccessControlRedisRepositoryMock) SetAccessControlRPC(_ context.Context, requestId string, role string, fullMethodName string) error {
	_ret := _m.Called(requestId, role, fullMethodName)

	if _rf, ok := _ret.Get(0).(func(string, string, string) error); ok {
		return _rf(requestId, role, fullMethodName)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *iAccessControlRedisRepositoryMock) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return &iAccessControlRedisRepositorySetAccessControlRPCCall{Call: _m.Mock.On("SetAccessControlRPC", requestId, role, fullMethodName), Parent: _m}
}

func (_m *iAccessControlRedisRepositoryMock) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return &iAccessControlRedisRepositorySetAccessControlRPCCall{Call: _m.Mock.On("SetAccessControlRPC", requestId, role, fullMethodName), Parent: _m}
}

type iAccessControlRedisRepositorySetAccessControlRPCCall struct {
	*mock.Call
	Parent *iAccessControlRedisRepositoryMock
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) Panic(msg string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) Once() *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) Twice() *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) Times(i int) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) WaitUntil(w <-chan time.Time) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) After(d time.Duration) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) Run(fn func(args mock.Arguments)) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) Maybe() *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) TypedReturns(a error) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) ReturnsFn(fn func(string, string, string) error) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) TypedRun(fn func(string, string, string)) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_role := args.String(1)
		_fullMethodName := args.String(2)
		fn(_requestId, _role, _fullMethodName)
	})
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCCall) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_m *iAccessControlRedisRepositoryMock) SetAccessControlRPCExcluded(_ context.Context, requestId string, fullMethodName string) error {
	_ret := _m.Called(requestId, fullMethodName)

	if _rf, ok := _ret.Get(0).(func(string, string) error); ok {
		return _rf(requestId, fullMethodName)
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *iAccessControlRedisRepositoryMock) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return &iAccessControlRedisRepositorySetAccessControlRPCExcludedCall{Call: _m.Mock.On("SetAccessControlRPCExcluded", requestId, fullMethodName), Parent: _m}
}

func (_m *iAccessControlRedisRepositoryMock) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return &iAccessControlRedisRepositorySetAccessControlRPCExcludedCall{Call: _m.Mock.On("SetAccessControlRPCExcluded", requestId, fullMethodName), Parent: _m}
}

type iAccessControlRedisRepositorySetAccessControlRPCExcludedCall struct {
	*mock.Call
	Parent *iAccessControlRedisRepositoryMock
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) Panic(msg string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) Once() *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) Twice() *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) Times(i int) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) WaitUntil(w <-chan time.Time) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) After(d time.Duration) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) Run(fn func(args mock.Arguments)) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) Maybe() *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) TypedReturns(a error) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) ReturnsFn(fn func(string, string) error) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) TypedRun(fn func(string, string)) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_fullMethodName := args.String(1)
		fn(_requestId, _fullMethodName)
	})
	return _c
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnGetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnGetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnGetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnGetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnSetAccessControlHTTP(requestId string, role string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTP(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnSetAccessControlHTTPExcluded(requestId string, method string, url string) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcluded(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnSetAccessControlRPC(requestId string, role string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPC(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnSetAccessControlRPCExcluded(requestId string, fullMethodName string) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcluded(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnGetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPCall {
	return _c.Parent.OnGetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnGetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositoryGetAccessControlHTTPExcludedCall {
	return _c.Parent.OnGetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnGetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCCall {
	return _c.Parent.OnGetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnGetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositoryGetAccessControlRPCExcludedCall {
	return _c.Parent.OnGetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnSetAccessControlHTTPRaw(requestId interface{}, role interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPCall {
	return _c.Parent.OnSetAccessControlHTTPRaw(requestId, role, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnSetAccessControlHTTPExcludedRaw(requestId interface{}, method interface{}, url interface{}) *iAccessControlRedisRepositorySetAccessControlHTTPExcludedCall {
	return _c.Parent.OnSetAccessControlHTTPExcludedRaw(requestId, method, url)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnSetAccessControlRPCRaw(requestId interface{}, role interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCCall {
	return _c.Parent.OnSetAccessControlRPCRaw(requestId, role, fullMethodName)
}

func (_c *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall) OnSetAccessControlRPCExcludedRaw(requestId interface{}, fullMethodName interface{}) *iAccessControlRedisRepositorySetAccessControlRPCExcludedCall {
	return _c.Parent.OnSetAccessControlRPCExcludedRaw(requestId, fullMethodName)
}
