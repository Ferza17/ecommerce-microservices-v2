// Code generated by mocktail; DO NOT EDIT.

package postgres

import (
	"context"
	"testing"
	"time"

	"github.com/ferza17/ecommerce-microservices-v2/user-service/model/orm"
	"github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// iAccessControlPostgresqlRepositoryMock mock of IAccessControlPostgresqlRepository.
type iAccessControlPostgresqlRepositoryMock struct{ mock.Mock }

// NewIAccessControlPostgresqlRepositoryMock creates a new iAccessControlPostgresqlRepositoryMock.
func NewIAccessControlPostgresqlRepositoryMock(tb testing.TB) *iAccessControlPostgresqlRepositoryMock {
	tb.Helper()

	m := &iAccessControlPostgresqlRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iAccessControlPostgresqlRepositoryMock) CreateAccessControl(_ context.Context, requestId string, accessControl *orm.AccessControl, tx *gorm.DB) (*orm.AccessControl, error) {
	_ret := _m.Called(requestId, accessControl, tx)

	if _rf, ok := _ret.Get(0).(func(string, *orm.AccessControl, *gorm.DB) (*orm.AccessControl, error)); ok {
		return _rf(requestId, accessControl, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControl)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return &iAccessControlPostgresqlRepositoryCreateAccessControlCall{Call: _m.Mock.On("CreateAccessControl", requestId, accessControl, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return &iAccessControlPostgresqlRepositoryCreateAccessControlCall{Call: _m.Mock.On("CreateAccessControl", requestId, accessControl, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryCreateAccessControlCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) Panic(msg string) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) Once() *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) Twice() *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) Times(i int) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) Maybe() *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) TypedReturns(a *orm.AccessControl, b error) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) ReturnsFn(fn func(string, *orm.AccessControl, *gorm.DB) (*orm.AccessControl, error)) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) TypedRun(fn func(string, *orm.AccessControl, *gorm.DB)) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_accessControl, _ := args.Get(1).(*orm.AccessControl)
		_tx, _ := args.Get(2).(*gorm.DB)
		fn(_requestId, _accessControl, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}

func (_m *iAccessControlPostgresqlRepositoryMock) CreateAccessControlExcluded(_ context.Context, requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) (*orm.AccessControlExcluded, error) {
	_ret := _m.Called(requestId, accessControlExcluded, tx)

	if _rf, ok := _ret.Get(0).(func(string, *orm.AccessControlExcluded, *gorm.DB) (*orm.AccessControlExcluded, error)); ok {
		return _rf(requestId, accessControlExcluded, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControlExcluded)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return &iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall{Call: _m.Mock.On("CreateAccessControlExcluded", requestId, accessControlExcluded, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return &iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall{Call: _m.Mock.On("CreateAccessControlExcluded", requestId, accessControlExcluded, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) Panic(msg string) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) Once() *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) Twice() *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) Times(i int) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) Maybe() *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) TypedReturns(a *orm.AccessControlExcluded, b error) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) ReturnsFn(fn func(string, *orm.AccessControlExcluded, *gorm.DB) (*orm.AccessControlExcluded, error)) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) TypedRun(fn func(string, *orm.AccessControlExcluded, *gorm.DB)) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_accessControlExcluded, _ := args.Get(1).(*orm.AccessControlExcluded)
		_tx, _ := args.Get(2).(*gorm.DB)
		fn(_requestId, _accessControlExcluded, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}

func (_m *iAccessControlPostgresqlRepositoryMock) FindAccessControlByRoleAndFullMethodName(_ context.Context, requestId string, role string, fullMethodName string, tx *gorm.DB) (*orm.AccessControl, error) {
	_ret := _m.Called(requestId, role, fullMethodName, tx)

	if _rf, ok := _ret.Get(0).(func(string, string, string, *gorm.DB) (*orm.AccessControl, error)); ok {
		return _rf(requestId, role, fullMethodName, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControl)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall{Call: _m.Mock.On("FindAccessControlByRoleAndFullMethodName", requestId, role, fullMethodName, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall{Call: _m.Mock.On("FindAccessControlByRoleAndFullMethodName", requestId, role, fullMethodName, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) Panic(msg string) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) Once() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) Twice() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) Times(i int) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) Maybe() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) TypedReturns(a *orm.AccessControl, b error) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) ReturnsFn(fn func(string, string, string, *gorm.DB) (*orm.AccessControl, error)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) TypedRun(fn func(string, string, string, *gorm.DB)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_role := args.String(1)
		_fullMethodName := args.String(2)
		_tx, _ := args.Get(3).(*gorm.DB)
		fn(_requestId, _role, _fullMethodName, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}

func (_m *iAccessControlPostgresqlRepositoryMock) FindAccessControlByRoleAndHttpMethodAndHttpUrl(_ context.Context, requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) (*orm.AccessControl, error) {
	_ret := _m.Called(requestId, role, httpMethod, httpUrl, tx)

	if _rf, ok := _ret.Get(0).(func(string, string, string, string, *gorm.DB) (*orm.AccessControl, error)); ok {
		return _rf(requestId, role, httpMethod, httpUrl, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControl)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall{Call: _m.Mock.On("FindAccessControlByRoleAndHttpMethodAndHttpUrl", requestId, role, httpMethod, httpUrl, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall{Call: _m.Mock.On("FindAccessControlByRoleAndHttpMethodAndHttpUrl", requestId, role, httpMethod, httpUrl, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) Panic(msg string) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) Once() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) Twice() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) Times(i int) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) Maybe() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) TypedReturns(a *orm.AccessControl, b error) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) ReturnsFn(fn func(string, string, string, string, *gorm.DB) (*orm.AccessControl, error)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) TypedRun(fn func(string, string, string, string, *gorm.DB)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_role := args.String(1)
		_httpMethod := args.String(2)
		_httpUrl := args.String(3)
		_tx, _ := args.Get(4).(*gorm.DB)
		fn(_requestId, _role, _httpMethod, _httpUrl, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}

func (_m *iAccessControlPostgresqlRepositoryMock) FindAccessControlByRoleIdAndFullMethodName(_ context.Context, requestId string, roleId string, fullMethodName string, tx *gorm.DB) (*orm.AccessControl, error) {
	_ret := _m.Called(requestId, roleId, fullMethodName, tx)

	if _rf, ok := _ret.Get(0).(func(string, string, string, *gorm.DB) (*orm.AccessControl, error)); ok {
		return _rf(requestId, roleId, fullMethodName, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControl)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall{Call: _m.Mock.On("FindAccessControlByRoleIdAndFullMethodName", requestId, roleId, fullMethodName, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall{Call: _m.Mock.On("FindAccessControlByRoleIdAndFullMethodName", requestId, roleId, fullMethodName, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) Panic(msg string) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) Once() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) Twice() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) Times(i int) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) Maybe() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) TypedReturns(a *orm.AccessControl, b error) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) ReturnsFn(fn func(string, string, string, *gorm.DB) (*orm.AccessControl, error)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) TypedRun(fn func(string, string, string, *gorm.DB)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_roleId := args.String(1)
		_fullMethodName := args.String(2)
		_tx, _ := args.Get(3).(*gorm.DB)
		fn(_requestId, _roleId, _fullMethodName, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}

func (_m *iAccessControlPostgresqlRepositoryMock) FindAccessControlByRoleIdAndHttpMethodAndHttpUrl(_ context.Context, requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) (*orm.AccessControl, error) {
	_ret := _m.Called(requestId, roleId, httpMethod, httpUrl, tx)

	if _rf, ok := _ret.Get(0).(func(string, string, string, string, *gorm.DB) (*orm.AccessControl, error)); ok {
		return _rf(requestId, roleId, httpMethod, httpUrl, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControl)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall{Call: _m.Mock.On("FindAccessControlByRoleIdAndHttpMethodAndHttpUrl", requestId, roleId, httpMethod, httpUrl, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall{Call: _m.Mock.On("FindAccessControlByRoleIdAndHttpMethodAndHttpUrl", requestId, roleId, httpMethod, httpUrl, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) Panic(msg string) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) Once() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) Twice() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) Times(i int) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) Maybe() *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) TypedReturns(a *orm.AccessControl, b error) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) ReturnsFn(fn func(string, string, string, string, *gorm.DB) (*orm.AccessControl, error)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) TypedRun(fn func(string, string, string, string, *gorm.DB)) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_roleId := args.String(1)
		_httpMethod := args.String(2)
		_httpUrl := args.String(3)
		_tx, _ := args.Get(4).(*gorm.DB)
		fn(_requestId, _roleId, _httpMethod, _httpUrl, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}

func (_m *iAccessControlPostgresqlRepositoryMock) FindAccessControlExcludedByFullMethodName(_ context.Context, requestId string, fullMethodName string, tx *gorm.DB) (*orm.AccessControlExcluded, error) {
	_ret := _m.Called(requestId, fullMethodName, tx)

	if _rf, ok := _ret.Get(0).(func(string, string, *gorm.DB) (*orm.AccessControlExcluded, error)); ok {
		return _rf(requestId, fullMethodName, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControlExcluded)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall{Call: _m.Mock.On("FindAccessControlExcludedByFullMethodName", requestId, fullMethodName, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall{Call: _m.Mock.On("FindAccessControlExcludedByFullMethodName", requestId, fullMethodName, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) Panic(msg string) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) Once() *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) Twice() *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) Times(i int) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) Maybe() *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) TypedReturns(a *orm.AccessControlExcluded, b error) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) ReturnsFn(fn func(string, string, *gorm.DB) (*orm.AccessControlExcluded, error)) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) TypedRun(fn func(string, string, *gorm.DB)) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_fullMethodName := args.String(1)
		_tx, _ := args.Get(2).(*gorm.DB)
		fn(_requestId, _fullMethodName, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}

func (_m *iAccessControlPostgresqlRepositoryMock) FindAccessControlExcludedByHttpUrlAndHttpMethod(_ context.Context, requestId string, method string, url string, tx *gorm.DB) (*orm.AccessControlExcluded, error) {
	_ret := _m.Called(requestId, method, url, tx)

	if _rf, ok := _ret.Get(0).(func(string, string, string, *gorm.DB) (*orm.AccessControlExcluded, error)); ok {
		return _rf(requestId, method, url, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControlExcluded)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall{Call: _m.Mock.On("FindAccessControlExcludedByHttpUrlAndHttpMethod", requestId, method, url, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return &iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall{Call: _m.Mock.On("FindAccessControlExcludedByHttpUrlAndHttpMethod", requestId, method, url, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) Panic(msg string) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) Once() *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) Twice() *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) Times(i int) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) Maybe() *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) TypedReturns(a *orm.AccessControlExcluded, b error) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) ReturnsFn(fn func(string, string, string, *gorm.DB) (*orm.AccessControlExcluded, error)) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) TypedRun(fn func(string, string, string, *gorm.DB)) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_method := args.String(1)
		_url := args.String(2)
		_tx, _ := args.Get(3).(*gorm.DB)
		fn(_requestId, _method, _url, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}

func (_m *iAccessControlPostgresqlRepositoryMock) UpdateAccessControlById(_ context.Context, requestId string, accessControl *orm.AccessControl, tx *gorm.DB) (*orm.AccessControl, error) {
	_ret := _m.Called(requestId, accessControl, tx)

	if _rf, ok := _ret.Get(0).(func(string, *orm.AccessControl, *gorm.DB) (*orm.AccessControl, error)); ok {
		return _rf(requestId, accessControl, tx)
	}

	_ra0, _ := _ret.Get(0).(*orm.AccessControl)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return &iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall{Call: _m.Mock.On("UpdateAccessControlById", requestId, accessControl, tx), Parent: _m}
}

func (_m *iAccessControlPostgresqlRepositoryMock) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return &iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall{Call: _m.Mock.On("UpdateAccessControlById", requestId, accessControl, tx), Parent: _m}
}

type iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall struct {
	*mock.Call
	Parent *iAccessControlPostgresqlRepositoryMock
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) Panic(msg string) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) Once() *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) Twice() *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) Times(i int) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) WaitUntil(w <-chan time.Time) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) After(d time.Duration) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) Run(fn func(args mock.Arguments)) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) Maybe() *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) TypedReturns(a *orm.AccessControl, b error) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) ReturnsFn(fn func(string, *orm.AccessControl, *gorm.DB) (*orm.AccessControl, error)) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) TypedRun(fn func(string, *orm.AccessControl, *gorm.DB)) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_accessControl, _ := args.Get(1).(*orm.AccessControl)
		_tx, _ := args.Get(2).(*gorm.DB)
		fn(_requestId, _accessControl, _tx)
	})
	return _c
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnCreateAccessControl(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControl(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnCreateAccessControlExcluded(requestId string, accessControlExcluded *orm.AccessControlExcluded, tx *gorm.DB) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcluded(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlByRoleAndFullMethodName(requestId string, role string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodName(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId string, role string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrl(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlByRoleIdAndFullMethodName(requestId string, roleId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodName(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId string, roleId string, httpMethod string, httpUrl string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrl(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlExcludedByFullMethodName(requestId string, fullMethodName string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodName(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId string, method string, url string, tx *gorm.DB) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethod(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnUpdateAccessControlById(requestId string, accessControl *orm.AccessControl, tx *gorm.DB) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlById(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnCreateAccessControlRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlCall {
	return _c.Parent.OnCreateAccessControlRaw(requestId, accessControl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnCreateAccessControlExcludedRaw(requestId interface{}, accessControlExcluded interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryCreateAccessControlExcludedCall {
	return _c.Parent.OnCreateAccessControlExcludedRaw(requestId, accessControlExcluded, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlByRoleAndFullMethodNameRaw(requestId interface{}, role interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleAndFullMethodNameRaw(requestId, role, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId interface{}, role interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleAndHttpMethodAndHttpUrlRaw(requestId, role, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId interface{}, roleId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndFullMethodNameCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndFullMethodNameRaw(requestId, roleId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId interface{}, roleId interface{}, httpMethod interface{}, httpUrl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlByRoleIdAndHttpMethodAndHttpUrlCall {
	return _c.Parent.OnFindAccessControlByRoleIdAndHttpMethodAndHttpUrlRaw(requestId, roleId, httpMethod, httpUrl, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlExcludedByFullMethodNameRaw(requestId interface{}, fullMethodName interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByFullMethodNameCall {
	return _c.Parent.OnFindAccessControlExcludedByFullMethodNameRaw(requestId, fullMethodName, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId interface{}, method interface{}, url interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryFindAccessControlExcludedByHttpUrlAndHttpMethodCall {
	return _c.Parent.OnFindAccessControlExcludedByHttpUrlAndHttpMethodRaw(requestId, method, url, tx)
}

func (_c *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall) OnUpdateAccessControlByIdRaw(requestId interface{}, accessControl interface{}, tx interface{}) *iAccessControlPostgresqlRepositoryUpdateAccessControlByIdCall {
	return _c.Parent.OnUpdateAccessControlByIdRaw(requestId, accessControl, tx)
}
