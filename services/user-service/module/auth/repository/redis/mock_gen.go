// Code generated by mocktail; DO NOT EDIT.

package redis

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
)

// iAuthRedisRepositoryMock mock of IAuthRedisRepository.
type iAuthRedisRepositoryMock struct{ mock.Mock }

// NewIAuthRedisRepositoryMock creates a new iAuthRedisRepositoryMock.
func NewIAuthRedisRepositoryMock(tb testing.TB) *iAuthRedisRepositoryMock {
	tb.Helper()

	m := &iAuthRedisRepositoryMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iAuthRedisRepositoryMock) GetOtp(_ context.Context, requestId string, otp string) (*string, error) {
	_ret := _m.Called(requestId, otp)

	if _rf, ok := _ret.Get(0).(func(string, string) (*string, error)); ok {
		return _rf(requestId, otp)
	}

	_ra0, _ := _ret.Get(0).(*string)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAuthRedisRepositoryMock) OnGetOtp(requestId string, otp string) *iAuthRedisRepositoryGetOtpCall {
	return &iAuthRedisRepositoryGetOtpCall{Call: _m.Mock.On("GetOtp", requestId, otp), Parent: _m}
}

func (_m *iAuthRedisRepositoryMock) OnGetOtpRaw(requestId interface{}, otp interface{}) *iAuthRedisRepositoryGetOtpCall {
	return &iAuthRedisRepositoryGetOtpCall{Call: _m.Mock.On("GetOtp", requestId, otp), Parent: _m}
}

type iAuthRedisRepositoryGetOtpCall struct {
	*mock.Call
	Parent *iAuthRedisRepositoryMock
}

func (_c *iAuthRedisRepositoryGetOtpCall) Panic(msg string) *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) Once() *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) Twice() *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) Times(i int) *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) WaitUntil(w <-chan time.Time) *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) After(d time.Duration) *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) Run(fn func(args mock.Arguments)) *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) Maybe() *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) TypedReturns(a *string, b error) *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) ReturnsFn(fn func(string, string) (*string, error)) *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) TypedRun(fn func(string, string)) *iAuthRedisRepositoryGetOtpCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_otp := args.String(1)
		fn(_requestId, _otp)
	})
	return _c
}

func (_c *iAuthRedisRepositoryGetOtpCall) OnGetOtp(requestId string, otp string) *iAuthRedisRepositoryGetOtpCall {
	return _c.Parent.OnGetOtp(requestId, otp)
}

func (_c *iAuthRedisRepositoryGetOtpCall) OnSetOtp(requestId string, otp string, value string) *iAuthRedisRepositorySetOtpCall {
	return _c.Parent.OnSetOtp(requestId, otp, value)
}

func (_c *iAuthRedisRepositoryGetOtpCall) OnGetOtpRaw(requestId interface{}, otp interface{}) *iAuthRedisRepositoryGetOtpCall {
	return _c.Parent.OnGetOtpRaw(requestId, otp)
}

func (_c *iAuthRedisRepositoryGetOtpCall) OnSetOtpRaw(requestId interface{}, otp interface{}, value interface{}) *iAuthRedisRepositorySetOtpCall {
	return _c.Parent.OnSetOtpRaw(requestId, otp, value)
}

func (_m *iAuthRedisRepositoryMock) SetOtp(_ context.Context, requestId string, otp string, value string) error {
	_ret := _m.Called(requestId, otp, value)

	if _rf, ok := _ret.Get(0).(func(string, string, string) error); ok {
		return _rf(requestId, otp, value)
	}

	err := _ret.Error(0)

	return err
}

func (_m *iAuthRedisRepositoryMock) OnSetOtp(requestId string, otp string, value string) *iAuthRedisRepositorySetOtpCall {
	return &iAuthRedisRepositorySetOtpCall{Call: _m.Mock.On("SetOtp", requestId, otp, value), Parent: _m}
}

func (_m *iAuthRedisRepositoryMock) OnSetOtpRaw(requestId interface{}, otp interface{}, value interface{}) *iAuthRedisRepositorySetOtpCall {
	return &iAuthRedisRepositorySetOtpCall{Call: _m.Mock.On("SetOtp", requestId, otp, value), Parent: _m}
}

type iAuthRedisRepositorySetOtpCall struct {
	*mock.Call
	Parent *iAuthRedisRepositoryMock
}

func (_c *iAuthRedisRepositorySetOtpCall) Panic(msg string) *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) Once() *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) Twice() *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) Times(i int) *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) WaitUntil(w <-chan time.Time) *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) After(d time.Duration) *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) Run(fn func(args mock.Arguments)) *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) Maybe() *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) TypedReturns(a error) *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) ReturnsFn(fn func(string, string, string) error) *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) TypedRun(fn func(string, string, string)) *iAuthRedisRepositorySetOtpCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_otp := args.String(1)
		_value := args.String(2)
		fn(_requestId, _otp, _value)
	})
	return _c
}

func (_c *iAuthRedisRepositorySetOtpCall) OnGetOtp(requestId string, otp string) *iAuthRedisRepositoryGetOtpCall {
	return _c.Parent.OnGetOtp(requestId, otp)
}

func (_c *iAuthRedisRepositorySetOtpCall) OnSetOtp(requestId string, otp string, value string) *iAuthRedisRepositorySetOtpCall {
	return _c.Parent.OnSetOtp(requestId, otp, value)
}

func (_c *iAuthRedisRepositorySetOtpCall) OnGetOtpRaw(requestId interface{}, otp interface{}) *iAuthRedisRepositoryGetOtpCall {
	return _c.Parent.OnGetOtpRaw(requestId, otp)
}

func (_c *iAuthRedisRepositorySetOtpCall) OnSetOtpRaw(requestId interface{}, otp interface{}, value interface{}) *iAuthRedisRepositorySetOtpCall {
	return _c.Parent.OnSetOtpRaw(requestId, otp, value)
}
