// Code generated by mocktail; DO NOT EDIT.

package usecase

import (
	"context"
	"testing"
	"time"

	"github.com/ferza17/ecommerce-microservices-v2/user-service/model/rpc/gen/v1/user"
	"github.com/stretchr/testify/mock"
	"google.golang.org/protobuf/types/known/emptypb"
)

// iAuthUseCaseMock mock of IAuthUseCase.
type iAuthUseCaseMock struct{ mock.Mock }

// NewIAuthUseCaseMock creates a new iAuthUseCaseMock.
func NewIAuthUseCaseMock(tb testing.TB) *iAuthUseCaseMock {
	tb.Helper()

	m := &iAuthUseCaseMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iAuthUseCaseMock) AuthServiceVerifyIsExcluded(_ context.Context, requestId string, req *user.AuthServiceVerifyIsExcludedRequest) (*user.AuthServiceVerifyIsExcludedResponse, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.AuthServiceVerifyIsExcludedRequest) (*user.AuthServiceVerifyIsExcludedResponse, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*user.AuthServiceVerifyIsExcludedResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAuthUseCaseMock) OnAuthServiceVerifyIsExcluded(requestId string, req *user.AuthServiceVerifyIsExcludedRequest) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return &iAuthUseCaseAuthServiceVerifyIsExcludedCall{Call: _m.Mock.On("AuthServiceVerifyIsExcluded", requestId, req), Parent: _m}
}

func (_m *iAuthUseCaseMock) OnAuthServiceVerifyIsExcludedRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return &iAuthUseCaseAuthServiceVerifyIsExcludedCall{Call: _m.Mock.On("AuthServiceVerifyIsExcluded", requestId, req), Parent: _m}
}

type iAuthUseCaseAuthServiceVerifyIsExcludedCall struct {
	*mock.Call
	Parent *iAuthUseCaseMock
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) Panic(msg string) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) Once() *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) Twice() *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) Times(i int) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) WaitUntil(w <-chan time.Time) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) After(d time.Duration) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) Run(fn func(args mock.Arguments)) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) Maybe() *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) TypedReturns(a *user.AuthServiceVerifyIsExcludedResponse, b error) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) ReturnsFn(fn func(string, *user.AuthServiceVerifyIsExcludedRequest) (*user.AuthServiceVerifyIsExcludedResponse, error)) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) TypedRun(fn func(string, *user.AuthServiceVerifyIsExcludedRequest)) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.AuthServiceVerifyIsExcludedRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthServiceVerifyIsExcluded(requestId string, req *user.AuthServiceVerifyIsExcludedRequest) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcluded(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserFindUserByToken(requestId string, req *user.AuthUserFindUserByTokenRequest) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserLoginByEmailAndPassword(requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPassword(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserLogoutByToken(requestId string, req *user.AuthUserLogoutByTokenRequest) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserRegister(requestId string, req *user.AuthUserRegisterRequest) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegister(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserVerifyAccessControl(requestId string, req *user.AuthUserVerifyAccessControlRequest) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControl(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserVerifyOtp(requestId string, req *user.AuthUserVerifyOtpRequest) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtp(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthServiceVerifyIsExcludedRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcludedRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserFindUserByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserLoginByEmailAndPasswordRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPasswordRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserLogoutByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserRegisterRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegisterRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserVerifyAccessControlRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControlRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthServiceVerifyIsExcludedCall) OnAuthUserVerifyOtpRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtpRaw(requestId, req)
}

func (_m *iAuthUseCaseMock) AuthUserFindUserByToken(_ context.Context, requestId string, req *user.AuthUserFindUserByTokenRequest) (*user.AuthUserFindUserByTokenResponse, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.AuthUserFindUserByTokenRequest) (*user.AuthUserFindUserByTokenResponse, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*user.AuthUserFindUserByTokenResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAuthUseCaseMock) OnAuthUserFindUserByToken(requestId string, req *user.AuthUserFindUserByTokenRequest) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return &iAuthUseCaseAuthUserFindUserByTokenCall{Call: _m.Mock.On("AuthUserFindUserByToken", requestId, req), Parent: _m}
}

func (_m *iAuthUseCaseMock) OnAuthUserFindUserByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return &iAuthUseCaseAuthUserFindUserByTokenCall{Call: _m.Mock.On("AuthUserFindUserByToken", requestId, req), Parent: _m}
}

type iAuthUseCaseAuthUserFindUserByTokenCall struct {
	*mock.Call
	Parent *iAuthUseCaseMock
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) Panic(msg string) *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) Once() *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) Twice() *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) Times(i int) *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) WaitUntil(w <-chan time.Time) *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) After(d time.Duration) *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) Run(fn func(args mock.Arguments)) *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) Maybe() *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) TypedReturns(a *user.AuthUserFindUserByTokenResponse, b error) *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) ReturnsFn(fn func(string, *user.AuthUserFindUserByTokenRequest) (*user.AuthUserFindUserByTokenResponse, error)) *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) TypedRun(fn func(string, *user.AuthUserFindUserByTokenRequest)) *iAuthUseCaseAuthUserFindUserByTokenCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.AuthUserFindUserByTokenRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthServiceVerifyIsExcluded(requestId string, req *user.AuthServiceVerifyIsExcludedRequest) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcluded(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserFindUserByToken(requestId string, req *user.AuthUserFindUserByTokenRequest) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserLoginByEmailAndPassword(requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPassword(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserLogoutByToken(requestId string, req *user.AuthUserLogoutByTokenRequest) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserRegister(requestId string, req *user.AuthUserRegisterRequest) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegister(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserVerifyAccessControl(requestId string, req *user.AuthUserVerifyAccessControlRequest) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControl(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserVerifyOtp(requestId string, req *user.AuthUserVerifyOtpRequest) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtp(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthServiceVerifyIsExcludedRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcludedRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserFindUserByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserLoginByEmailAndPasswordRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPasswordRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserLogoutByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserRegisterRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegisterRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserVerifyAccessControlRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControlRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserFindUserByTokenCall) OnAuthUserVerifyOtpRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtpRaw(requestId, req)
}

func (_m *iAuthUseCaseMock) AuthUserLoginByEmailAndPassword(_ context.Context, requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) (*emptypb.Empty, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.AuthUserLoginByEmailAndPasswordRequest) (*emptypb.Empty, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*emptypb.Empty)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAuthUseCaseMock) OnAuthUserLoginByEmailAndPassword(requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return &iAuthUseCaseAuthUserLoginByEmailAndPasswordCall{Call: _m.Mock.On("AuthUserLoginByEmailAndPassword", requestId, req), Parent: _m}
}

func (_m *iAuthUseCaseMock) OnAuthUserLoginByEmailAndPasswordRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return &iAuthUseCaseAuthUserLoginByEmailAndPasswordCall{Call: _m.Mock.On("AuthUserLoginByEmailAndPassword", requestId, req), Parent: _m}
}

type iAuthUseCaseAuthUserLoginByEmailAndPasswordCall struct {
	*mock.Call
	Parent *iAuthUseCaseMock
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) Panic(msg string) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) Once() *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) Twice() *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) Times(i int) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) WaitUntil(w <-chan time.Time) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) After(d time.Duration) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) Run(fn func(args mock.Arguments)) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) Maybe() *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) TypedReturns(a *emptypb.Empty, b error) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) ReturnsFn(fn func(string, *user.AuthUserLoginByEmailAndPasswordRequest) (*emptypb.Empty, error)) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) TypedRun(fn func(string, *user.AuthUserLoginByEmailAndPasswordRequest)) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.AuthUserLoginByEmailAndPasswordRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthServiceVerifyIsExcluded(requestId string, req *user.AuthServiceVerifyIsExcludedRequest) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcluded(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserFindUserByToken(requestId string, req *user.AuthUserFindUserByTokenRequest) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserLoginByEmailAndPassword(requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPassword(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserLogoutByToken(requestId string, req *user.AuthUserLogoutByTokenRequest) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserRegister(requestId string, req *user.AuthUserRegisterRequest) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegister(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserVerifyAccessControl(requestId string, req *user.AuthUserVerifyAccessControlRequest) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControl(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserVerifyOtp(requestId string, req *user.AuthUserVerifyOtpRequest) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtp(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthServiceVerifyIsExcludedRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcludedRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserFindUserByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserLoginByEmailAndPasswordRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPasswordRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserLogoutByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserRegisterRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegisterRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserVerifyAccessControlRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControlRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall) OnAuthUserVerifyOtpRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtpRaw(requestId, req)
}

func (_m *iAuthUseCaseMock) AuthUserLogoutByToken(_ context.Context, requestId string, req *user.AuthUserLogoutByTokenRequest) (*user.AuthUserLogoutByTokenResponse, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.AuthUserLogoutByTokenRequest) (*user.AuthUserLogoutByTokenResponse, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*user.AuthUserLogoutByTokenResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAuthUseCaseMock) OnAuthUserLogoutByToken(requestId string, req *user.AuthUserLogoutByTokenRequest) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return &iAuthUseCaseAuthUserLogoutByTokenCall{Call: _m.Mock.On("AuthUserLogoutByToken", requestId, req), Parent: _m}
}

func (_m *iAuthUseCaseMock) OnAuthUserLogoutByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return &iAuthUseCaseAuthUserLogoutByTokenCall{Call: _m.Mock.On("AuthUserLogoutByToken", requestId, req), Parent: _m}
}

type iAuthUseCaseAuthUserLogoutByTokenCall struct {
	*mock.Call
	Parent *iAuthUseCaseMock
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) Panic(msg string) *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) Once() *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) Twice() *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) Times(i int) *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) WaitUntil(w <-chan time.Time) *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) After(d time.Duration) *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) Run(fn func(args mock.Arguments)) *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) Maybe() *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) TypedReturns(a *user.AuthUserLogoutByTokenResponse, b error) *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) ReturnsFn(fn func(string, *user.AuthUserLogoutByTokenRequest) (*user.AuthUserLogoutByTokenResponse, error)) *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) TypedRun(fn func(string, *user.AuthUserLogoutByTokenRequest)) *iAuthUseCaseAuthUserLogoutByTokenCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.AuthUserLogoutByTokenRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthServiceVerifyIsExcluded(requestId string, req *user.AuthServiceVerifyIsExcludedRequest) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcluded(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserFindUserByToken(requestId string, req *user.AuthUserFindUserByTokenRequest) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserLoginByEmailAndPassword(requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPassword(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserLogoutByToken(requestId string, req *user.AuthUserLogoutByTokenRequest) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserRegister(requestId string, req *user.AuthUserRegisterRequest) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegister(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserVerifyAccessControl(requestId string, req *user.AuthUserVerifyAccessControlRequest) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControl(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserVerifyOtp(requestId string, req *user.AuthUserVerifyOtpRequest) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtp(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthServiceVerifyIsExcludedRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcludedRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserFindUserByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserLoginByEmailAndPasswordRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPasswordRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserLogoutByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserRegisterRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegisterRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserVerifyAccessControlRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControlRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserLogoutByTokenCall) OnAuthUserVerifyOtpRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtpRaw(requestId, req)
}

func (_m *iAuthUseCaseMock) AuthUserRegister(_ context.Context, requestId string, req *user.AuthUserRegisterRequest) (*emptypb.Empty, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.AuthUserRegisterRequest) (*emptypb.Empty, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*emptypb.Empty)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAuthUseCaseMock) OnAuthUserRegister(requestId string, req *user.AuthUserRegisterRequest) *iAuthUseCaseAuthUserRegisterCall {
	return &iAuthUseCaseAuthUserRegisterCall{Call: _m.Mock.On("AuthUserRegister", requestId, req), Parent: _m}
}

func (_m *iAuthUseCaseMock) OnAuthUserRegisterRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserRegisterCall {
	return &iAuthUseCaseAuthUserRegisterCall{Call: _m.Mock.On("AuthUserRegister", requestId, req), Parent: _m}
}

type iAuthUseCaseAuthUserRegisterCall struct {
	*mock.Call
	Parent *iAuthUseCaseMock
}

func (_c *iAuthUseCaseAuthUserRegisterCall) Panic(msg string) *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) Once() *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) Twice() *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) Times(i int) *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) WaitUntil(w <-chan time.Time) *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) After(d time.Duration) *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) Run(fn func(args mock.Arguments)) *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) Maybe() *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) TypedReturns(a *emptypb.Empty, b error) *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) ReturnsFn(fn func(string, *user.AuthUserRegisterRequest) (*emptypb.Empty, error)) *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) TypedRun(fn func(string, *user.AuthUserRegisterRequest)) *iAuthUseCaseAuthUserRegisterCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.AuthUserRegisterRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthServiceVerifyIsExcluded(requestId string, req *user.AuthServiceVerifyIsExcludedRequest) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcluded(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserFindUserByToken(requestId string, req *user.AuthUserFindUserByTokenRequest) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserLoginByEmailAndPassword(requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPassword(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserLogoutByToken(requestId string, req *user.AuthUserLogoutByTokenRequest) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserRegister(requestId string, req *user.AuthUserRegisterRequest) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegister(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserVerifyAccessControl(requestId string, req *user.AuthUserVerifyAccessControlRequest) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControl(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserVerifyOtp(requestId string, req *user.AuthUserVerifyOtpRequest) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtp(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthServiceVerifyIsExcludedRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcludedRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserFindUserByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserLoginByEmailAndPasswordRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPasswordRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserLogoutByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserRegisterRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegisterRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserVerifyAccessControlRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControlRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserRegisterCall) OnAuthUserVerifyOtpRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtpRaw(requestId, req)
}

func (_m *iAuthUseCaseMock) AuthUserVerifyAccessControl(_ context.Context, requestId string, req *user.AuthUserVerifyAccessControlRequest) (*user.AuthUserVerifyAccessControlResponse, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.AuthUserVerifyAccessControlRequest) (*user.AuthUserVerifyAccessControlResponse, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*user.AuthUserVerifyAccessControlResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAuthUseCaseMock) OnAuthUserVerifyAccessControl(requestId string, req *user.AuthUserVerifyAccessControlRequest) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return &iAuthUseCaseAuthUserVerifyAccessControlCall{Call: _m.Mock.On("AuthUserVerifyAccessControl", requestId, req), Parent: _m}
}

func (_m *iAuthUseCaseMock) OnAuthUserVerifyAccessControlRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return &iAuthUseCaseAuthUserVerifyAccessControlCall{Call: _m.Mock.On("AuthUserVerifyAccessControl", requestId, req), Parent: _m}
}

type iAuthUseCaseAuthUserVerifyAccessControlCall struct {
	*mock.Call
	Parent *iAuthUseCaseMock
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) Panic(msg string) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) Once() *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) Twice() *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) Times(i int) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) WaitUntil(w <-chan time.Time) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) After(d time.Duration) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) Run(fn func(args mock.Arguments)) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) Maybe() *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) TypedReturns(a *user.AuthUserVerifyAccessControlResponse, b error) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) ReturnsFn(fn func(string, *user.AuthUserVerifyAccessControlRequest) (*user.AuthUserVerifyAccessControlResponse, error)) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) TypedRun(fn func(string, *user.AuthUserVerifyAccessControlRequest)) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.AuthUserVerifyAccessControlRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthServiceVerifyIsExcluded(requestId string, req *user.AuthServiceVerifyIsExcludedRequest) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcluded(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserFindUserByToken(requestId string, req *user.AuthUserFindUserByTokenRequest) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserLoginByEmailAndPassword(requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPassword(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserLogoutByToken(requestId string, req *user.AuthUserLogoutByTokenRequest) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserRegister(requestId string, req *user.AuthUserRegisterRequest) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegister(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserVerifyAccessControl(requestId string, req *user.AuthUserVerifyAccessControlRequest) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControl(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserVerifyOtp(requestId string, req *user.AuthUserVerifyOtpRequest) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtp(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthServiceVerifyIsExcludedRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcludedRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserFindUserByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserLoginByEmailAndPasswordRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPasswordRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserLogoutByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserRegisterRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegisterRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserVerifyAccessControlRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControlRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyAccessControlCall) OnAuthUserVerifyOtpRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtpRaw(requestId, req)
}

func (_m *iAuthUseCaseMock) AuthUserVerifyOtp(_ context.Context, requestId string, req *user.AuthUserVerifyOtpRequest) (*user.AuthUserVerifyOtpResponse, error) {
	_ret := _m.Called(requestId, req)

	if _rf, ok := _ret.Get(0).(func(string, *user.AuthUserVerifyOtpRequest) (*user.AuthUserVerifyOtpResponse, error)); ok {
		return _rf(requestId, req)
	}

	_ra0, _ := _ret.Get(0).(*user.AuthUserVerifyOtpResponse)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *iAuthUseCaseMock) OnAuthUserVerifyOtp(requestId string, req *user.AuthUserVerifyOtpRequest) *iAuthUseCaseAuthUserVerifyOtpCall {
	return &iAuthUseCaseAuthUserVerifyOtpCall{Call: _m.Mock.On("AuthUserVerifyOtp", requestId, req), Parent: _m}
}

func (_m *iAuthUseCaseMock) OnAuthUserVerifyOtpRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyOtpCall {
	return &iAuthUseCaseAuthUserVerifyOtpCall{Call: _m.Mock.On("AuthUserVerifyOtp", requestId, req), Parent: _m}
}

type iAuthUseCaseAuthUserVerifyOtpCall struct {
	*mock.Call
	Parent *iAuthUseCaseMock
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) Panic(msg string) *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) Once() *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) Twice() *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) Times(i int) *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) WaitUntil(w <-chan time.Time) *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) After(d time.Duration) *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) Run(fn func(args mock.Arguments)) *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) Maybe() *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) TypedReturns(a *user.AuthUserVerifyOtpResponse, b error) *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) ReturnsFn(fn func(string, *user.AuthUserVerifyOtpRequest) (*user.AuthUserVerifyOtpResponse, error)) *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) TypedRun(fn func(string, *user.AuthUserVerifyOtpRequest)) *iAuthUseCaseAuthUserVerifyOtpCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_requestId := args.String(0)
		_req, _ := args.Get(1).(*user.AuthUserVerifyOtpRequest)
		fn(_requestId, _req)
	})
	return _c
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthServiceVerifyIsExcluded(requestId string, req *user.AuthServiceVerifyIsExcludedRequest) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcluded(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserFindUserByToken(requestId string, req *user.AuthUserFindUserByTokenRequest) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserLoginByEmailAndPassword(requestId string, req *user.AuthUserLoginByEmailAndPasswordRequest) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPassword(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserLogoutByToken(requestId string, req *user.AuthUserLogoutByTokenRequest) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByToken(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserRegister(requestId string, req *user.AuthUserRegisterRequest) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegister(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserVerifyAccessControl(requestId string, req *user.AuthUserVerifyAccessControlRequest) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControl(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserVerifyOtp(requestId string, req *user.AuthUserVerifyOtpRequest) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtp(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthServiceVerifyIsExcludedRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthServiceVerifyIsExcludedCall {
	return _c.Parent.OnAuthServiceVerifyIsExcludedRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserFindUserByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserFindUserByTokenCall {
	return _c.Parent.OnAuthUserFindUserByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserLoginByEmailAndPasswordRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLoginByEmailAndPasswordCall {
	return _c.Parent.OnAuthUserLoginByEmailAndPasswordRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserLogoutByTokenRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserLogoutByTokenCall {
	return _c.Parent.OnAuthUserLogoutByTokenRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserRegisterRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserRegisterCall {
	return _c.Parent.OnAuthUserRegisterRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserVerifyAccessControlRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyAccessControlCall {
	return _c.Parent.OnAuthUserVerifyAccessControlRaw(requestId, req)
}

func (_c *iAuthUseCaseAuthUserVerifyOtpCall) OnAuthUserVerifyOtpRaw(requestId interface{}, req interface{}) *iAuthUseCaseAuthUserVerifyOtpCall {
	return _c.Parent.OnAuthUserVerifyOtpRaw(requestId, req)
}
