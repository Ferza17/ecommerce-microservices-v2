// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/user/response.proto

package user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthUserRegisterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserRegisterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserRegisterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserRegisterResponseMultiError, or nil if none found.
func (m *AuthUserRegisterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserRegisterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserRegisterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserRegisterResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserRegisterResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthUserRegisterResponseMultiError(errors)
	}

	return nil
}

// AuthUserRegisterResponseMultiError is an error wrapping multiple validation
// errors returned by AuthUserRegisterResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthUserRegisterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserRegisterResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserRegisterResponseMultiError) AllErrors() []error { return m }

// AuthUserRegisterResponseValidationError is the validation error returned by
// AuthUserRegisterResponse.Validate if the designated constraints aren't met.
type AuthUserRegisterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserRegisterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserRegisterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserRegisterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserRegisterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserRegisterResponseValidationError) ErrorName() string {
	return "AuthUserRegisterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserRegisterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserRegisterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserRegisterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserRegisterResponseValidationError{}

// Validate checks the field values on AuthUserVerifyOtpResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserVerifyOtpResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserVerifyOtpResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserVerifyOtpResponseMultiError, or nil if none found.
func (m *AuthUserVerifyOtpResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserVerifyOtpResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserVerifyOtpResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserVerifyOtpResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserVerifyOtpResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthUserVerifyOtpResponseMultiError(errors)
	}

	return nil
}

// AuthUserVerifyOtpResponseMultiError is an error wrapping multiple validation
// errors returned by AuthUserVerifyOtpResponse.ValidateAll() if the
// designated constraints aren't met.
type AuthUserVerifyOtpResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserVerifyOtpResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserVerifyOtpResponseMultiError) AllErrors() []error { return m }

// AuthUserVerifyOtpResponseValidationError is the validation error returned by
// AuthUserVerifyOtpResponse.Validate if the designated constraints aren't met.
type AuthUserVerifyOtpResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserVerifyOtpResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserVerifyOtpResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserVerifyOtpResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserVerifyOtpResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserVerifyOtpResponseValidationError) ErrorName() string {
	return "AuthUserVerifyOtpResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserVerifyOtpResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserVerifyOtpResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserVerifyOtpResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserVerifyOtpResponseValidationError{}

// Validate checks the field values on AuthUserLogoutByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserLogoutByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserLogoutByTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthUserLogoutByTokenResponseMultiError, or nil if none found.
func (m *AuthUserLogoutByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserLogoutByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserLogoutByTokenResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserLogoutByTokenResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserLogoutByTokenResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthUserLogoutByTokenResponseMultiError(errors)
	}

	return nil
}

// AuthUserLogoutByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by AuthUserLogoutByTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type AuthUserLogoutByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserLogoutByTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserLogoutByTokenResponseMultiError) AllErrors() []error { return m }

// AuthUserLogoutByTokenResponseValidationError is the validation error
// returned by AuthUserLogoutByTokenResponse.Validate if the designated
// constraints aren't met.
type AuthUserLogoutByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserLogoutByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserLogoutByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserLogoutByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserLogoutByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserLogoutByTokenResponseValidationError) ErrorName() string {
	return "AuthUserLogoutByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserLogoutByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserLogoutByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserLogoutByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserLogoutByTokenResponseValidationError{}

// Validate checks the field values on AuthUserVerifyAccessControlResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthUserVerifyAccessControlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserVerifyAccessControlResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuthUserVerifyAccessControlResponseMultiError, or nil if none found.
func (m *AuthUserVerifyAccessControlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserVerifyAccessControlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserVerifyAccessControlResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthUserVerifyAccessControlResponseMultiError(errors)
	}

	return nil
}

// AuthUserVerifyAccessControlResponseMultiError is an error wrapping multiple
// validation errors returned by
// AuthUserVerifyAccessControlResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthUserVerifyAccessControlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserVerifyAccessControlResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserVerifyAccessControlResponseMultiError) AllErrors() []error { return m }

// AuthUserVerifyAccessControlResponseValidationError is the validation error
// returned by AuthUserVerifyAccessControlResponse.Validate if the designated
// constraints aren't met.
type AuthUserVerifyAccessControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserVerifyAccessControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserVerifyAccessControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserVerifyAccessControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserVerifyAccessControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserVerifyAccessControlResponseValidationError) ErrorName() string {
	return "AuthUserVerifyAccessControlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserVerifyAccessControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserVerifyAccessControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserVerifyAccessControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserVerifyAccessControlResponseValidationError{}

// Validate checks the field values on AuthUserFindUserByTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserFindUserByTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserFindUserByTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthUserFindUserByTokenResponseMultiError, or nil if none found.
func (m *AuthUserFindUserByTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserFindUserByTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserFindUserByTokenResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserFindUserByTokenResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserFindUserByTokenResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthUserFindUserByTokenResponseMultiError(errors)
	}

	return nil
}

// AuthUserFindUserByTokenResponseMultiError is an error wrapping multiple
// validation errors returned by AuthUserFindUserByTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type AuthUserFindUserByTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserFindUserByTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserFindUserByTokenResponseMultiError) AllErrors() []error { return m }

// AuthUserFindUserByTokenResponseValidationError is the validation error
// returned by AuthUserFindUserByTokenResponse.Validate if the designated
// constraints aren't met.
type AuthUserFindUserByTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserFindUserByTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserFindUserByTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserFindUserByTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserFindUserByTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserFindUserByTokenResponseValidationError) ErrorName() string {
	return "AuthUserFindUserByTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserFindUserByTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserFindUserByTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserFindUserByTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserFindUserByTokenResponseValidationError{}

// Validate checks the field values on AuthServiceVerifyIsExcludedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthServiceVerifyIsExcludedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthServiceVerifyIsExcludedResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuthServiceVerifyIsExcludedResponseMultiError, or nil if none found.
func (m *AuthServiceVerifyIsExcludedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthServiceVerifyIsExcludedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthServiceVerifyIsExcludedResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthServiceVerifyIsExcludedResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthServiceVerifyIsExcludedResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthServiceVerifyIsExcludedResponseMultiError(errors)
	}

	return nil
}

// AuthServiceVerifyIsExcludedResponseMultiError is an error wrapping multiple
// validation errors returned by
// AuthServiceVerifyIsExcludedResponse.ValidateAll() if the designated
// constraints aren't met.
type AuthServiceVerifyIsExcludedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthServiceVerifyIsExcludedResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthServiceVerifyIsExcludedResponseMultiError) AllErrors() []error { return m }

// AuthServiceVerifyIsExcludedResponseValidationError is the validation error
// returned by AuthServiceVerifyIsExcludedResponse.Validate if the designated
// constraints aren't met.
type AuthServiceVerifyIsExcludedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthServiceVerifyIsExcludedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthServiceVerifyIsExcludedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthServiceVerifyIsExcludedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthServiceVerifyIsExcludedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthServiceVerifyIsExcludedResponseValidationError) ErrorName() string {
	return "AuthServiceVerifyIsExcludedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AuthServiceVerifyIsExcludedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthServiceVerifyIsExcludedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthServiceVerifyIsExcludedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthServiceVerifyIsExcludedResponseValidationError{}

// Validate checks the field values on UpdateUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUserByIdResponseMultiError, or nil if none found.
func (m *UpdateUserByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateUserByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateUserByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateUserByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateUserByIdResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUserByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUserByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIdResponseMultiError) AllErrors() []error { return m }

// UpdateUserByIdResponseValidationError is the validation error returned by
// UpdateUserByIdResponse.Validate if the designated constraints aren't met.
type UpdateUserByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIdResponseValidationError) ErrorName() string {
	return "UpdateUserByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIdResponseValidationError{}

// Validate checks the field values on FindUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserByIdResponseMultiError, or nil if none found.
func (m *FindUserByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindUserByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindUserByIdResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindUserByIdResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindUserByIdResponseMultiError(errors)
	}

	return nil
}

// FindUserByIdResponseMultiError is an error wrapping multiple validation
// errors returned by FindUserByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type FindUserByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByIdResponseMultiError) AllErrors() []error { return m }

// FindUserByIdResponseValidationError is the validation error returned by
// FindUserByIdResponse.Validate if the designated constraints aren't met.
type FindUserByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByIdResponseValidationError) ErrorName() string {
	return "FindUserByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByIdResponseValidationError{}

// Validate checks the field values on FindUserByEmailAndPasswordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindUserByEmailAndPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserByEmailAndPasswordResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindUserByEmailAndPasswordResponseMultiError, or nil if none found.
func (m *FindUserByEmailAndPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByEmailAndPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindUserByEmailAndPasswordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindUserByEmailAndPasswordResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindUserByEmailAndPasswordResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindUserByEmailAndPasswordResponseMultiError(errors)
	}

	return nil
}

// FindUserByEmailAndPasswordResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindUserByEmailAndPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type FindUserByEmailAndPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByEmailAndPasswordResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByEmailAndPasswordResponseMultiError) AllErrors() []error { return m }

// FindUserByEmailAndPasswordResponseValidationError is the validation error
// returned by FindUserByEmailAndPasswordResponse.Validate if the designated
// constraints aren't met.
type FindUserByEmailAndPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByEmailAndPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByEmailAndPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserByEmailAndPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByEmailAndPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByEmailAndPasswordResponseValidationError) ErrorName() string {
	return "FindUserByEmailAndPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByEmailAndPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByEmailAndPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByEmailAndPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByEmailAndPasswordResponseValidationError{}

// Validate checks the field values on FindUserByEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindUserByEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindUserByEmailResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindUserByEmailResponseMultiError, or nil if none found.
func (m *FindUserByEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindUserByEmailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindUserByEmailResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindUserByEmailResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindUserByEmailResponseMultiError(errors)
	}

	return nil
}

// FindUserByEmailResponseMultiError is an error wrapping multiple validation
// errors returned by FindUserByEmailResponse.ValidateAll() if the designated
// constraints aren't met.
type FindUserByEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByEmailResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByEmailResponseMultiError) AllErrors() []error { return m }

// FindUserByEmailResponseValidationError is the validation error returned by
// FindUserByEmailResponse.Validate if the designated constraints aren't met.
type FindUserByEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindUserByEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByEmailResponseValidationError) ErrorName() string {
	return "FindUserByEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByEmailResponseValidationError{}

// Validate checks the field values on
// AuthUserRegisterResponse_AuthUserRegisterResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserRegisterResponse_AuthUserRegisterResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthUserRegisterResponse_AuthUserRegisterResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserRegisterResponse_AuthUserRegisterResponseDataMultiError, or nil if
// none found.
func (m *AuthUserRegisterResponse_AuthUserRegisterResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserRegisterResponse_AuthUserRegisterResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccessControl() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
						field:  fmt.Sprintf("AccessControl[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
						field:  fmt.Sprintf("AccessControl[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{
					field:  fmt.Sprintf("AccessControl[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthUserRegisterResponse_AuthUserRegisterResponseDataMultiError(errors)
	}

	return nil
}

// AuthUserRegisterResponse_AuthUserRegisterResponseDataMultiError is an error
// wrapping multiple validation errors returned by
// AuthUserRegisterResponse_AuthUserRegisterResponseData.ValidateAll() if the
// designated constraints aren't met.
type AuthUserRegisterResponse_AuthUserRegisterResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserRegisterResponse_AuthUserRegisterResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserRegisterResponse_AuthUserRegisterResponseDataMultiError) AllErrors() []error {
	return m
}

// AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError is the
// validation error returned by
// AuthUserRegisterResponse_AuthUserRegisterResponseData.Validate if the
// designated constraints aren't met.
type AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError) ErrorName() string {
	return "AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserRegisterResponse_AuthUserRegisterResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserRegisterResponse_AuthUserRegisterResponseDataValidationError{}

// Validate checks the field values on
// AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataMultiError, or nil
// if none found.
func (m *AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataMultiError(errors)
	}

	return nil
}

// AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataMultiError is an
// error wrapping multiple validation errors returned by
// AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseData.ValidateAll() if
// the designated constraints aren't met.
type AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataMultiError) AllErrors() []error {
	return m
}

// AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError is
// the validation error returned by
// AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseData.Validate if the
// designated constraints aren't met.
type AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError) ErrorName() string {
	return "AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserVerifyOtpResponse_AuthUserVerifyOtpResponseDataValidationError{}

// Validate checks the field values on
// AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseData with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataMultiError,
// or nil if none found.
func (m *AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	if len(errors) > 0 {
		return AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataMultiError(errors)
	}

	return nil
}

// AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataMultiError is
// an error wrapping multiple validation errors returned by
// AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseData.ValidateAll()
// if the designated constraints aren't met.
type AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataMultiError) AllErrors() []error {
	return m
}

// AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError
// is the validation error returned by
// AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseData.Validate if
// the designated constraints aren't met.
type AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError) ErrorName() string {
	return "AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserLogoutByTokenResponse_AuthUserLogoutByTokenResponseDataValidationError{}

// Validate checks the field values on
// AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataMultiError,
// or nil if none found.
func (m *AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsValid

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetAccessControls() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
						field:  fmt.Sprintf("AccessControls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
						field:  fmt.Sprintf("AccessControls[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{
					field:  fmt.Sprintf("AccessControls[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataMultiError(errors)
	}

	return nil
}

// AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataMultiError
// is an error wrapping multiple validation errors returned by
// AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseData.ValidateAll()
// if the designated constraints aren't met.
type AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataMultiError) AllErrors() []error {
	return m
}

// AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError
// is the validation error returned by
// AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseData.Validate
// if the designated constraints aren't met.
type AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError) ErrorName() string {
	return "AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserVerifyAccessControlResponse_AuthUserVerifyAccessControlResponseDataValidationError{}

// Validate checks the field values on
// AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseData with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataMultiError,
// or nil if none found.
func (m *AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataMultiError(errors)
	}

	return nil
}

// AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataMultiError
// is an error wrapping multiple validation errors returned by
// AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseData.ValidateAll()
// if the designated constraints aren't met.
type AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataMultiError) AllErrors() []error {
	return m
}

// AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError
// is the validation error returned by
// AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseData.Validate
// if the designated constraints aren't met.
type AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError) ErrorName() string {
	return "AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserFindUserByTokenResponse_AuthUserFindUserByTokenResponseDataValidationError{}

// Validate checks the field values on
// AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataMultiError,
// or nil if none found.
func (m *AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsExcluded

	if len(errors) > 0 {
		return AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataMultiError(errors)
	}

	return nil
}

// AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataMultiError
// is an error wrapping multiple validation errors returned by
// AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseData.ValidateAll()
// if the designated constraints aren't met.
type AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataMultiError) AllErrors() []error {
	return m
}

// AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError
// is the validation error returned by
// AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseData.Validate
// if the designated constraints aren't met.
type AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError) ErrorName() string {
	return "AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthServiceVerifyIsExcludedResponse_AuthServiceVerifyIsExcludedResponseDataValidationError{}

// Validate checks the field values on
// UpdateUserByIdResponse_UpdateUserByIdResponseData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserByIdResponse_UpdateUserByIdResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// UpdateUserByIdResponse_UpdateUserByIdResponseData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// UpdateUserByIdResponse_UpdateUserByIdResponseDataMultiError, or nil if none found.
func (m *UpdateUserByIdResponse_UpdateUserByIdResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserByIdResponse_UpdateUserByIdResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateUserByIdResponse_UpdateUserByIdResponseDataMultiError(errors)
	}

	return nil
}

// UpdateUserByIdResponse_UpdateUserByIdResponseDataMultiError is an error
// wrapping multiple validation errors returned by
// UpdateUserByIdResponse_UpdateUserByIdResponseData.ValidateAll() if the
// designated constraints aren't met.
type UpdateUserByIdResponse_UpdateUserByIdResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserByIdResponse_UpdateUserByIdResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserByIdResponse_UpdateUserByIdResponseDataMultiError) AllErrors() []error { return m }

// UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError is the
// validation error returned by
// UpdateUserByIdResponse_UpdateUserByIdResponseData.Validate if the
// designated constraints aren't met.
type UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError) ErrorName() string {
	return "UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserByIdResponse_UpdateUserByIdResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserByIdResponse_UpdateUserByIdResponseDataValidationError{}

// Validate checks the field values on
// FindUserByIdResponse_FindUserByIdResponseData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FindUserByIdResponse_FindUserByIdResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindUserByIdResponse_FindUserByIdResponseData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// FindUserByIdResponse_FindUserByIdResponseDataMultiError, or nil if none found.
func (m *FindUserByIdResponse_FindUserByIdResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByIdResponse_FindUserByIdResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindUserByIdResponse_FindUserByIdResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindUserByIdResponse_FindUserByIdResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindUserByIdResponse_FindUserByIdResponseDataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindUserByIdResponse_FindUserByIdResponseDataMultiError(errors)
	}

	return nil
}

// FindUserByIdResponse_FindUserByIdResponseDataMultiError is an error wrapping
// multiple validation errors returned by
// FindUserByIdResponse_FindUserByIdResponseData.ValidateAll() if the
// designated constraints aren't met.
type FindUserByIdResponse_FindUserByIdResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByIdResponse_FindUserByIdResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByIdResponse_FindUserByIdResponseDataMultiError) AllErrors() []error { return m }

// FindUserByIdResponse_FindUserByIdResponseDataValidationError is the
// validation error returned by
// FindUserByIdResponse_FindUserByIdResponseData.Validate if the designated
// constraints aren't met.
type FindUserByIdResponse_FindUserByIdResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByIdResponse_FindUserByIdResponseDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindUserByIdResponse_FindUserByIdResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindUserByIdResponse_FindUserByIdResponseDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindUserByIdResponse_FindUserByIdResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByIdResponse_FindUserByIdResponseDataValidationError) ErrorName() string {
	return "FindUserByIdResponse_FindUserByIdResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByIdResponse_FindUserByIdResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByIdResponse_FindUserByIdResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByIdResponse_FindUserByIdResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByIdResponse_FindUserByIdResponseDataValidationError{}

// Validate checks the field values on
// FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseData
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataMultiError,
// or nil if none found.
func (m *FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataMultiError(errors)
	}

	return nil
}

// FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataMultiError
// is an error wrapping multiple validation errors returned by
// FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseData.ValidateAll()
// if the designated constraints aren't met.
type FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataMultiError) AllErrors() []error {
	return m
}

// FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError
// is the validation error returned by
// FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseData.Validate
// if the designated constraints aren't met.
type FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError) ErrorName() string {
	return "FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByEmailAndPasswordResponse_FindUserByEmailAndPasswordResponseDataValidationError{}

// Validate checks the field values on
// FindUserByEmailResponse_FindUserByEmailResponseData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindUserByEmailResponse_FindUserByEmailResponseData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindUserByEmailResponse_FindUserByEmailResponseData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// FindUserByEmailResponse_FindUserByEmailResponseDataMultiError, or nil if
// none found.
func (m *FindUserByEmailResponse_FindUserByEmailResponseData) ValidateAll() error {
	return m.validate(true)
}

func (m *FindUserByEmailResponse_FindUserByEmailResponseData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindUserByEmailResponse_FindUserByEmailResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindUserByEmailResponse_FindUserByEmailResponseDataValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindUserByEmailResponse_FindUserByEmailResponseDataValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindUserByEmailResponse_FindUserByEmailResponseDataMultiError(errors)
	}

	return nil
}

// FindUserByEmailResponse_FindUserByEmailResponseDataMultiError is an error
// wrapping multiple validation errors returned by
// FindUserByEmailResponse_FindUserByEmailResponseData.ValidateAll() if the
// designated constraints aren't met.
type FindUserByEmailResponse_FindUserByEmailResponseDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindUserByEmailResponse_FindUserByEmailResponseDataMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindUserByEmailResponse_FindUserByEmailResponseDataMultiError) AllErrors() []error { return m }

// FindUserByEmailResponse_FindUserByEmailResponseDataValidationError is the
// validation error returned by
// FindUserByEmailResponse_FindUserByEmailResponseData.Validate if the
// designated constraints aren't met.
type FindUserByEmailResponse_FindUserByEmailResponseDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindUserByEmailResponse_FindUserByEmailResponseDataValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e FindUserByEmailResponse_FindUserByEmailResponseDataValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e FindUserByEmailResponse_FindUserByEmailResponseDataValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e FindUserByEmailResponse_FindUserByEmailResponseDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindUserByEmailResponse_FindUserByEmailResponseDataValidationError) ErrorName() string {
	return "FindUserByEmailResponse_FindUserByEmailResponseDataValidationError"
}

// Error satisfies the builtin error interface
func (e FindUserByEmailResponse_FindUserByEmailResponseDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindUserByEmailResponse_FindUserByEmailResponseData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindUserByEmailResponse_FindUserByEmailResponseDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindUserByEmailResponse_FindUserByEmailResponseDataValidationError{}
