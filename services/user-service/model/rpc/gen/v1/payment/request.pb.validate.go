// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/payment/request.proto

package payment

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePaymentItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentItemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentItemRequestMultiError, or nil if none found.
func (m *CreatePaymentItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetQty() <= 0 {
		err := CreatePaymentItemRequestValidationError{
			field:  "Qty",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreatePaymentItemRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentItemRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentItemRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentItemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentItemRequestMultiError) AllErrors() []error { return m }

// CreatePaymentItemRequestValidationError is the validation error returned by
// CreatePaymentItemRequest.Validate if the designated constraints aren't met.
type CreatePaymentItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentItemRequestValidationError) ErrorName() string {
	return "CreatePaymentItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentItemRequestValidationError{}

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePaymentRequestMultiError, or nil if none found.
func (m *CreatePaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreatePaymentRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreatePaymentRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreatePaymentRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreatePaymentRequestMultiError(errors)
	}

	return nil
}

// CreatePaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePaymentRequestMultiError) AllErrors() []error { return m }

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on PaymentOrderDelayedCancelledRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PaymentOrderDelayedCancelledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentOrderDelayedCancelledRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PaymentOrderDelayedCancelledRequestMultiError, or nil if none found.
func (m *PaymentOrderDelayedCancelledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentOrderDelayedCancelledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PaymentOrderDelayedCancelledRequestMultiError(errors)
	}

	return nil
}

// PaymentOrderDelayedCancelledRequestMultiError is an error wrapping multiple
// validation errors returned by
// PaymentOrderDelayedCancelledRequest.ValidateAll() if the designated
// constraints aren't met.
type PaymentOrderDelayedCancelledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentOrderDelayedCancelledRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentOrderDelayedCancelledRequestMultiError) AllErrors() []error { return m }

// PaymentOrderDelayedCancelledRequestValidationError is the validation error
// returned by PaymentOrderDelayedCancelledRequest.Validate if the designated
// constraints aren't met.
type PaymentOrderDelayedCancelledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentOrderDelayedCancelledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentOrderDelayedCancelledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentOrderDelayedCancelledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentOrderDelayedCancelledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentOrderDelayedCancelledRequestValidationError) ErrorName() string {
	return "PaymentOrderDelayedCancelledRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaymentOrderDelayedCancelledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentOrderDelayedCancelledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentOrderDelayedCancelledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentOrderDelayedCancelledRequestValidationError{}

// Validate checks the field values on CallBackPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CallBackPaymentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallBackPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallBackPaymentRequestMultiError, or nil if none found.
func (m *CallBackPaymentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CallBackPaymentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPaymentId()) < 1 {
		err := CallBackPaymentRequestValidationError{
			field:  "PaymentId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CallBackPaymentRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CallBackPaymentRequestMultiError(errors)
	}

	return nil
}

// CallBackPaymentRequestMultiError is an error wrapping multiple validation
// errors returned by CallBackPaymentRequest.ValidateAll() if the designated
// constraints aren't met.
type CallBackPaymentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallBackPaymentRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallBackPaymentRequestMultiError) AllErrors() []error { return m }

// CallBackPaymentRequestValidationError is the validation error returned by
// CallBackPaymentRequest.Validate if the designated constraints aren't met.
type CallBackPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallBackPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallBackPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallBackPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallBackPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallBackPaymentRequestValidationError) ErrorName() string {
	return "CallBackPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CallBackPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallBackPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallBackPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallBackPaymentRequestValidationError{}

// Validate checks the field values on FindPaymentByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindPaymentByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindPaymentByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindPaymentByIdRequestMultiError, or nil if none found.
func (m *FindPaymentByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := FindPaymentByIdRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindPaymentByIdRequestMultiError(errors)
	}

	return nil
}

// FindPaymentByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindPaymentByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindPaymentByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentByIdRequestMultiError) AllErrors() []error { return m }

// FindPaymentByIdRequestValidationError is the validation error returned by
// FindPaymentByIdRequest.Validate if the designated constraints aren't met.
type FindPaymentByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindPaymentByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindPaymentByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindPaymentByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindPaymentByIdRequestValidationError) ErrorName() string {
	return "FindPaymentByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentByIdRequestValidationError{}

// Validate checks the field values on FindPaymentByUserIdAndStatusRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindPaymentByUserIdAndStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindPaymentByUserIdAndStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindPaymentByUserIdAndStatusRequestMultiError, or nil if none found.
func (m *FindPaymentByUserIdAndStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentByUserIdAndStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := FindPaymentByUserIdAndStatusRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := PaymentStatus_name[int32(m.GetStatus())]; !ok {
		err := FindPaymentByUserIdAndStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindPaymentByUserIdAndStatusRequestMultiError(errors)
	}

	return nil
}

// FindPaymentByUserIdAndStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindPaymentByUserIdAndStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type FindPaymentByUserIdAndStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentByUserIdAndStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentByUserIdAndStatusRequestMultiError) AllErrors() []error { return m }

// FindPaymentByUserIdAndStatusRequestValidationError is the validation error
// returned by FindPaymentByUserIdAndStatusRequest.Validate if the designated
// constraints aren't met.
type FindPaymentByUserIdAndStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentByUserIdAndStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindPaymentByUserIdAndStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindPaymentByUserIdAndStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindPaymentByUserIdAndStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindPaymentByUserIdAndStatusRequestValidationError) ErrorName() string {
	return "FindPaymentByUserIdAndStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentByUserIdAndStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentByUserIdAndStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentByUserIdAndStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentByUserIdAndStatusRequestValidationError{}

// Validate checks the field values on FindPaymentProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindPaymentProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindPaymentProvidersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindPaymentProvidersRequestMultiError, or nil if none found.
func (m *FindPaymentProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := FindPaymentProvidersRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindPaymentProvidersRequestMultiError(errors)
	}

	return nil
}

// FindPaymentProvidersRequestMultiError is an error wrapping multiple
// validation errors returned by FindPaymentProvidersRequest.ValidateAll() if
// the designated constraints aren't met.
type FindPaymentProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentProvidersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentProvidersRequestMultiError) AllErrors() []error { return m }

// FindPaymentProvidersRequestValidationError is the validation error returned
// by FindPaymentProvidersRequest.Validate if the designated constraints
// aren't met.
type FindPaymentProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindPaymentProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindPaymentProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindPaymentProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindPaymentProvidersRequestValidationError) ErrorName() string {
	return "FindPaymentProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentProvidersRequestValidationError{}

// Validate checks the field values on FindPaymentProviderByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindPaymentProviderByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindPaymentProviderByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// FindPaymentProviderByIdRequestMultiError, or nil if none found.
func (m *FindPaymentProviderByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindPaymentProviderByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := FindPaymentProviderByIdRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindPaymentProviderByIdRequestMultiError(errors)
	}

	return nil
}

// FindPaymentProviderByIdRequestMultiError is an error wrapping multiple
// validation errors returned by FindPaymentProviderByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type FindPaymentProviderByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindPaymentProviderByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindPaymentProviderByIdRequestMultiError) AllErrors() []error { return m }

// FindPaymentProviderByIdRequestValidationError is the validation error
// returned by FindPaymentProviderByIdRequest.Validate if the designated
// constraints aren't met.
type FindPaymentProviderByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindPaymentProviderByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindPaymentProviderByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindPaymentProviderByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindPaymentProviderByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindPaymentProviderByIdRequestValidationError) ErrorName() string {
	return "FindPaymentProviderByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindPaymentProviderByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindPaymentProviderByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindPaymentProviderByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindPaymentProviderByIdRequestValidationError{}
