// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/event/request.proto

package event

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AppendRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppendRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppendRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppendRequestMultiError, or
// nil if none found.
func (m *AppendRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AppendRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateId

	// no validation rules for AggregateType

	// no validation rules for ExpectedVersion

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AppendRequestValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AppendRequestValidationError{
						field:  fmt.Sprintf("Events[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AppendRequestValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AppendRequestMultiError(errors)
	}

	return nil
}

// AppendRequestMultiError is an error wrapping multiple validation errors
// returned by AppendRequest.ValidateAll() if the designated constraints
// aren't met.
type AppendRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppendRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppendRequestMultiError) AllErrors() []error { return m }

// AppendRequestValidationError is the validation error returned by
// AppendRequest.Validate if the designated constraints aren't met.
type AppendRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppendRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppendRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppendRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppendRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppendRequestValidationError) ErrorName() string { return "AppendRequestValidationError" }

// Error satisfies the builtin error interface
func (e AppendRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppendRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppendRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppendRequestValidationError{}

// Validate checks the field values on ReadByAggregateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadByAggregateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadByAggregateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadByAggregateRequestMultiError, or nil if none found.
func (m *ReadByAggregateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadByAggregateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateId

	// no validation rules for FromVersion

	if len(errors) > 0 {
		return ReadByAggregateRequestMultiError(errors)
	}

	return nil
}

// ReadByAggregateRequestMultiError is an error wrapping multiple validation
// errors returned by ReadByAggregateRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadByAggregateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadByAggregateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadByAggregateRequestMultiError) AllErrors() []error { return m }

// ReadByAggregateRequestValidationError is the validation error returned by
// ReadByAggregateRequest.Validate if the designated constraints aren't met.
type ReadByAggregateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadByAggregateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadByAggregateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadByAggregateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadByAggregateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadByAggregateRequestValidationError) ErrorName() string {
	return "ReadByAggregateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadByAggregateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadByAggregateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadByAggregateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadByAggregateRequestValidationError{}

// Validate checks the field values on ReadByTypeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReadByTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadByTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadByTypeRequestMultiError, or nil if none found.
func (m *ReadByTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadByTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateType

	// no validation rules for Limit

	// no validation rules for AfterId

	if len(errors) > 0 {
		return ReadByTypeRequestMultiError(errors)
	}

	return nil
}

// ReadByTypeRequestMultiError is an error wrapping multiple validation errors
// returned by ReadByTypeRequest.ValidateAll() if the designated constraints
// aren't met.
type ReadByTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadByTypeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadByTypeRequestMultiError) AllErrors() []error { return m }

// ReadByTypeRequestValidationError is the validation error returned by
// ReadByTypeRequest.Validate if the designated constraints aren't met.
type ReadByTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadByTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadByTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadByTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadByTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadByTypeRequestValidationError) ErrorName() string {
	return "ReadByTypeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadByTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadByTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadByTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadByTypeRequestValidationError{}

// Validate checks the field values on SubscribeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SubscribeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeRequestMultiError, or nil if none found.
func (m *SubscribeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateType

	// no validation rules for FromEventId

	if len(errors) > 0 {
		return SubscribeRequestMultiError(errors)
	}

	return nil
}

// SubscribeRequestMultiError is an error wrapping multiple validation errors
// returned by SubscribeRequest.ValidateAll() if the designated constraints
// aren't met.
type SubscribeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeRequestMultiError) AllErrors() []error { return m }

// SubscribeRequestValidationError is the validation error returned by
// SubscribeRequest.Validate if the designated constraints aren't met.
type SubscribeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeRequestValidationError) ErrorName() string { return "SubscribeRequestValidationError" }

// Error satisfies the builtin error interface
func (e SubscribeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeRequestValidationError{}

// Validate checks the field values on GetSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSnapshotRequestMultiError, or nil if none found.
func (m *GetSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AggregateId

	if len(errors) > 0 {
		return GetSnapshotRequestMultiError(errors)
	}

	return nil
}

// GetSnapshotRequestMultiError is an error wrapping multiple validation errors
// returned by GetSnapshotRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSnapshotRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSnapshotRequestMultiError) AllErrors() []error { return m }

// GetSnapshotRequestValidationError is the validation error returned by
// GetSnapshotRequest.Validate if the designated constraints aren't met.
type GetSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSnapshotRequestValidationError) ErrorName() string {
	return "GetSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSnapshotRequestValidationError{}

// Validate checks the field values on PutSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutSnapshotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutSnapshotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutSnapshotRequestMultiError, or nil if none found.
func (m *PutSnapshotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutSnapshotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSnapshot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PutSnapshotRequestValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PutSnapshotRequestValidationError{
					field:  "Snapshot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSnapshot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PutSnapshotRequestValidationError{
				field:  "Snapshot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PutSnapshotRequestMultiError(errors)
	}

	return nil
}

// PutSnapshotRequestMultiError is an error wrapping multiple validation errors
// returned by PutSnapshotRequest.ValidateAll() if the designated constraints
// aren't met.
type PutSnapshotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutSnapshotRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutSnapshotRequestMultiError) AllErrors() []error { return m }

// PutSnapshotRequestValidationError is the validation error returned by
// PutSnapshotRequest.Validate if the designated constraints aren't met.
type PutSnapshotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutSnapshotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutSnapshotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutSnapshotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutSnapshotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutSnapshotRequestValidationError) ErrorName() string {
	return "PutSnapshotRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutSnapshotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutSnapshotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutSnapshotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutSnapshotRequestValidationError{}
