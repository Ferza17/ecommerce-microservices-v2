// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/event/service.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EventStore_Append_FullMethodName          = "/event.EventStore/Append"
	EventStore_ReadByAggregate_FullMethodName = "/event.EventStore/ReadByAggregate"
	EventStore_ReadByType_FullMethodName      = "/event.EventStore/ReadByType"
	EventStore_Subscribe_FullMethodName       = "/event.EventStore/Subscribe"
	EventStore_GetSnapshot_FullMethodName     = "/event.EventStore/GetSnapshot"
	EventStore_PutSnapshot_FullMethodName     = "/event.EventStore/PutSnapshot"
)

// EventStoreClient is the client API for EventStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStoreClient interface {
	Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error)
	ReadByAggregate(ctx context.Context, in *ReadByAggregateRequest, opts ...grpc.CallOption) (*ReadByAggregateResponse, error)
	ReadByType(ctx context.Context, in *ReadByTypeRequest, opts ...grpc.CallOption) (*ReadByTypeResponse, error)
	// Server-streaming: continuous feed for projectors
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error)
	GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error)
	PutSnapshot(ctx context.Context, in *PutSnapshotRequest, opts ...grpc.CallOption) (*PutSnapshotResponse, error)
}

type eventStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStoreClient(cc grpc.ClientConnInterface) EventStoreClient {
	return &eventStoreClient{cc}
}

func (c *eventStoreClient) Append(ctx context.Context, in *AppendRequest, opts ...grpc.CallOption) (*AppendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendResponse)
	err := c.cc.Invoke(ctx, EventStore_Append_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) ReadByAggregate(ctx context.Context, in *ReadByAggregateRequest, opts ...grpc.CallOption) (*ReadByAggregateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadByAggregateResponse)
	err := c.cc.Invoke(ctx, EventStore_ReadByAggregate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) ReadByType(ctx context.Context, in *ReadByTypeRequest, opts ...grpc.CallOption) (*ReadByTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadByTypeResponse)
	err := c.cc.Invoke(ctx, EventStore_ReadByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Event], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EventStore_ServiceDesc.Streams[0], EventStore_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, Event]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventStore_SubscribeClient = grpc.ServerStreamingClient[Event]

func (c *eventStoreClient) GetSnapshot(ctx context.Context, in *GetSnapshotRequest, opts ...grpc.CallOption) (*GetSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSnapshotResponse)
	err := c.cc.Invoke(ctx, EventStore_GetSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventStoreClient) PutSnapshot(ctx context.Context, in *PutSnapshotRequest, opts ...grpc.CallOption) (*PutSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutSnapshotResponse)
	err := c.cc.Invoke(ctx, EventStore_PutSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventStoreServer is the server API for EventStore service.
// All implementations should embed UnimplementedEventStoreServer
// for forward compatibility.
type EventStoreServer interface {
	Append(context.Context, *AppendRequest) (*AppendResponse, error)
	ReadByAggregate(context.Context, *ReadByAggregateRequest) (*ReadByAggregateResponse, error)
	ReadByType(context.Context, *ReadByTypeRequest) (*ReadByTypeResponse, error)
	// Server-streaming: continuous feed for projectors
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Event]) error
	GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error)
	PutSnapshot(context.Context, *PutSnapshotRequest) (*PutSnapshotResponse, error)
}

// UnimplementedEventStoreServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventStoreServer struct{}

func (UnimplementedEventStoreServer) Append(context.Context, *AppendRequest) (*AppendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Append not implemented")
}
func (UnimplementedEventStoreServer) ReadByAggregate(context.Context, *ReadByAggregateRequest) (*ReadByAggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadByAggregate not implemented")
}
func (UnimplementedEventStoreServer) ReadByType(context.Context, *ReadByTypeRequest) (*ReadByTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadByType not implemented")
}
func (UnimplementedEventStoreServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[Event]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEventStoreServer) GetSnapshot(context.Context, *GetSnapshotRequest) (*GetSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSnapshot not implemented")
}
func (UnimplementedEventStoreServer) PutSnapshot(context.Context, *PutSnapshotRequest) (*PutSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutSnapshot not implemented")
}
func (UnimplementedEventStoreServer) testEmbeddedByValue() {}

// UnsafeEventStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStoreServer will
// result in compilation errors.
type UnsafeEventStoreServer interface {
	mustEmbedUnimplementedEventStoreServer()
}

func RegisterEventStoreServer(s grpc.ServiceRegistrar, srv EventStoreServer) {
	// If the following call pancis, it indicates UnimplementedEventStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EventStore_ServiceDesc, srv)
}

func _EventStore_Append_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).Append(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStore_Append_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).Append(ctx, req.(*AppendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_ReadByAggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadByAggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).ReadByAggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStore_ReadByAggregate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).ReadByAggregate(ctx, req.(*ReadByAggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_ReadByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadByTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).ReadByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStore_ReadByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).ReadByType(ctx, req.(*ReadByTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventStoreServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, Event]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EventStore_SubscribeServer = grpc.ServerStreamingServer[Event]

func _EventStore_GetSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).GetSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStore_GetSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).GetSnapshot(ctx, req.(*GetSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventStore_PutSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventStoreServer).PutSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventStore_PutSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventStoreServer).PutSnapshot(ctx, req.(*PutSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventStore_ServiceDesc is the grpc.ServiceDesc for EventStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventStore",
	HandlerType: (*EventStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Append",
			Handler:    _EventStore_Append_Handler,
		},
		{
			MethodName: "ReadByAggregate",
			Handler:    _EventStore_ReadByAggregate_Handler,
		},
		{
			MethodName: "ReadByType",
			Handler:    _EventStore_ReadByType_Handler,
		},
		{
			MethodName: "GetSnapshot",
			Handler:    _EventStore_GetSnapshot_Handler,
		},
		{
			MethodName: "PutSnapshot",
			Handler:    _EventStore_PutSnapshot_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _EventStore_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/event/service.proto",
}
