// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/commerce/service.proto

package commerce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartService_AddToCart_FullMethodName                   = "/commerce.CartService/AddToCart"
	CartService_FindCartItemsWithPagination_FullMethodName = "/commerce.CartService/FindCartItemsWithPagination"
	CartService_DeleteCartItemById_FullMethodName          = "/commerce.CartService/DeleteCartItemById"
)

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error)
	FindCartItemsWithPagination(ctx context.Context, in *FindCartItemsWithPaginationRequest, opts ...grpc.CallOption) (*FindCartItemsWithPaginationResponse, error)
	DeleteCartItemById(ctx context.Context, in *DeleteCartItemByIdRequest, opts ...grpc.CallOption) (*DeleteCartItemByIdResponse, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) AddToCart(ctx context.Context, in *AddToCartRequest, opts ...grpc.CallOption) (*AddToCartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToCartResponse)
	err := c.cc.Invoke(ctx, CartService_AddToCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) FindCartItemsWithPagination(ctx context.Context, in *FindCartItemsWithPaginationRequest, opts ...grpc.CallOption) (*FindCartItemsWithPaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindCartItemsWithPaginationResponse)
	err := c.cc.Invoke(ctx, CartService_FindCartItemsWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DeleteCartItemById(ctx context.Context, in *DeleteCartItemByIdRequest, opts ...grpc.CallOption) (*DeleteCartItemByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCartItemByIdResponse)
	err := c.cc.Invoke(ctx, CartService_DeleteCartItemById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations should embed UnimplementedCartServiceServer
// for forward compatibility.
type CartServiceServer interface {
	AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error)
	FindCartItemsWithPagination(context.Context, *FindCartItemsWithPaginationRequest) (*FindCartItemsWithPaginationResponse, error)
	DeleteCartItemById(context.Context, *DeleteCartItemByIdRequest) (*DeleteCartItemByIdResponse, error)
}

// UnimplementedCartServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartServiceServer struct{}

func (UnimplementedCartServiceServer) AddToCart(context.Context, *AddToCartRequest) (*AddToCartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCartServiceServer) FindCartItemsWithPagination(context.Context, *FindCartItemsWithPaginationRequest) (*FindCartItemsWithPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCartItemsWithPagination not implemented")
}
func (UnimplementedCartServiceServer) DeleteCartItemById(context.Context, *DeleteCartItemByIdRequest) (*DeleteCartItemByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCartItemById not implemented")
}
func (UnimplementedCartServiceServer) testEmbeddedByValue() {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	// If the following call pancis, it indicates UnimplementedCartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_AddToCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddToCart(ctx, req.(*AddToCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_FindCartItemsWithPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCartItemsWithPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).FindCartItemsWithPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_FindCartItemsWithPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).FindCartItemsWithPagination(ctx, req.(*FindCartItemsWithPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DeleteCartItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartItemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteCartItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_DeleteCartItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteCartItemById(ctx, req.(*DeleteCartItemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commerce.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCart",
			Handler:    _CartService_AddToCart_Handler,
		},
		{
			MethodName: "FindCartItemsWithPagination",
			Handler:    _CartService_FindCartItemsWithPagination_Handler,
		},
		{
			MethodName: "DeleteCartItemById",
			Handler:    _CartService_DeleteCartItemById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/commerce/service.proto",
}

const (
	WishlistService_FindWishlistItemWithPagination_FullMethodName = "/commerce.WishlistService/FindWishlistItemWithPagination"
	WishlistService_AddToWishlist_FullMethodName                  = "/commerce.WishlistService/AddToWishlist"
	WishlistService_DeleteWishlistItemById_FullMethodName         = "/commerce.WishlistService/DeleteWishlistItemById"
)

// WishlistServiceClient is the client API for WishlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WishlistServiceClient interface {
	// QUERY
	FindWishlistItemWithPagination(ctx context.Context, in *FindWishlistItemWithPaginationRequest, opts ...grpc.CallOption) (*FindWishlistItemWithPaginationResponse, error)
	// COMMAND
	AddToWishlist(ctx context.Context, in *AddToWishlistRequest, opts ...grpc.CallOption) (*AddToWishlistResponse, error)
	DeleteWishlistItemById(ctx context.Context, in *DeleteWishlistItemByIdRequest, opts ...grpc.CallOption) (*DeleteWishlistItemByIdResponse, error)
}

type wishlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishlistServiceClient(cc grpc.ClientConnInterface) WishlistServiceClient {
	return &wishlistServiceClient{cc}
}

func (c *wishlistServiceClient) FindWishlistItemWithPagination(ctx context.Context, in *FindWishlistItemWithPaginationRequest, opts ...grpc.CallOption) (*FindWishlistItemWithPaginationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindWishlistItemWithPaginationResponse)
	err := c.cc.Invoke(ctx, WishlistService_FindWishlistItemWithPagination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) AddToWishlist(ctx context.Context, in *AddToWishlistRequest, opts ...grpc.CallOption) (*AddToWishlistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddToWishlistResponse)
	err := c.cc.Invoke(ctx, WishlistService_AddToWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) DeleteWishlistItemById(ctx context.Context, in *DeleteWishlistItemByIdRequest, opts ...grpc.CallOption) (*DeleteWishlistItemByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteWishlistItemByIdResponse)
	err := c.cc.Invoke(ctx, WishlistService_DeleteWishlistItemById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishlistServiceServer is the server API for WishlistService service.
// All implementations should embed UnimplementedWishlistServiceServer
// for forward compatibility.
type WishlistServiceServer interface {
	// QUERY
	FindWishlistItemWithPagination(context.Context, *FindWishlistItemWithPaginationRequest) (*FindWishlistItemWithPaginationResponse, error)
	// COMMAND
	AddToWishlist(context.Context, *AddToWishlistRequest) (*AddToWishlistResponse, error)
	DeleteWishlistItemById(context.Context, *DeleteWishlistItemByIdRequest) (*DeleteWishlistItemByIdResponse, error)
}

// UnimplementedWishlistServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWishlistServiceServer struct{}

func (UnimplementedWishlistServiceServer) FindWishlistItemWithPagination(context.Context, *FindWishlistItemWithPaginationRequest) (*FindWishlistItemWithPaginationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWishlistItemWithPagination not implemented")
}
func (UnimplementedWishlistServiceServer) AddToWishlist(context.Context, *AddToWishlistRequest) (*AddToWishlistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) DeleteWishlistItemById(context.Context, *DeleteWishlistItemByIdRequest) (*DeleteWishlistItemByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishlistItemById not implemented")
}
func (UnimplementedWishlistServiceServer) testEmbeddedByValue() {}

// UnsafeWishlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WishlistServiceServer will
// result in compilation errors.
type UnsafeWishlistServiceServer interface {
	mustEmbedUnimplementedWishlistServiceServer()
}

func RegisterWishlistServiceServer(s grpc.ServiceRegistrar, srv WishlistServiceServer) {
	// If the following call pancis, it indicates UnimplementedWishlistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WishlistService_ServiceDesc, srv)
}

func _WishlistService_FindWishlistItemWithPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWishlistItemWithPaginationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).FindWishlistItemWithPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_FindWishlistItemWithPagination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).FindWishlistItemWithPagination(ctx, req.(*FindWishlistItemWithPaginationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_AddToWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddToWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).AddToWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_AddToWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).AddToWishlist(ctx, req.(*AddToWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_DeleteWishlistItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishlistItemByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).DeleteWishlistItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_DeleteWishlistItemById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).DeleteWishlistItemById(ctx, req.(*DeleteWishlistItemByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WishlistService_ServiceDesc is the grpc.ServiceDesc for WishlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WishlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commerce.WishlistService",
	HandlerType: (*WishlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindWishlistItemWithPagination",
			Handler:    _WishlistService_FindWishlistItemWithPagination_Handler,
		},
		{
			MethodName: "AddToWishlist",
			Handler:    _WishlistService_AddToWishlist_Handler,
		},
		{
			MethodName: "DeleteWishlistItemById",
			Handler:    _WishlistService_DeleteWishlistItemById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/commerce/service.proto",
}
