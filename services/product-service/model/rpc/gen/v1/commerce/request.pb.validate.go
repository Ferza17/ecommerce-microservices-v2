// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/commerce/request.proto

package commerce

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AddToCartRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddToCartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddToCartRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddToCartRequestMultiError, or nil if none found.
func (m *AddToCartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddToCartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProductId()) < 1 {
		err := AddToCartRequestValidationError{
			field:  "ProductId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetQty() <= 0 {
		err := AddToCartRequestValidationError{
			field:  "Qty",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddToCartRequestMultiError(errors)
	}

	return nil
}

// AddToCartRequestMultiError is an error wrapping multiple validation errors
// returned by AddToCartRequest.ValidateAll() if the designated constraints
// aren't met.
type AddToCartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddToCartRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddToCartRequestMultiError) AllErrors() []error { return m }

// AddToCartRequestValidationError is the validation error returned by
// AddToCartRequest.Validate if the designated constraints aren't met.
type AddToCartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToCartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToCartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToCartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToCartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToCartRequestValidationError) ErrorName() string { return "AddToCartRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddToCartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToCartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToCartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToCartRequestValidationError{}

// Validate checks the field values on FindCartItemsWithPaginationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindCartItemsWithPaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCartItemsWithPaginationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindCartItemsWithPaginationRequestMultiError, or nil if none found.
func (m *FindCartItemsWithPaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCartItemsWithPaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		err := FindCartItemsWithPaginationRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetProductIds()) > 0 {

	}

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return FindCartItemsWithPaginationRequestMultiError(errors)
	}

	return nil
}

// FindCartItemsWithPaginationRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindCartItemsWithPaginationRequest.ValidateAll() if the designated
// constraints aren't met.
type FindCartItemsWithPaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCartItemsWithPaginationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCartItemsWithPaginationRequestMultiError) AllErrors() []error { return m }

// FindCartItemsWithPaginationRequestValidationError is the validation error
// returned by FindCartItemsWithPaginationRequest.Validate if the designated
// constraints aren't met.
type FindCartItemsWithPaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCartItemsWithPaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCartItemsWithPaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCartItemsWithPaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCartItemsWithPaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCartItemsWithPaginationRequestValidationError) ErrorName() string {
	return "FindCartItemsWithPaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindCartItemsWithPaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCartItemsWithPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCartItemsWithPaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCartItemsWithPaginationRequestValidationError{}

// Validate checks the field values on DeleteCartItemByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemByIdRequestMultiError, or nil if none found.
func (m *DeleteCartItemByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCartItemByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteCartItemByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCartItemByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteCartItemByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemByIdRequestMultiError) AllErrors() []error { return m }

// DeleteCartItemByIdRequestValidationError is the validation error returned by
// DeleteCartItemByIdRequest.Validate if the designated constraints aren't met.
type DeleteCartItemByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemByIdRequestValidationError) ErrorName() string {
	return "DeleteCartItemByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemByIdRequestValidationError{}

// Validate checks the field values on AddToWishlistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddToWishlistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddToWishlistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddToWishlistRequestMultiError, or nil if none found.
func (m *AddToWishlistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddToWishlistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ProductId

	if len(errors) > 0 {
		return AddToWishlistRequestMultiError(errors)
	}

	return nil
}

// AddToWishlistRequestMultiError is an error wrapping multiple validation
// errors returned by AddToWishlistRequest.ValidateAll() if the designated
// constraints aren't met.
type AddToWishlistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddToWishlistRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddToWishlistRequestMultiError) AllErrors() []error { return m }

// AddToWishlistRequestValidationError is the validation error returned by
// AddToWishlistRequest.Validate if the designated constraints aren't met.
type AddToWishlistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddToWishlistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddToWishlistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddToWishlistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddToWishlistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddToWishlistRequestValidationError) ErrorName() string {
	return "AddToWishlistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddToWishlistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddToWishlistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddToWishlistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddToWishlistRequestValidationError{}

// Validate checks the field values on FindWishlistItemWithPaginationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindWishlistItemWithPaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindWishlistItemWithPaginationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindWishlistItemWithPaginationRequestMultiError, or nil if none found.
func (m *FindWishlistItemWithPaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindWishlistItemWithPaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return FindWishlistItemWithPaginationRequestMultiError(errors)
	}

	return nil
}

// FindWishlistItemWithPaginationRequestMultiError is an error wrapping
// multiple validation errors returned by
// FindWishlistItemWithPaginationRequest.ValidateAll() if the designated
// constraints aren't met.
type FindWishlistItemWithPaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindWishlistItemWithPaginationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindWishlistItemWithPaginationRequestMultiError) AllErrors() []error { return m }

// FindWishlistItemWithPaginationRequestValidationError is the validation error
// returned by FindWishlistItemWithPaginationRequest.Validate if the
// designated constraints aren't met.
type FindWishlistItemWithPaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindWishlistItemWithPaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindWishlistItemWithPaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindWishlistItemWithPaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindWishlistItemWithPaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindWishlistItemWithPaginationRequestValidationError) ErrorName() string {
	return "FindWishlistItemWithPaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindWishlistItemWithPaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindWishlistItemWithPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindWishlistItemWithPaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindWishlistItemWithPaginationRequestValidationError{}

// Validate checks the field values on DeleteWishlistItemByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWishlistItemByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWishlistItemByIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWishlistItemByIdRequestMultiError, or nil if none found.
func (m *DeleteWishlistItemByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWishlistItemByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteWishlistItemByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteWishlistItemByIdRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteWishlistItemByIdRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteWishlistItemByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWishlistItemByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWishlistItemByIdRequestMultiError) AllErrors() []error { return m }

// DeleteWishlistItemByIdRequestValidationError is the validation error
// returned by DeleteWishlistItemByIdRequest.Validate if the designated
// constraints aren't met.
type DeleteWishlistItemByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWishlistItemByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWishlistItemByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWishlistItemByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWishlistItemByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWishlistItemByIdRequestValidationError) ErrorName() string {
	return "DeleteWishlistItemByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWishlistItemByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWishlistItemByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWishlistItemByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWishlistItemByIdRequestValidationError{}
