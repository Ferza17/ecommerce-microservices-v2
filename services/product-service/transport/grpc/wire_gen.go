// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package grpc

import (
	"github.com/ferza17/ecommerce-microservices-v2/product-service/infrastructure/elasticsearch"
	"github.com/ferza17/ecommerce-microservices-v2/product-service/infrastructure/kafka"
	"github.com/ferza17/ecommerce-microservices-v2/product-service/infrastructure/postgres"
	"github.com/ferza17/ecommerce-microservices-v2/product-service/infrastructure/rabbitmq"
	"github.com/ferza17/ecommerce-microservices-v2/product-service/infrastructure/service/user"
	"github.com/ferza17/ecommerce-microservices-v2/product-service/infrastructure/telemetry"
	"github.com/ferza17/ecommerce-microservices-v2/product-service/module/product/presenter"
	elasticsearch2 "github.com/ferza17/ecommerce-microservices-v2/product-service/module/product/repository/elasticsearch"
	postgres2 "github.com/ferza17/ecommerce-microservices-v2/product-service/module/product/repository/postgres"
	"github.com/ferza17/ecommerce-microservices-v2/product-service/module/product/usecase"
	"github.com/ferza17/ecommerce-microservices-v2/product-service/pkg/logger"
)

// Injectors from wire.go:

func ProvideGrpcTransport() *GrpcTransport {
	iZapLogger := logger.NewZapLogger()
	iTelemetryInfrastructure := telemetry.NewTelemetry(iZapLogger)
	postgresSQL := postgres.NewPostgresqlInfrastructure(iZapLogger)
	iProductPostgresqlRepository := postgres2.NewProductPostgresqlRepository(postgresSQL, iTelemetryInfrastructure, iZapLogger)
	iKafkaInfrastructure := kafka.NewKafkaInfrastructure(iZapLogger, iTelemetryInfrastructure)
	iRabbitMQInfrastructure := rabbitmq.NewRabbitMQInfrastructure(iTelemetryInfrastructure, iZapLogger)
	iElasticsearchInfrastructure := elasticsearch.NewElasticsearchInfrastructure(iTelemetryInfrastructure, iZapLogger)
	iProductElasticsearchRepository := elasticsearch2.NewProductElasticsearchRepository(iElasticsearchInfrastructure, iTelemetryInfrastructure, iZapLogger)
	iProductUseCase := usecase.NewProductUseCase(postgresSQL, iProductPostgresqlRepository, iKafkaInfrastructure, iRabbitMQInfrastructure, iProductElasticsearchRepository, iTelemetryInfrastructure, iZapLogger)
	iUserService := user.NewUserService(iZapLogger)
	productPresenter := presenter.NewProductPresenter(iProductUseCase, iTelemetryInfrastructure, iZapLogger, iUserService)
	grpcTransport := NewServer(iZapLogger, iTelemetryInfrastructure, productPresenter, iUserService)
	return grpcTransport
}
