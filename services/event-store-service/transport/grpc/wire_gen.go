// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package grpc

import (
	"github.com/ferza17/ecommerce-microservices-v2/event-store-service/infrastructure/mongodb"
	"github.com/ferza17/ecommerce-microservices-v2/event-store-service/infrastructure/rabbitmq"
	"github.com/ferza17/ecommerce-microservices-v2/event-store-service/infrastructure/telemetry"
	"github.com/ferza17/ecommerce-microservices-v2/event-store-service/module/event/presenter"
	mongodb2 "github.com/ferza17/ecommerce-microservices-v2/event-store-service/module/event/repository/mongodb"
	"github.com/ferza17/ecommerce-microservices-v2/event-store-service/module/event/usecase"
	"github.com/ferza17/ecommerce-microservices-v2/event-store-service/pkg/logger"
)

// Injectors from wire.go:

func Provide() *Transport {
	iZapLogger := logger.NewZapLogger()
	iTelemetryInfrastructure := telemetry.NewTelemetry(iZapLogger)
	iMongoDBInfrastructure := mongodb.NewMongoDBInfrastructure(iZapLogger)
	iEventRepository := mongodb2.NewEventRepository(iMongoDBInfrastructure, iTelemetryInfrastructure, iZapLogger)
	iRabbitMQInfrastructure := rabbitmq.NewRabbitMQInfrastructure(iTelemetryInfrastructure, iZapLogger)
	iEventUseCase := usecase.NewEventStoreUseCase(iEventRepository, iRabbitMQInfrastructure, iTelemetryInfrastructure, iZapLogger)
	iEventPresenter := presenter.NewEventPresenter(iEventUseCase, iTelemetryInfrastructure, iZapLogger)
	transport := NewTransport(iZapLogger, iTelemetryInfrastructure, iEventPresenter)
	return transport
}
