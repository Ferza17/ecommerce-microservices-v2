// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/commerce/response.proto

package commerce

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCartItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCartItemResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCartItemResponseMultiError, or nil if none found.
func (m *CreateCartItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCartItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateCartItemResponseMultiError(errors)
	}

	return nil
}

// CreateCartItemResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCartItemResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCartItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCartItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCartItemResponseMultiError) AllErrors() []error { return m }

// CreateCartItemResponseValidationError is the validation error returned by
// CreateCartItemResponse.Validate if the designated constraints aren't met.
type CreateCartItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCartItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCartItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCartItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCartItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCartItemResponseValidationError) ErrorName() string {
	return "CreateCartItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCartItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCartItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCartItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCartItemResponseValidationError{}

// Validate checks the field values on UpdateCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCartItemByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCartItemByIdResponseMultiError, or nil if none found.
func (m *UpdateCartItemByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCartItemByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateCartItemByIdResponseMultiError(errors)
	}

	return nil
}

// UpdateCartItemByIdResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateCartItemByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateCartItemByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCartItemByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCartItemByIdResponseMultiError) AllErrors() []error { return m }

// UpdateCartItemByIdResponseValidationError is the validation error returned
// by UpdateCartItemByIdResponse.Validate if the designated constraints aren't met.
type UpdateCartItemByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCartItemByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCartItemByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCartItemByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCartItemByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCartItemByIdResponseValidationError) ErrorName() string {
	return "UpdateCartItemByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCartItemByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCartItemByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCartItemByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCartItemByIdResponseValidationError{}

// Validate checks the field values on FindCartItemsWithPaginationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindCartItemsWithPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindCartItemsWithPaginationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindCartItemsWithPaginationResponseMultiError, or nil if none found.
func (m *FindCartItemsWithPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindCartItemsWithPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindCartItemsWithPaginationResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindCartItemsWithPaginationResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindCartItemsWithPaginationResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Total

	if len(errors) > 0 {
		return FindCartItemsWithPaginationResponseMultiError(errors)
	}

	return nil
}

// FindCartItemsWithPaginationResponseMultiError is an error wrapping multiple
// validation errors returned by
// FindCartItemsWithPaginationResponse.ValidateAll() if the designated
// constraints aren't met.
type FindCartItemsWithPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindCartItemsWithPaginationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindCartItemsWithPaginationResponseMultiError) AllErrors() []error { return m }

// FindCartItemsWithPaginationResponseValidationError is the validation error
// returned by FindCartItemsWithPaginationResponse.Validate if the designated
// constraints aren't met.
type FindCartItemsWithPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindCartItemsWithPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindCartItemsWithPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindCartItemsWithPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindCartItemsWithPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindCartItemsWithPaginationResponseValidationError) ErrorName() string {
	return "FindCartItemsWithPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindCartItemsWithPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindCartItemsWithPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindCartItemsWithPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindCartItemsWithPaginationResponseValidationError{}

// Validate checks the field values on DeleteCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCartItemByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCartItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCartItemByIdResponseMultiError, or nil if none found.
func (m *DeleteCartItemByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCartItemByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteCartItemByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteCartItemByIdResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCartItemByIdResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCartItemByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCartItemByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCartItemByIdResponseMultiError) AllErrors() []error { return m }

// DeleteCartItemByIdResponseValidationError is the validation error returned
// by DeleteCartItemByIdResponse.Validate if the designated constraints aren't met.
type DeleteCartItemByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCartItemByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCartItemByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCartItemByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCartItemByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCartItemByIdResponseValidationError) ErrorName() string {
	return "DeleteCartItemByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCartItemByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCartItemByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCartItemByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCartItemByIdResponseValidationError{}

// Validate checks the field values on CreateWishlistItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWishlistItemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWishlistItemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWishlistItemResponseMultiError, or nil if none found.
func (m *CreateWishlistItemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWishlistItemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateWishlistItemResponseMultiError(errors)
	}

	return nil
}

// CreateWishlistItemResponseMultiError is an error wrapping multiple
// validation errors returned by CreateWishlistItemResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateWishlistItemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWishlistItemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWishlistItemResponseMultiError) AllErrors() []error { return m }

// CreateWishlistItemResponseValidationError is the validation error returned
// by CreateWishlistItemResponse.Validate if the designated constraints aren't met.
type CreateWishlistItemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWishlistItemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWishlistItemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWishlistItemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWishlistItemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWishlistItemResponseValidationError) ErrorName() string {
	return "CreateWishlistItemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWishlistItemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWishlistItemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWishlistItemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWishlistItemResponseValidationError{}

// Validate checks the field values on FindWishlistItemWithPaginationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *FindWishlistItemWithPaginationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// FindWishlistItemWithPaginationResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// FindWishlistItemWithPaginationResponseMultiError, or nil if none found.
func (m *FindWishlistItemWithPaginationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindWishlistItemWithPaginationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FindWishlistItemWithPaginationResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FindWishlistItemWithPaginationResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FindWishlistItemWithPaginationResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Page

	// no validation rules for Limit

	if len(errors) > 0 {
		return FindWishlistItemWithPaginationResponseMultiError(errors)
	}

	return nil
}

// FindWishlistItemWithPaginationResponseMultiError is an error wrapping
// multiple validation errors returned by
// FindWishlistItemWithPaginationResponse.ValidateAll() if the designated
// constraints aren't met.
type FindWishlistItemWithPaginationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindWishlistItemWithPaginationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindWishlistItemWithPaginationResponseMultiError) AllErrors() []error { return m }

// FindWishlistItemWithPaginationResponseValidationError is the validation
// error returned by FindWishlistItemWithPaginationResponse.Validate if the
// designated constraints aren't met.
type FindWishlistItemWithPaginationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindWishlistItemWithPaginationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindWishlistItemWithPaginationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindWishlistItemWithPaginationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindWishlistItemWithPaginationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindWishlistItemWithPaginationResponseValidationError) ErrorName() string {
	return "FindWishlistItemWithPaginationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindWishlistItemWithPaginationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindWishlistItemWithPaginationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindWishlistItemWithPaginationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindWishlistItemWithPaginationResponseValidationError{}

// Validate checks the field values on DeleteWishlistItemByIdResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWishlistItemByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWishlistItemByIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteWishlistItemByIdResponseMultiError, or nil if none found.
func (m *DeleteWishlistItemByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWishlistItemByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteWishlistItemByIdResponseMultiError(errors)
	}

	return nil
}

// DeleteWishlistItemByIdResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteWishlistItemByIdResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteWishlistItemByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWishlistItemByIdResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWishlistItemByIdResponseMultiError) AllErrors() []error { return m }

// DeleteWishlistItemByIdResponseValidationError is the validation error
// returned by DeleteWishlistItemByIdResponse.Validate if the designated
// constraints aren't met.
type DeleteWishlistItemByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWishlistItemByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWishlistItemByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWishlistItemByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWishlistItemByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWishlistItemByIdResponseValidationError) ErrorName() string {
	return "DeleteWishlistItemByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWishlistItemByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWishlistItemByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWishlistItemByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWishlistItemByIdResponseValidationError{}
