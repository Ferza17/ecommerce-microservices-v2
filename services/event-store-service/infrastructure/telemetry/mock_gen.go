// Code generated by mocktail; DO NOT EDIT.

package telemetry

import (
	"context"
	"net/http"
	"testing"
	"time"

	"github.com/rabbitmq/amqp091-go"
	"github.com/stretchr/testify/mock"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/trace"
)

// iTelemetryInfrastructureMock mock of ITelemetryInfrastructure.
type iTelemetryInfrastructureMock struct{ mock.Mock }

// NewITelemetryInfrastructureMock creates a new iTelemetryInfrastructureMock.
func NewITelemetryInfrastructureMock(tb testing.TB) *iTelemetryInfrastructureMock {
	tb.Helper()

	m := &iTelemetryInfrastructureMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *iTelemetryInfrastructureMock) InjectSpanToTextMapPropagator(_ context.Context) propagation.MapCarrier {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() propagation.MapCarrier); ok {
		return _rf()
	}

	_ra0, _ := _ret.Get(0).(propagation.MapCarrier)

	return _ra0
}

func (_m *iTelemetryInfrastructureMock) OnInjectSpanToTextMapPropagator() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return &iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall{Call: _m.Mock.On("InjectSpanToTextMapPropagator"), Parent: _m}
}

func (_m *iTelemetryInfrastructureMock) OnInjectSpanToTextMapPropagatorRaw() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return &iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall{Call: _m.Mock.On("InjectSpanToTextMapPropagator"), Parent: _m}
}

type iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall struct {
	*mock.Call
	Parent *iTelemetryInfrastructureMock
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) Panic(msg string) *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) Once() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) Twice() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) Times(i int) *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) WaitUntil(w <-chan time.Time) *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) After(d time.Duration) *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) Run(fn func(args mock.Arguments)) *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) Maybe() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) TypedReturns(a propagation.MapCarrier) *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) ReturnsFn(fn func() propagation.MapCarrier) *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) TypedRun(fn func()) *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnInjectSpanToTextMapPropagator() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagator()
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnShutdown() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdown()
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnStartSpanFromContext(fnName string) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContext(fnName)
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnStartSpanFromHttpRequest(r *http.Request, fnName string) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequest(r, fnName)
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnStartSpanFromRabbitMQHeader(headers amqp091.Table, fnName string) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeader(headers, fnName)
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnStartSpanFromRpcMetadata(fnName string) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadata(fnName)
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnInjectSpanToTextMapPropagatorRaw() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagatorRaw()
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnShutdownRaw() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdownRaw()
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnStartSpanFromContextRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContextRaw(fnName)
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnStartSpanFromHttpRequestRaw(r interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequestRaw(r, fnName)
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnStartSpanFromRabbitMQHeaderRaw(headers interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeaderRaw(headers, fnName)
}

func (_c *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall) OnStartSpanFromRpcMetadataRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadataRaw(fnName)
}

func (_m *iTelemetryInfrastructureMock) Shutdown(_ context.Context) error {
	_ret := _m.Called()

	if _rf, ok := _ret.Get(0).(func() error); ok {
		return _rf()
	}

	_ra0 := _ret.Error(0)

	return _ra0
}

func (_m *iTelemetryInfrastructureMock) OnShutdown() *iTelemetryInfrastructureShutdownCall {
	return &iTelemetryInfrastructureShutdownCall{Call: _m.Mock.On("Shutdown"), Parent: _m}
}

func (_m *iTelemetryInfrastructureMock) OnShutdownRaw() *iTelemetryInfrastructureShutdownCall {
	return &iTelemetryInfrastructureShutdownCall{Call: _m.Mock.On("Shutdown"), Parent: _m}
}

type iTelemetryInfrastructureShutdownCall struct {
	*mock.Call
	Parent *iTelemetryInfrastructureMock
}

func (_c *iTelemetryInfrastructureShutdownCall) Panic(msg string) *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) Once() *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) Twice() *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) Times(i int) *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) WaitUntil(w <-chan time.Time) *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) After(d time.Duration) *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) Run(fn func(args mock.Arguments)) *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) Maybe() *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) TypedReturns(a error) *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Return(a)
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) ReturnsFn(fn func() error) *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) TypedRun(fn func()) *iTelemetryInfrastructureShutdownCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *iTelemetryInfrastructureShutdownCall) OnInjectSpanToTextMapPropagator() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagator()
}

func (_c *iTelemetryInfrastructureShutdownCall) OnShutdown() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdown()
}

func (_c *iTelemetryInfrastructureShutdownCall) OnStartSpanFromContext(fnName string) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContext(fnName)
}

func (_c *iTelemetryInfrastructureShutdownCall) OnStartSpanFromHttpRequest(r *http.Request, fnName string) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequest(r, fnName)
}

func (_c *iTelemetryInfrastructureShutdownCall) OnStartSpanFromRabbitMQHeader(headers amqp091.Table, fnName string) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeader(headers, fnName)
}

func (_c *iTelemetryInfrastructureShutdownCall) OnStartSpanFromRpcMetadata(fnName string) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadata(fnName)
}

func (_c *iTelemetryInfrastructureShutdownCall) OnInjectSpanToTextMapPropagatorRaw() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagatorRaw()
}

func (_c *iTelemetryInfrastructureShutdownCall) OnShutdownRaw() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdownRaw()
}

func (_c *iTelemetryInfrastructureShutdownCall) OnStartSpanFromContextRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContextRaw(fnName)
}

func (_c *iTelemetryInfrastructureShutdownCall) OnStartSpanFromHttpRequestRaw(r interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequestRaw(r, fnName)
}

func (_c *iTelemetryInfrastructureShutdownCall) OnStartSpanFromRabbitMQHeaderRaw(headers interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeaderRaw(headers, fnName)
}

func (_c *iTelemetryInfrastructureShutdownCall) OnStartSpanFromRpcMetadataRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadataRaw(fnName)
}

func (_m *iTelemetryInfrastructureMock) StartSpanFromContext(_ context.Context, fnName string) (context.Context, trace.Span) {
	_ret := _m.Called(fnName)

	if _rf, ok := _ret.Get(0).(func(string) (context.Context, trace.Span)); ok {
		return _rf(fnName)
	}

	_ra0, _ := _ret.Get(0).(context.Context)
	_rb1, _ := _ret.Get(1).(trace.Span)

	return _ra0, _rb1
}

func (_m *iTelemetryInfrastructureMock) OnStartSpanFromContext(fnName string) *iTelemetryInfrastructureStartSpanFromContextCall {
	return &iTelemetryInfrastructureStartSpanFromContextCall{Call: _m.Mock.On("StartSpanFromContext", fnName), Parent: _m}
}

func (_m *iTelemetryInfrastructureMock) OnStartSpanFromContextRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromContextCall {
	return &iTelemetryInfrastructureStartSpanFromContextCall{Call: _m.Mock.On("StartSpanFromContext", fnName), Parent: _m}
}

type iTelemetryInfrastructureStartSpanFromContextCall struct {
	*mock.Call
	Parent *iTelemetryInfrastructureMock
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) Panic(msg string) *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) Once() *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) Twice() *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) Times(i int) *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) WaitUntil(w <-chan time.Time) *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) After(d time.Duration) *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) Run(fn func(args mock.Arguments)) *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) Maybe() *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) TypedReturns(a context.Context, b trace.Span) *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) ReturnsFn(fn func(string) (context.Context, trace.Span)) *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) TypedRun(fn func(string)) *iTelemetryInfrastructureStartSpanFromContextCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_fnName := args.String(0)
		fn(_fnName)
	})
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnInjectSpanToTextMapPropagator() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagator()
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnShutdown() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdown()
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnStartSpanFromContext(fnName string) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContext(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnStartSpanFromHttpRequest(r *http.Request, fnName string) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequest(r, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnStartSpanFromRabbitMQHeader(headers amqp091.Table, fnName string) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeader(headers, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnStartSpanFromRpcMetadata(fnName string) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadata(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnInjectSpanToTextMapPropagatorRaw() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagatorRaw()
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnShutdownRaw() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdownRaw()
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnStartSpanFromContextRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContextRaw(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnStartSpanFromHttpRequestRaw(r interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequestRaw(r, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnStartSpanFromRabbitMQHeaderRaw(headers interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeaderRaw(headers, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromContextCall) OnStartSpanFromRpcMetadataRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadataRaw(fnName)
}

func (_m *iTelemetryInfrastructureMock) StartSpanFromHttpRequest(r *http.Request, fnName string) (context.Context, trace.Span) {
	_ret := _m.Called(r, fnName)

	if _rf, ok := _ret.Get(0).(func(*http.Request, string) (context.Context, trace.Span)); ok {
		return _rf(r, fnName)
	}

	_ra0, _ := _ret.Get(0).(context.Context)
	_rb1, _ := _ret.Get(1).(trace.Span)

	return _ra0, _rb1
}

func (_m *iTelemetryInfrastructureMock) OnStartSpanFromHttpRequest(r *http.Request, fnName string) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return &iTelemetryInfrastructureStartSpanFromHttpRequestCall{Call: _m.Mock.On("StartSpanFromHttpRequest", r, fnName), Parent: _m}
}

func (_m *iTelemetryInfrastructureMock) OnStartSpanFromHttpRequestRaw(r interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return &iTelemetryInfrastructureStartSpanFromHttpRequestCall{Call: _m.Mock.On("StartSpanFromHttpRequest", r, fnName), Parent: _m}
}

type iTelemetryInfrastructureStartSpanFromHttpRequestCall struct {
	*mock.Call
	Parent *iTelemetryInfrastructureMock
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) Panic(msg string) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) Once() *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) Twice() *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) Times(i int) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) WaitUntil(w <-chan time.Time) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) After(d time.Duration) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) Run(fn func(args mock.Arguments)) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) Maybe() *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) TypedReturns(a context.Context, b trace.Span) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) ReturnsFn(fn func(*http.Request, string) (context.Context, trace.Span)) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) TypedRun(fn func(*http.Request, string)) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_r, _ := args.Get(0).(*http.Request)
		_fnName := args.String(1)
		fn(_r, _fnName)
	})
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnInjectSpanToTextMapPropagator() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagator()
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnShutdown() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdown()
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnStartSpanFromContext(fnName string) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContext(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnStartSpanFromHttpRequest(r *http.Request, fnName string) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequest(r, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnStartSpanFromRabbitMQHeader(headers amqp091.Table, fnName string) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeader(headers, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnStartSpanFromRpcMetadata(fnName string) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadata(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnInjectSpanToTextMapPropagatorRaw() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagatorRaw()
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnShutdownRaw() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdownRaw()
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnStartSpanFromContextRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContextRaw(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnStartSpanFromHttpRequestRaw(r interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequestRaw(r, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnStartSpanFromRabbitMQHeaderRaw(headers interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeaderRaw(headers, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromHttpRequestCall) OnStartSpanFromRpcMetadataRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadataRaw(fnName)
}

func (_m *iTelemetryInfrastructureMock) StartSpanFromRabbitMQHeader(_ context.Context, headers amqp091.Table, fnName string) (context.Context, trace.Span) {
	_ret := _m.Called(headers, fnName)

	if _rf, ok := _ret.Get(0).(func(amqp091.Table, string) (context.Context, trace.Span)); ok {
		return _rf(headers, fnName)
	}

	_ra0, _ := _ret.Get(0).(context.Context)
	_rb1, _ := _ret.Get(1).(trace.Span)

	return _ra0, _rb1
}

func (_m *iTelemetryInfrastructureMock) OnStartSpanFromRabbitMQHeader(headers amqp091.Table, fnName string) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return &iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall{Call: _m.Mock.On("StartSpanFromRabbitMQHeader", headers, fnName), Parent: _m}
}

func (_m *iTelemetryInfrastructureMock) OnStartSpanFromRabbitMQHeaderRaw(headers interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return &iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall{Call: _m.Mock.On("StartSpanFromRabbitMQHeader", headers, fnName), Parent: _m}
}

type iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall struct {
	*mock.Call
	Parent *iTelemetryInfrastructureMock
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) Panic(msg string) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) Once() *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) Twice() *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) Times(i int) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) WaitUntil(w <-chan time.Time) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) After(d time.Duration) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) Run(fn func(args mock.Arguments)) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) Maybe() *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) TypedReturns(a context.Context, b trace.Span) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) ReturnsFn(fn func(amqp091.Table, string) (context.Context, trace.Span)) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) TypedRun(fn func(amqp091.Table, string)) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_headers, _ := args.Get(0).(amqp091.Table)
		_fnName := args.String(1)
		fn(_headers, _fnName)
	})
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnInjectSpanToTextMapPropagator() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagator()
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnShutdown() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdown()
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnStartSpanFromContext(fnName string) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContext(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnStartSpanFromHttpRequest(r *http.Request, fnName string) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequest(r, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnStartSpanFromRabbitMQHeader(headers amqp091.Table, fnName string) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeader(headers, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnStartSpanFromRpcMetadata(fnName string) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadata(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnInjectSpanToTextMapPropagatorRaw() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagatorRaw()
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnShutdownRaw() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdownRaw()
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnStartSpanFromContextRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContextRaw(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnStartSpanFromHttpRequestRaw(r interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequestRaw(r, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnStartSpanFromRabbitMQHeaderRaw(headers interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeaderRaw(headers, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall) OnStartSpanFromRpcMetadataRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadataRaw(fnName)
}

func (_m *iTelemetryInfrastructureMock) StartSpanFromRpcMetadata(_ context.Context, fnName string) (context.Context, trace.Span) {
	_ret := _m.Called(fnName)

	if _rf, ok := _ret.Get(0).(func(string) (context.Context, trace.Span)); ok {
		return _rf(fnName)
	}

	_ra0, _ := _ret.Get(0).(context.Context)
	_rb1, _ := _ret.Get(1).(trace.Span)

	return _ra0, _rb1
}

func (_m *iTelemetryInfrastructureMock) OnStartSpanFromRpcMetadata(fnName string) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return &iTelemetryInfrastructureStartSpanFromRpcMetadataCall{Call: _m.Mock.On("StartSpanFromRpcMetadata", fnName), Parent: _m}
}

func (_m *iTelemetryInfrastructureMock) OnStartSpanFromRpcMetadataRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return &iTelemetryInfrastructureStartSpanFromRpcMetadataCall{Call: _m.Mock.On("StartSpanFromRpcMetadata", fnName), Parent: _m}
}

type iTelemetryInfrastructureStartSpanFromRpcMetadataCall struct {
	*mock.Call
	Parent *iTelemetryInfrastructureMock
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) Panic(msg string) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) Once() *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) Twice() *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) Times(i int) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) WaitUntil(w <-chan time.Time) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) After(d time.Duration) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) Run(fn func(args mock.Arguments)) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) Maybe() *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) TypedReturns(a context.Context, b trace.Span) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) ReturnsFn(fn func(string) (context.Context, trace.Span)) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) TypedRun(fn func(string)) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_fnName := args.String(0)
		fn(_fnName)
	})
	return _c
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnInjectSpanToTextMapPropagator() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagator()
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnShutdown() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdown()
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnStartSpanFromContext(fnName string) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContext(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnStartSpanFromHttpRequest(r *http.Request, fnName string) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequest(r, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnStartSpanFromRabbitMQHeader(headers amqp091.Table, fnName string) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeader(headers, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnStartSpanFromRpcMetadata(fnName string) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadata(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnInjectSpanToTextMapPropagatorRaw() *iTelemetryInfrastructureInjectSpanToTextMapPropagatorCall {
	return _c.Parent.OnInjectSpanToTextMapPropagatorRaw()
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnShutdownRaw() *iTelemetryInfrastructureShutdownCall {
	return _c.Parent.OnShutdownRaw()
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnStartSpanFromContextRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromContextCall {
	return _c.Parent.OnStartSpanFromContextRaw(fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnStartSpanFromHttpRequestRaw(r interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromHttpRequestCall {
	return _c.Parent.OnStartSpanFromHttpRequestRaw(r, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnStartSpanFromRabbitMQHeaderRaw(headers interface{}, fnName interface{}) *iTelemetryInfrastructureStartSpanFromRabbitMQHeaderCall {
	return _c.Parent.OnStartSpanFromRabbitMQHeaderRaw(headers, fnName)
}

func (_c *iTelemetryInfrastructureStartSpanFromRpcMetadataCall) OnStartSpanFromRpcMetadataRaw(fnName interface{}) *iTelemetryInfrastructureStartSpanFromRpcMetadataCall {
	return _c.Parent.OnStartSpanFromRpcMetadataRaw(fnName)
}
