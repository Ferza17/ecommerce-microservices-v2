// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package kafka

import (
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/infrastructure/kafka"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/infrastructure/postgresql"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/infrastructure/service/product"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/infrastructure/service/shipping"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/infrastructure/service/user"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/infrastructure/telemetry"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/module/payment/consumer"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/module/payment/repository"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/module/payment/usecase"
	repository2 "github.com/ferza17/ecommerce-microservices-v2/payment-service/module/provider/repository"
	"github.com/ferza17/ecommerce-microservices-v2/payment-service/pkg/logger"
)

// Injectors from wire.go:

func Provide() *Transport {
	iZapLogger := logger.NewZapLogger()
	iTelemetryInfrastructure := telemetry.NewTelemetry(iZapLogger)
	postgresSQL := postgresql.NewPostgresqlInfrastructure(iZapLogger)
	iPaymentRepository := repository.NewPaymentRepository(postgresSQL, iTelemetryInfrastructure, iZapLogger)
	iPaymentProviderRepository := repository2.NewPaymentProviderRepository(postgresSQL, iTelemetryInfrastructure, iZapLogger)
	iKafkaInfrastructure := kafka.NewKafkaInfrastructure(iZapLogger, iTelemetryInfrastructure)
	iShippingService := shipping.NewShippingService(iZapLogger)
	iUserService := user.NewUserService(iZapLogger)
	iProductService := product.NewProductService(iZapLogger)
	iPaymentUseCase := usecase.NewPaymentUseCase(iPaymentRepository, iPaymentProviderRepository, iKafkaInfrastructure, iTelemetryInfrastructure, iZapLogger, postgresSQL, iShippingService, iUserService, iProductService)
	iPaymentConsumer := consumer.NewPaymentConsumer(iTelemetryInfrastructure, iPaymentUseCase, iZapLogger)
	transport := NewTransport(iPaymentConsumer, iKafkaInfrastructure, iTelemetryInfrastructure, iZapLogger)
	return transport
}
