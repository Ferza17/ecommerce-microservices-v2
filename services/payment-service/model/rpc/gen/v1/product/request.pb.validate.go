// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/product/request.proto

package product

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FindProductsWithPaginationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *FindProductsWithPaginationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProductsWithPaginationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// FindProductsWithPaginationRequestMultiError, or nil if none found.
func (m *FindProductsWithPaginationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProductsWithPaginationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() <= 0 {
		err := FindProductsWithPaginationRequestValidationError{
			field:  "Page",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() <= 0 {
		err := FindProductsWithPaginationRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindProductsWithPaginationRequestMultiError(errors)
	}

	return nil
}

// FindProductsWithPaginationRequestMultiError is an error wrapping multiple
// validation errors returned by
// FindProductsWithPaginationRequest.ValidateAll() if the designated
// constraints aren't met.
type FindProductsWithPaginationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProductsWithPaginationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProductsWithPaginationRequestMultiError) AllErrors() []error { return m }

// FindProductsWithPaginationRequestValidationError is the validation error
// returned by FindProductsWithPaginationRequest.Validate if the designated
// constraints aren't met.
type FindProductsWithPaginationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProductsWithPaginationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProductsWithPaginationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProductsWithPaginationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProductsWithPaginationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProductsWithPaginationRequestValidationError) ErrorName() string {
	return "FindProductsWithPaginationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindProductsWithPaginationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProductsWithPaginationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProductsWithPaginationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProductsWithPaginationRequestValidationError{}

// Validate checks the field values on FindProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindProductByIdRequestMultiError, or nil if none found.
func (m *FindProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := FindProductByIdRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FindProductByIdRequestMultiError(errors)
	}

	return nil
}

// FindProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by FindProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type FindProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindProductByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindProductByIdRequestMultiError) AllErrors() []error { return m }

// FindProductByIdRequestValidationError is the validation error returned by
// FindProductByIdRequest.Validate if the designated constraints aren't met.
type FindProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindProductByIdRequestValidationError) ErrorName() string {
	return "FindProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindProductByIdRequestValidationError{}

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProductRequestMultiError, or nil if none found.
func (m *CreateProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProductRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 1 {
		err := CreateProductRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUom()) < 1 {
		err := CreateProductRequestValidationError{
			field:  "Uom",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetImage()) < 1 {
		err := CreateProductRequestValidationError{
			field:  "Image",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPrice() <= 0 {
		err := CreateProductRequestValidationError{
			field:  "Price",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStock() <= 0 {
		err := CreateProductRequestValidationError{
			field:  "Stock",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateProductRequestMultiError(errors)
	}

	return nil
}

// CreateProductRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProductRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProductRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProductRequestMultiError) AllErrors() []error { return m }

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on UpdateProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProductByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProductByIdRequestMultiError, or nil if none found.
func (m *UpdateProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 0 {
		err := UpdateProductByIdRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 0 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Name != nil {

		if utf8.RuneCountInString(m.GetName()) < 1 {
			err := UpdateProductByIdRequestValidationError{
				field:  "Name",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) < 1 {
			err := UpdateProductByIdRequestValidationError{
				field:  "Description",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Uom != nil {

		if utf8.RuneCountInString(m.GetUom()) < 1 {
			err := UpdateProductByIdRequestValidationError{
				field:  "Uom",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Image != nil {

		if utf8.RuneCountInString(m.GetImage()) < 1 {
			err := UpdateProductByIdRequestValidationError{
				field:  "Image",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Price != nil {

		if m.GetPrice() <= 0 {
			err := UpdateProductByIdRequestValidationError{
				field:  "Price",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Stock != nil {

		if m.GetStock() <= 0 {
			err := UpdateProductByIdRequestValidationError{
				field:  "Stock",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateProductByIdRequestMultiError(errors)
	}

	return nil
}

// UpdateProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProductByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProductByIdRequestMultiError) AllErrors() []error { return m }

// UpdateProductByIdRequestValidationError is the validation error returned by
// UpdateProductByIdRequest.Validate if the designated constraints aren't met.
type UpdateProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductByIdRequestValidationError) ErrorName() string {
	return "UpdateProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductByIdRequestValidationError{}

// Validate checks the field values on DeleteProductByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProductByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProductByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProductByIdRequestMultiError, or nil if none found.
func (m *DeleteProductByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProductByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteProductByIdRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteProductByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteProductByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProductByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProductByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProductByIdRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProductByIdRequestMultiError) AllErrors() []error { return m }

// DeleteProductByIdRequestValidationError is the validation error returned by
// DeleteProductByIdRequest.Validate if the designated constraints aren't met.
type DeleteProductByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductByIdRequestValidationError) ErrorName() string {
	return "DeleteProductByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductByIdRequestValidationError{}
