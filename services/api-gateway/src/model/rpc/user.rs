// This file is @generated by prost-build.
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnumRole {
    Customer = 0,
    CustomerMembership = 1,
    Admin = 5505,
    SuperAdmin = 5506,
}
impl EnumRole {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Customer => "CUSTOMER",
            Self::CustomerMembership => "CUSTOMER_MEMBERSHIP",
            Self::Admin => "ADMIN",
            Self::SuperAdmin => "SUPER_ADMIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CUSTOMER" => Some(Self::Customer),
            "CUSTOMER_MEMBERSHIP" => Some(Self::CustomerMembership),
            "ADMIN" => Some(Self::Admin),
            "SUPER_ADMIN" => Some(Self::SuperAdmin),
            _ => None,
        }
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MethodAccessControl {
    #[prost(bool, tag = "1")]
    #[validate(name = "user.MethodAccessControl.is_public")]
    pub is_public: bool,
    #[prost(enumeration = "EnumRole", repeated, tag = "2")]
    #[validate(name = "user.MethodAccessControl.roles")]
    pub roles: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "user.MethodAccessControl.http")]
    pub http: ::core::option::Option<Http>,
    #[prost(message, optional, tag = "5")]
    #[validate(name = "user.MethodAccessControl.broker")]
    pub broker: ::core::option::Option<Broker>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Http {
    #[prost(string, tag = "1")]
    #[validate(name = "user.HTTP.url")]
    pub url: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.HTTP.method")]
    pub method: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Broker {
    #[prost(string, tag = "1")]
    #[validate(name = "user.Broker.event_type")]
    pub event_type: ::prost::alloc::string::String,
}
/// COMMAND
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserRegisterRequest {
    #[prost(string, tag = "2")]
    #[validate(name = "user.AuthUserRegisterRequest.name")]
    #[validate(r#type(string(min_len = 0)))]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "user.AuthUserRegisterRequest.email")]
    #[validate(r#type(string(well_known(email = true))))]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[validate(name = "user.AuthUserRegisterRequest.password")]
    #[validate(r#type(string(min_len = 8)))]
    pub password: ::prost::alloc::string::String,
    #[prost(enumeration = "EnumRole", tag = "5")]
    #[validate(name = "user.AuthUserRegisterRequest.Role")]
    #[validate(r#type(r#enum(defined_only = true, r#in = [0, 1, 5505, 5506])))]
    pub role: i32,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserLoginByEmailAndPasswordRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserLoginByEmailAndPasswordRequest.email")]
    #[validate(r#type(string(well_known(email = true))))]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.AuthUserLoginByEmailAndPasswordRequest.password")]
    #[validate(r#type(string(min_len = 8)))]
    pub password: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserVerifyOtpRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserVerifyOtpRequest.otp")]
    #[validate(r#type(string(min_len = 4)))]
    pub otp: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserLogoutByTokenRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserLogoutByTokenRequest.token")]
    #[validate(r#type(string(min_len = 8)))]
    pub token: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserVerifyAccessControlRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserVerifyAccessControlRequest.token")]
    #[validate(r#type(string(min_len = 0)))]
    pub token: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    #[validate(name = "user.AuthUserVerifyAccessControlRequest.fullMethodName")]
    pub full_method_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    #[validate(name = "user.AuthUserVerifyAccessControlRequest.http_url")]
    pub http_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    #[validate(name = "user.AuthUserVerifyAccessControlRequest.http_method")]
    pub http_method: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserFindUserByTokenRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserFindUserByTokenRequest.token")]
    #[validate(r#type(string(min_len = 0)))]
    pub token: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthServiceVerifyIsExcludedRequest {
    #[prost(string, optional, tag = "2")]
    #[validate(name = "user.AuthServiceVerifyIsExcludedRequest.fullMethodName")]
    pub full_method_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    #[validate(name = "user.AuthServiceVerifyIsExcludedRequest.http_url")]
    pub http_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    #[validate(name = "user.AuthServiceVerifyIsExcludedRequest.http_method")]
    pub http_method: ::core::option::Option<::prost::alloc::string::String>,
}
/// ============= USER REQUEST DEFINITION
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByIdRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.FindUserByIdRequest.id")]
    #[validate(r#type(string(min_len = 1)))]
    pub id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserByIdRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.UpdateUserByIdRequest.id")]
    #[validate(r#type(string(min_len = 0)))]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    #[validate(name = "user.UpdateUserByIdRequest.name")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    #[validate(name = "user.UpdateUserByIdRequest.email")]
    pub email: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    #[validate(name = "user.UpdateUserByIdRequest.password")]
    pub password: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    #[validate(name = "user.UpdateUserByIdRequest.is_verified")]
    pub is_verified: ::core::option::Option<bool>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByEmailAndPasswordRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.FindUserByEmailAndPasswordRequest.email")]
    #[validate(r#type(string(well_known(email = true))))]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.FindUserByEmailAndPasswordRequest.password")]
    #[validate(r#type(string(min_len = 8)))]
    pub password: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByEmailRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "user.FindUserByEmailRequest.email")]
    #[validate(r#type(string(well_known(email = true))))]
    pub email: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag = "1")]
    #[validate(name = "user.User.id")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.User.name")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "user.User.email")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[validate(name = "user.User.password")]
    pub password: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    #[validate(name = "user.User.is_verified")]
    pub is_verified: bool,
    #[prost(message, optional, tag = "6")]
    #[validate(name = "user.User.role")]
    pub role: ::core::option::Option<Role>,
    #[prost(message, optional, tag = "8")]
    #[validate(name = "user.User.created_at")]
    #[schema(value_type = String, format = "date-time")]
    pub created_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    #[validate(name = "user.User.updated_at")]
    #[schema(value_type = String, format = "date-time")]
    pub updated_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    #[validate(name = "user.User.discarded_at")]
    #[schema(value_type = String, format = "date-time")]
    pub discarded_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Role {
    #[prost(string, tag = "1")]
    #[validate(name = "user.Role.id")]
    pub id: ::prost::alloc::string::String,
    #[prost(enumeration = "EnumRole", tag = "2")]
    #[validate(name = "user.Role.role")]
    pub role: i32,
    #[prost(message, repeated, tag = "4")]
    #[validate(name = "user.Role.access_controls")]
    pub access_controls: ::prost::alloc::vec::Vec<AccessControl>,
    #[prost(message, optional, tag = "8")]
    #[validate(name = "user.Role.created_at")]
    #[schema(value_type = String, format = "date-time")]
    pub created_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    #[validate(name = "user.Role.updated_at")]
    #[schema(value_type = String, format = "date-time")]
    pub updated_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessControl {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AccessControl.id")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "user.AccessControl.fullMethodName")]
    pub full_method_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[validate(name = "user.AccessControl.http_url")]
    pub http_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    #[validate(name = "user.AccessControl.http_method")]
    pub http_method: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    #[validate(name = "user.AccessControl.event_type")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    #[validate(name = "user.AccessControl.role_id")]
    pub role_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    #[validate(name = "user.AccessControl.created_at")]
    #[schema(value_type = String, format = "date-time")]
    pub created_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    #[validate(name = "user.AccessControl.updated_at")]
    #[schema(value_type = String, format = "date-time")]
    pub updated_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AccessControlExcluded {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AccessControlExcluded.id")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.AccessControlExcluded.fullMethodName")]
    pub full_method_name: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[validate(name = "user.AccessControlExcluded.http_url")]
    pub http_url: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    #[validate(name = "user.AccessControlExcluded.http_method")]
    pub http_method: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    #[validate(name = "user.AccessControlExcluded.event_type")]
    pub event_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    #[validate(name = "user.AccessControlExcluded.created_at")]
    #[schema(value_type = String, format = "date-time")]
    pub created_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    #[validate(name = "user.AccessControlExcluded.updated_at")]
    #[schema(value_type = String, format = "date-time")]
    pub updated_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
}
/// ============= AUTH RESPONSE DEFINITION
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserRegisterResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserRegisterResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.AuthUserRegisterResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.AuthUserRegisterResponse.data")]
    pub data: ::core::option::Option<
        auth_user_register_response::AuthUserRegisterResponseData,
    >,
}
/// Nested message and enum types in `AuthUserRegisterResponse`.
pub mod auth_user_register_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AuthUserRegisterResponseData {
        #[prost(message, optional, tag = "1")]
        #[validate(
            name = "user.AuthUserRegisterResponse.AuthUserRegisterResponseData.user"
        )]
        pub user: ::core::option::Option<super::User>,
        #[prost(message, optional, tag = "2")]
        #[validate(
            name = "user.AuthUserRegisterResponse.AuthUserRegisterResponseData.role"
        )]
        pub role: ::core::option::Option<super::Role>,
        #[prost(message, repeated, tag = "3")]
        #[validate(
            name = "user.AuthUserRegisterResponse.AuthUserRegisterResponseData.access_control"
        )]
        pub access_control: ::prost::alloc::vec::Vec<super::AccessControl>,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserVerifyOtpResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserVerifyOtpResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.AuthUserVerifyOtpResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.AuthUserVerifyOtpResponse.data")]
    pub data: ::core::option::Option<
        auth_user_verify_otp_response::AuthUserVerifyOtpResponseData,
    >,
}
/// Nested message and enum types in `AuthUserVerifyOtpResponse`.
pub mod auth_user_verify_otp_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AuthUserVerifyOtpResponseData {
        #[prost(string, tag = "1")]
        #[validate(
            name = "user.AuthUserVerifyOtpResponse.AuthUserVerifyOtpResponseData.accessToken"
        )]
        pub access_token: ::prost::alloc::string::String,
        #[prost(string, tag = "2")]
        #[validate(
            name = "user.AuthUserVerifyOtpResponse.AuthUserVerifyOtpResponseData.refreshToken"
        )]
        pub refresh_token: ::prost::alloc::string::String,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserLogoutByTokenResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserLogoutByTokenResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.AuthUserLogoutByTokenResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    #[validate(name = "user.AuthUserLogoutByTokenResponse.data")]
    pub data: ::core::option::Option<
        auth_user_logout_by_token_response::AuthUserLogoutByTokenResponseData,
    >,
}
/// Nested message and enum types in `AuthUserLogoutByTokenResponse`.
pub mod auth_user_logout_by_token_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AuthUserLogoutByTokenResponseData {
        #[prost(bool, tag = "1")]
        #[validate(
            name = "user.AuthUserLogoutByTokenResponse.AuthUserLogoutByTokenResponseData.is_valid"
        )]
        pub is_valid: bool,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserVerifyAccessControlResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserVerifyAccessControlResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.AuthUserVerifyAccessControlResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.AuthUserVerifyAccessControlResponse.data")]
    pub data: ::core::option::Option<
        auth_user_verify_access_control_response::AuthUserVerifyAccessControlResponseData,
    >,
}
/// Nested message and enum types in `AuthUserVerifyAccessControlResponse`.
pub mod auth_user_verify_access_control_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AuthUserVerifyAccessControlResponseData {
        #[prost(bool, tag = "1")]
        #[validate(
            name = "user.AuthUserVerifyAccessControlResponse.AuthUserVerifyAccessControlResponseData.isValid"
        )]
        pub is_valid: bool,
        #[prost(message, optional, tag = "2")]
        #[validate(
            name = "user.AuthUserVerifyAccessControlResponse.AuthUserVerifyAccessControlResponseData.user"
        )]
        pub user: ::core::option::Option<super::User>,
        #[prost(message, optional, tag = "3")]
        #[validate(
            name = "user.AuthUserVerifyAccessControlResponse.AuthUserVerifyAccessControlResponseData.role"
        )]
        pub role: ::core::option::Option<super::Role>,
        #[prost(message, repeated, tag = "4")]
        #[validate(
            name = "user.AuthUserVerifyAccessControlResponse.AuthUserVerifyAccessControlResponseData.access_controls"
        )]
        pub access_controls: ::prost::alloc::vec::Vec<super::AccessControl>,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthUserFindUserByTokenResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthUserFindUserByTokenResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.AuthUserFindUserByTokenResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.AuthUserFindUserByTokenResponse.data")]
    pub data: ::core::option::Option<
        auth_user_find_user_by_token_response::AuthUserFindUserByTokenResponseData,
    >,
}
/// Nested message and enum types in `AuthUserFindUserByTokenResponse`.
pub mod auth_user_find_user_by_token_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct AuthUserFindUserByTokenResponseData {
        #[prost(message, optional, tag = "1")]
        #[validate(
            name = "user.AuthUserFindUserByTokenResponse.AuthUserFindUserByTokenResponseData.user"
        )]
        pub user: ::core::option::Option<super::User>,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AuthServiceVerifyIsExcludedResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.AuthServiceVerifyIsExcludedResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.AuthServiceVerifyIsExcludedResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.AuthServiceVerifyIsExcludedResponse.data")]
    pub data: ::core::option::Option<
        auth_service_verify_is_excluded_response::AuthServiceVerifyIsExcludedResponseData,
    >,
}
/// Nested message and enum types in `AuthServiceVerifyIsExcludedResponse`.
pub mod auth_service_verify_is_excluded_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, Copy, PartialEq, ::prost::Message)]
    pub struct AuthServiceVerifyIsExcludedResponseData {
        #[prost(bool, tag = "1")]
        #[validate(
            name = "user.AuthServiceVerifyIsExcludedResponse.AuthServiceVerifyIsExcludedResponseData.IsExcluded"
        )]
        pub is_excluded: bool,
    }
}
/// ============= USER RESPONSE DEFINITION
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateUserByIdResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.UpdateUserByIdResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.UpdateUserByIdResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.UpdateUserByIdResponse.data")]
    pub data: ::core::option::Option<
        update_user_by_id_response::UpdateUserByIdResponseData,
    >,
}
/// Nested message and enum types in `UpdateUserByIdResponse`.
pub mod update_user_by_id_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct UpdateUserByIdResponseData {
        #[prost(string, tag = "1")]
        #[validate(name = "user.UpdateUserByIdResponse.UpdateUserByIdResponseData.id")]
        pub id: ::prost::alloc::string::String,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByIdResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.FindUserByIdResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.FindUserByIdResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.FindUserByIdResponse.data")]
    pub data: ::core::option::Option<find_user_by_id_response::FindUserByIdResponseData>,
}
/// Nested message and enum types in `FindUserByIdResponse`.
pub mod find_user_by_id_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FindUserByIdResponseData {
        #[prost(message, optional, tag = "1")]
        #[validate(name = "user.FindUserByIdResponse.FindUserByIdResponseData.user")]
        pub user: ::core::option::Option<super::User>,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByEmailAndPasswordResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.FindUserByEmailAndPasswordResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.FindUserByEmailAndPasswordResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.FindUserByEmailAndPasswordResponse.data")]
    pub data: ::core::option::Option<
        find_user_by_email_and_password_response::FindUserByEmailAndPasswordResponseData,
    >,
}
/// Nested message and enum types in `FindUserByEmailAndPasswordResponse`.
pub mod find_user_by_email_and_password_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FindUserByEmailAndPasswordResponseData {
        #[prost(message, optional, tag = "1")]
        #[validate(
            name = "user.FindUserByEmailAndPasswordResponse.FindUserByEmailAndPasswordResponseData.user"
        )]
        pub user: ::core::option::Option<super::User>,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindUserByEmailResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "user.FindUserByEmailResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "user.FindUserByEmailResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    #[validate(name = "user.FindUserByEmailResponse.data")]
    pub data: ::core::option::Option<
        find_user_by_email_response::FindUserByEmailResponseData,
    >,
}
/// Nested message and enum types in `FindUserByEmailResponse`.
pub mod find_user_by_email_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FindUserByEmailResponseData {
        #[prost(message, optional, tag = "1")]
        #[validate(
            name = "user.FindUserByEmailResponse.FindUserByEmailResponseData.user"
        )]
        pub user: ::core::option::Option<super::User>,
    }
}
/// Generated client implementations.
pub mod user_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct UserServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl UserServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> UserServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> UserServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            UserServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// COMMAND
        pub async fn update_user_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateUserByIdRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.UserService/UpdateUserById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user.UserService", "UpdateUserById"));
            self.inner.unary(req, path, codec).await
        }
        /// QUERY
        pub async fn find_user_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::FindUserByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindUserByIdResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.UserService/FindUserById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user.UserService", "FindUserById"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_user_by_email_and_password(
            &mut self,
            request: impl tonic::IntoRequest<super::FindUserByEmailAndPasswordRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindUserByEmailAndPasswordResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.UserService/FindUserByEmailAndPassword",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("user.UserService", "FindUserByEmailAndPassword"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_user_by_email(
            &mut self,
            request: impl tonic::IntoRequest<super::FindUserByEmailRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindUserByEmailResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.UserService/FindUserByEmail",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user.UserService", "FindUserByEmail"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated client implementations.
pub mod auth_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct AuthServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl AuthServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> AuthServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> AuthServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            AuthServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// COMMAND
        pub async fn auth_user_register(
            &mut self,
            request: impl tonic::IntoRequest<super::AuthUserRegisterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserRegisterResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.AuthService/AuthUserRegister",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user.AuthService", "AuthUserRegister"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn auth_user_login_by_email_and_password(
            &mut self,
            request: impl tonic::IntoRequest<
                super::AuthUserLoginByEmailAndPasswordRequest,
            >,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.AuthService/AuthUserLoginByEmailAndPassword",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "user.AuthService",
                        "AuthUserLoginByEmailAndPassword",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn auth_user_verify_otp(
            &mut self,
            request: impl tonic::IntoRequest<super::AuthUserVerifyOtpRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserVerifyOtpResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.AuthService/AuthUserVerifyOtp",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user.AuthService", "AuthUserVerifyOtp"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn auth_user_logout_by_token(
            &mut self,
            request: impl tonic::IntoRequest<super::AuthUserLogoutByTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserLogoutByTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.AuthService/AuthUserLogoutByToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user.AuthService", "AuthUserLogoutByToken"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn auth_user_verify_access_control(
            &mut self,
            request: impl tonic::IntoRequest<super::AuthUserVerifyAccessControlRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserVerifyAccessControlResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.AuthService/AuthUserVerifyAccessControl",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("user.AuthService", "AuthUserVerifyAccessControl"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn auth_service_verify_is_excluded(
            &mut self,
            request: impl tonic::IntoRequest<super::AuthServiceVerifyIsExcludedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthServiceVerifyIsExcludedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.AuthService/AuthServiceVerifyIsExcluded",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("user.AuthService", "AuthServiceVerifyIsExcluded"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// QUERY
        pub async fn auth_user_find_user_by_token(
            &mut self,
            request: impl tonic::IntoRequest<super::AuthUserFindUserByTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserFindUserByTokenResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/user.AuthService/AuthUserFindUserByToken",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("user.AuthService", "AuthUserFindUserByToken"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod user_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with UserServiceServer.
    #[async_trait]
    pub trait UserService: std::marker::Send + std::marker::Sync + 'static {
        /// COMMAND
        async fn update_user_by_id(
            &self,
            request: tonic::Request<super::UpdateUserByIdRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// QUERY
        async fn find_user_by_id(
            &self,
            request: tonic::Request<super::FindUserByIdRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindUserByIdResponse>,
            tonic::Status,
        >;
        async fn find_user_by_email_and_password(
            &self,
            request: tonic::Request<super::FindUserByEmailAndPasswordRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindUserByEmailAndPasswordResponse>,
            tonic::Status,
        >;
        async fn find_user_by_email(
            &self,
            request: tonic::Request<super::FindUserByEmailRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindUserByEmailResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct UserServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> UserServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for UserServiceServer<T>
    where
        T: UserService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/user.UserService/UpdateUserById" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateUserByIdSvc<T: UserService>(pub Arc<T>);
                    impl<
                        T: UserService,
                    > tonic::server::UnaryService<super::UpdateUserByIdRequest>
                    for UpdateUserByIdSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateUserByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserService>::update_user_by_id(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateUserByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.UserService/FindUserById" => {
                    #[allow(non_camel_case_types)]
                    struct FindUserByIdSvc<T: UserService>(pub Arc<T>);
                    impl<
                        T: UserService,
                    > tonic::server::UnaryService<super::FindUserByIdRequest>
                    for FindUserByIdSvc<T> {
                        type Response = super::FindUserByIdResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindUserByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserService>::find_user_by_id(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindUserByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.UserService/FindUserByEmailAndPassword" => {
                    #[allow(non_camel_case_types)]
                    struct FindUserByEmailAndPasswordSvc<T: UserService>(pub Arc<T>);
                    impl<
                        T: UserService,
                    > tonic::server::UnaryService<
                        super::FindUserByEmailAndPasswordRequest,
                    > for FindUserByEmailAndPasswordSvc<T> {
                        type Response = super::FindUserByEmailAndPasswordResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindUserByEmailAndPasswordRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserService>::find_user_by_email_and_password(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindUserByEmailAndPasswordSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.UserService/FindUserByEmail" => {
                    #[allow(non_camel_case_types)]
                    struct FindUserByEmailSvc<T: UserService>(pub Arc<T>);
                    impl<
                        T: UserService,
                    > tonic::server::UnaryService<super::FindUserByEmailRequest>
                    for FindUserByEmailSvc<T> {
                        type Response = super::FindUserByEmailResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindUserByEmailRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as UserService>::find_user_by_email(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindUserByEmailSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for UserServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "user.UserService";
    impl<T> tonic::server::NamedService for UserServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Generated server implementations.
pub mod auth_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with AuthServiceServer.
    #[async_trait]
    pub trait AuthService: std::marker::Send + std::marker::Sync + 'static {
        /// COMMAND
        async fn auth_user_register(
            &self,
            request: tonic::Request<super::AuthUserRegisterRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserRegisterResponse>,
            tonic::Status,
        >;
        async fn auth_user_login_by_email_and_password(
            &self,
            request: tonic::Request<super::AuthUserLoginByEmailAndPasswordRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn auth_user_verify_otp(
            &self,
            request: tonic::Request<super::AuthUserVerifyOtpRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserVerifyOtpResponse>,
            tonic::Status,
        >;
        async fn auth_user_logout_by_token(
            &self,
            request: tonic::Request<super::AuthUserLogoutByTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserLogoutByTokenResponse>,
            tonic::Status,
        >;
        async fn auth_user_verify_access_control(
            &self,
            request: tonic::Request<super::AuthUserVerifyAccessControlRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserVerifyAccessControlResponse>,
            tonic::Status,
        >;
        async fn auth_service_verify_is_excluded(
            &self,
            request: tonic::Request<super::AuthServiceVerifyIsExcludedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthServiceVerifyIsExcludedResponse>,
            tonic::Status,
        >;
        /// QUERY
        async fn auth_user_find_user_by_token(
            &self,
            request: tonic::Request<super::AuthUserFindUserByTokenRequest>,
        ) -> std::result::Result<
            tonic::Response<super::AuthUserFindUserByTokenResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct AuthServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> AuthServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for AuthServiceServer<T>
    where
        T: AuthService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/user.AuthService/AuthUserRegister" => {
                    #[allow(non_camel_case_types)]
                    struct AuthUserRegisterSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::AuthUserRegisterRequest>
                    for AuthUserRegisterSvc<T> {
                        type Response = super::AuthUserRegisterResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AuthUserRegisterRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::auth_user_register(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AuthUserRegisterSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.AuthService/AuthUserLoginByEmailAndPassword" => {
                    #[allow(non_camel_case_types)]
                    struct AuthUserLoginByEmailAndPasswordSvc<T: AuthService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<
                        super::AuthUserLoginByEmailAndPasswordRequest,
                    > for AuthUserLoginByEmailAndPasswordSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::AuthUserLoginByEmailAndPasswordRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::auth_user_login_by_email_and_password(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AuthUserLoginByEmailAndPasswordSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.AuthService/AuthUserVerifyOtp" => {
                    #[allow(non_camel_case_types)]
                    struct AuthUserVerifyOtpSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::AuthUserVerifyOtpRequest>
                    for AuthUserVerifyOtpSvc<T> {
                        type Response = super::AuthUserVerifyOtpResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AuthUserVerifyOtpRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::auth_user_verify_otp(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AuthUserVerifyOtpSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.AuthService/AuthUserLogoutByToken" => {
                    #[allow(non_camel_case_types)]
                    struct AuthUserLogoutByTokenSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::AuthUserLogoutByTokenRequest>
                    for AuthUserLogoutByTokenSvc<T> {
                        type Response = super::AuthUserLogoutByTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AuthUserLogoutByTokenRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::auth_user_logout_by_token(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AuthUserLogoutByTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.AuthService/AuthUserVerifyAccessControl" => {
                    #[allow(non_camel_case_types)]
                    struct AuthUserVerifyAccessControlSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<
                        super::AuthUserVerifyAccessControlRequest,
                    > for AuthUserVerifyAccessControlSvc<T> {
                        type Response = super::AuthUserVerifyAccessControlResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::AuthUserVerifyAccessControlRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::auth_user_verify_access_control(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AuthUserVerifyAccessControlSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.AuthService/AuthServiceVerifyIsExcluded" => {
                    #[allow(non_camel_case_types)]
                    struct AuthServiceVerifyIsExcludedSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<
                        super::AuthServiceVerifyIsExcludedRequest,
                    > for AuthServiceVerifyIsExcludedSvc<T> {
                        type Response = super::AuthServiceVerifyIsExcludedResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::AuthServiceVerifyIsExcludedRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::auth_service_verify_is_excluded(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AuthServiceVerifyIsExcludedSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/user.AuthService/AuthUserFindUserByToken" => {
                    #[allow(non_camel_case_types)]
                    struct AuthUserFindUserByTokenSvc<T: AuthService>(pub Arc<T>);
                    impl<
                        T: AuthService,
                    > tonic::server::UnaryService<super::AuthUserFindUserByTokenRequest>
                    for AuthUserFindUserByTokenSvc<T> {
                        type Response = super::AuthUserFindUserByTokenResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::AuthUserFindUserByTokenRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as AuthService>::auth_user_find_user_by_token(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AuthUserFindUserByTokenSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for AuthServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "user.AuthService";
    impl<T> tonic::server::NamedService for AuthServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
