// This file is @generated by prost-build.
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Event {
    /// globally unique (UUID v4)
    #[prost(string, tag = "1")]
    #[validate(name = "event.Event.id")]
    pub id: ::prost::alloc::string::String,
    /// e.g., product-123
    #[prost(string, tag = "2")]
    #[validate(name = "event.Event.aggregate_id")]
    pub aggregate_id: ::prost::alloc::string::String,
    /// e.g., product, user, payment
    #[prost(string, tag = "3")]
    #[validate(name = "event.Event.aggregate_type")]
    pub aggregate_type: ::prost::alloc::string::String,
    /// 1..N (per-aggregate)
    #[prost(int64, tag = "4")]
    #[validate(name = "event.Event.version")]
    pub version: i64,
    /// e.g., ProductCreated
    #[prost(string, tag = "5")]
    #[validate(name = "event.Event.name")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    #[validate(name = "event.Event.occurred_at")]
    #[schema(value_type = String, format = "date-time")]
    pub occurred_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    /// JSON/Proto bytes
    #[prost(bytes = "vec", tag = "7")]
    #[validate(name = "event.Event.payload")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// correlation_id, causation_id, tenant_id, etc.
    #[prost(map = "string, string", tag = "8")]
    #[validate(name = "event.Event.metadata")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Snapshot {
    #[prost(string, tag = "1")]
    #[validate(name = "event.Snapshot.aggregate_id")]
    pub aggregate_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "event.Snapshot.aggregate_type")]
    pub aggregate_type: ::prost::alloc::string::String,
    /// version of aggregate at snapshot
    #[prost(int64, tag = "3")]
    #[validate(name = "event.Snapshot.version")]
    pub version: i64,
    /// serialized aggregate state
    #[prost(bytes = "vec", tag = "4")]
    #[validate(name = "event.Snapshot.state")]
    pub state: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "5")]
    #[validate(name = "event.Snapshot.taken_at")]
    #[schema(value_type = String, format = "date-time")]
    pub taken_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(map = "string, string", tag = "6")]
    #[validate(name = "event.Snapshot.metadata")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "event.AppendRequest.aggregate_id")]
    pub aggregate_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "event.AppendRequest.aggregate_type")]
    pub aggregate_type: ::prost::alloc::string::String,
    /// -1 for new stream
    #[prost(int64, tag = "3")]
    #[validate(name = "event.AppendRequest.expected_version")]
    pub expected_version: i64,
    /// version must be expected_version+1..+n
    #[prost(message, repeated, tag = "4")]
    #[validate(name = "event.AppendRequest.events")]
    pub events: ::prost::alloc::vec::Vec<Event>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadByAggregateRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "event.ReadByAggregateRequest.aggregate_id")]
    pub aggregate_id: ::prost::alloc::string::String,
    /// default 0
    #[prost(int64, tag = "2")]
    #[validate(name = "event.ReadByAggregateRequest.from_version")]
    pub from_version: i64,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadByTypeRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "event.ReadByTypeRequest.aggregate_type")]
    pub aggregate_type: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    #[validate(name = "event.ReadByTypeRequest.limit")]
    pub limit: i64,
    /// pagination token
    #[prost(string, tag = "3")]
    #[validate(name = "event.ReadByTypeRequest.after_id")]
    pub after_id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeRequest {
    /// optional, empty = all
    #[prost(string, tag = "1")]
    #[validate(name = "event.SubscribeRequest.aggregate_type")]
    pub aggregate_type: ::prost::alloc::string::String,
    /// resume token (optional)
    #[prost(string, tag = "2")]
    #[validate(name = "event.SubscribeRequest.from_event_id")]
    pub from_event_id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSnapshotRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "event.GetSnapshotRequest.aggregate_id")]
    pub aggregate_id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PutSnapshotRequest {
    #[prost(message, optional, tag = "1")]
    #[validate(name = "event.PutSnapshotRequest.snapshot")]
    pub snapshot: ::core::option::Option<Snapshot>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AppendResponse {
    #[prost(int64, tag = "1")]
    #[validate(name = "event.AppendResponse.next_version")]
    pub next_version: i64,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadByAggregateResponse {
    #[prost(message, repeated, tag = "1")]
    #[validate(name = "event.ReadByAggregateResponse.events")]
    pub events: ::prost::alloc::vec::Vec<Event>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadByTypeResponse {
    #[prost(message, repeated, tag = "1")]
    #[validate(name = "event.ReadByTypeResponse.events")]
    pub events: ::prost::alloc::vec::Vec<Event>,
    #[prost(string, tag = "2")]
    #[validate(name = "event.ReadByTypeResponse.next_after_id")]
    pub next_after_id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSnapshotResponse {
    #[prost(message, optional, tag = "1")]
    #[validate(name = "event.GetSnapshotResponse.snapshot")]
    pub snapshot: ::core::option::Option<Snapshot>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PutSnapshotResponse {}
/// Generated client implementations.
pub mod event_store_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct EventStoreClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl EventStoreClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> EventStoreClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> EventStoreClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            EventStoreClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn append(
            &mut self,
            request: impl tonic::IntoRequest<super::AppendRequest>,
        ) -> std::result::Result<tonic::Response<super::AppendResponse>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/event.EventStore/Append");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("event.EventStore", "Append"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn read_by_aggregate(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadByAggregateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadByAggregateResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/event.EventStore/ReadByAggregate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("event.EventStore", "ReadByAggregate"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn read_by_type(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadByTypeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadByTypeResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/event.EventStore/ReadByType",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("event.EventStore", "ReadByType"));
            self.inner.unary(req, path, codec).await
        }
        /// Server-streaming: continuous feed for projectors
        pub async fn subscribe(
            &mut self,
            request: impl tonic::IntoRequest<super::SubscribeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::Event>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/event.EventStore/Subscribe",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("event.EventStore", "Subscribe"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_snapshot(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/event.EventStore/GetSnapshot",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("event.EventStore", "GetSnapshot"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn put_snapshot(
            &mut self,
            request: impl tonic::IntoRequest<super::PutSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutSnapshotResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/event.EventStore/PutSnapshot",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("event.EventStore", "PutSnapshot"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod event_store_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with EventStoreServer.
    #[async_trait]
    pub trait EventStore: std::marker::Send + std::marker::Sync + 'static {
        async fn append(
            &self,
            request: tonic::Request<super::AppendRequest>,
        ) -> std::result::Result<tonic::Response<super::AppendResponse>, tonic::Status>;
        async fn read_by_aggregate(
            &self,
            request: tonic::Request<super::ReadByAggregateRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadByAggregateResponse>,
            tonic::Status,
        >;
        async fn read_by_type(
            &self,
            request: tonic::Request<super::ReadByTypeRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ReadByTypeResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the Subscribe method.
        type SubscribeStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::Event, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        /// Server-streaming: continuous feed for projectors
        async fn subscribe(
            &self,
            request: tonic::Request<super::SubscribeRequest>,
        ) -> std::result::Result<tonic::Response<Self::SubscribeStream>, tonic::Status>;
        async fn get_snapshot(
            &self,
            request: tonic::Request<super::GetSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetSnapshotResponse>,
            tonic::Status,
        >;
        async fn put_snapshot(
            &self,
            request: tonic::Request<super::PutSnapshotRequest>,
        ) -> std::result::Result<
            tonic::Response<super::PutSnapshotResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct EventStoreServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> EventStoreServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for EventStoreServer<T>
    where
        T: EventStore,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/event.EventStore/Append" => {
                    #[allow(non_camel_case_types)]
                    struct AppendSvc<T: EventStore>(pub Arc<T>);
                    impl<T: EventStore> tonic::server::UnaryService<super::AppendRequest>
                    for AppendSvc<T> {
                        type Response = super::AppendResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::AppendRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EventStore>::append(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = AppendSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/event.EventStore/ReadByAggregate" => {
                    #[allow(non_camel_case_types)]
                    struct ReadByAggregateSvc<T: EventStore>(pub Arc<T>);
                    impl<
                        T: EventStore,
                    > tonic::server::UnaryService<super::ReadByAggregateRequest>
                    for ReadByAggregateSvc<T> {
                        type Response = super::ReadByAggregateResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadByAggregateRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EventStore>::read_by_aggregate(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadByAggregateSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/event.EventStore/ReadByType" => {
                    #[allow(non_camel_case_types)]
                    struct ReadByTypeSvc<T: EventStore>(pub Arc<T>);
                    impl<
                        T: EventStore,
                    > tonic::server::UnaryService<super::ReadByTypeRequest>
                    for ReadByTypeSvc<T> {
                        type Response = super::ReadByTypeResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadByTypeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EventStore>::read_by_type(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadByTypeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/event.EventStore/Subscribe" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribeSvc<T: EventStore>(pub Arc<T>);
                    impl<
                        T: EventStore,
                    > tonic::server::ServerStreamingService<super::SubscribeRequest>
                    for SubscribeSvc<T> {
                        type Response = super::Event;
                        type ResponseStream = T::SubscribeStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SubscribeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EventStore>::subscribe(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/event.EventStore/GetSnapshot" => {
                    #[allow(non_camel_case_types)]
                    struct GetSnapshotSvc<T: EventStore>(pub Arc<T>);
                    impl<
                        T: EventStore,
                    > tonic::server::UnaryService<super::GetSnapshotRequest>
                    for GetSnapshotSvc<T> {
                        type Response = super::GetSnapshotResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSnapshotRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EventStore>::get_snapshot(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSnapshotSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/event.EventStore/PutSnapshot" => {
                    #[allow(non_camel_case_types)]
                    struct PutSnapshotSvc<T: EventStore>(pub Arc<T>);
                    impl<
                        T: EventStore,
                    > tonic::server::UnaryService<super::PutSnapshotRequest>
                    for PutSnapshotSvc<T> {
                        type Response = super::PutSnapshotResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::PutSnapshotRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as EventStore>::put_snapshot(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PutSnapshotSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for EventStoreServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "event.EventStore";
    impl<T> tonic::server::NamedService for EventStoreServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
