// This file is @generated by prost-build.
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Product {
    #[prost(string, tag = "1")]
    #[validate(name = "product.Product.id")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "product.Product.name")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "product.Product.description")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[validate(name = "product.Product.uom")]
    pub uom: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    #[validate(name = "product.Product.image")]
    pub image: ::prost::alloc::string::String,
    #[prost(double, tag = "6")]
    #[validate(name = "product.Product.price")]
    pub price: f64,
    #[prost(int64, tag = "7")]
    #[validate(name = "product.Product.stock")]
    pub stock: i64,
    #[prost(message, optional, tag = "8")]
    #[validate(name = "product.Product.created_at")]
    #[schema(value_type = String, format = "date-time")]
    pub created_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "9")]
    #[validate(name = "product.Product.updated_at")]
    #[schema(value_type = String, format = "date-time")]
    pub updated_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
    #[prost(message, optional, tag = "10")]
    #[validate(name = "product.Product.discarded_at")]
    #[schema(value_type = String, format = "date-time")]
    pub discarded_at: ::core::option::Option<::prost_wkt_types::Timestamp>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindProductsWithPaginationRequest {
    #[prost(string, repeated, tag = "1")]
    #[validate(name = "product.FindProductsWithPaginationRequest.ids")]
    #[serde(default)]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    #[validate(name = "product.FindProductsWithPaginationRequest.names")]
    #[serde(default)]
    pub names: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "3")]
    #[validate(name = "product.FindProductsWithPaginationRequest.page")]
    #[validate(r#type(int32(gt = 0)))]
    pub page: i32,
    #[prost(int32, tag = "4")]
    #[validate(name = "product.FindProductsWithPaginationRequest.limit")]
    #[validate(r#type(int32(gt = 0)))]
    pub limit: i32,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindProductByIdRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "product.FindProductByIdRequest.id")]
    #[validate(r#type(string(min_len = 1)))]
    pub id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateProductRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "product.CreateProductRequest.name")]
    #[validate(r#type(string(min_len = 1)))]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "product.CreateProductRequest.description")]
    #[validate(r#type(string(min_len = 1)))]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    #[validate(name = "product.CreateProductRequest.uom")]
    #[validate(r#type(string(min_len = 1)))]
    pub uom: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    #[validate(name = "product.CreateProductRequest.image")]
    #[validate(r#type(string(min_len = 1)))]
    pub image: ::prost::alloc::string::String,
    #[prost(double, tag = "5")]
    #[validate(name = "product.CreateProductRequest.price")]
    #[validate(r#type(double(gt = 0.0)))]
    pub price: f64,
    #[prost(int32, tag = "6")]
    #[validate(name = "product.CreateProductRequest.stock")]
    #[validate(r#type(int32(gt = 0)))]
    pub stock: i32,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateProductByIdRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "product.UpdateProductByIdRequest.id")]
    #[validate(r#type(string(min_len = 0)))]
    pub id: ::prost::alloc::string::String,
    #[prost(string, optional, tag = "2")]
    #[validate(name = "product.UpdateProductByIdRequest.name")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    #[validate(name = "product.UpdateProductByIdRequest.description")]
    pub description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    #[validate(name = "product.UpdateProductByIdRequest.uom")]
    pub uom: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    #[validate(name = "product.UpdateProductByIdRequest.image")]
    pub image: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "6")]
    #[validate(name = "product.UpdateProductByIdRequest.price")]
    pub price: ::core::option::Option<f64>,
    #[prost(int32, optional, tag = "7")]
    #[validate(name = "product.UpdateProductByIdRequest.stock")]
    pub stock: ::core::option::Option<i32>,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteProductByIdRequest {
    #[prost(string, tag = "1")]
    #[validate(name = "product.DeleteProductByIdRequest.id")]
    #[validate(r#type(string(min_len = 1)))]
    pub id: ::prost::alloc::string::String,
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindProductsWithPaginationResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "product.FindProductsWithPaginationResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "product.FindProductsWithPaginationResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "product.FindProductsWithPaginationResponse.data")]
    pub data: ::core::option::Option<
        find_products_with_pagination_response::FindProductsWithPaginationResponseData,
    >,
}
/// Nested message and enum types in `FindProductsWithPaginationResponse`.
pub mod find_products_with_pagination_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct FindProductsWithPaginationResponseData {
        #[prost(message, repeated, tag = "1")]
        #[validate(
            name = "product.FindProductsWithPaginationResponse.FindProductsWithPaginationResponseData.data"
        )]
        pub data: ::prost::alloc::vec::Vec<super::Product>,
        #[prost(int32, tag = "2")]
        #[validate(
            name = "product.FindProductsWithPaginationResponse.FindProductsWithPaginationResponseData.limit"
        )]
        pub limit: i32,
        #[prost(int32, tag = "3")]
        #[validate(
            name = "product.FindProductsWithPaginationResponse.FindProductsWithPaginationResponseData.page"
        )]
        pub page: i32,
        #[prost(int32, tag = "4")]
        #[validate(
            name = "product.FindProductsWithPaginationResponse.FindProductsWithPaginationResponseData.total"
        )]
        pub total: i32,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateProductResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "product.CreateProductResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "product.CreateProductResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "product.CreateProductResponse.data")]
    pub data: ::core::option::Option<create_product_response::CreateProductResponseData>,
}
/// Nested message and enum types in `CreateProductResponse`.
pub mod create_product_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct CreateProductResponseData {
        #[prost(string, tag = "1")]
        #[validate(name = "product.CreateProductResponse.CreateProductResponseData.id")]
        pub id: ::prost::alloc::string::String,
    }
}
#[derive(::prost_validate::Validator)]
#[derive(utoipa::ToSchema)]
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteProductByIdResponse {
    #[prost(string, tag = "1")]
    #[validate(name = "product.DeleteProductByIdResponse.status")]
    pub status: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    #[validate(name = "product.DeleteProductByIdResponse.message")]
    pub message: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    #[validate(name = "product.DeleteProductByIdResponse.data")]
    pub data: ::core::option::Option<
        delete_product_by_id_response::DeleteProductByIdResponseData,
    >,
}
/// Nested message and enum types in `DeleteProductByIdResponse`.
pub mod delete_product_by_id_response {
    #[derive(::prost_validate::Validator)]
    #[derive(utoipa::ToSchema)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct DeleteProductByIdResponseData {
        #[prost(string, tag = "1")]
        #[validate(
            name = "product.DeleteProductByIdResponse.DeleteProductByIdResponseData.message"
        )]
        pub message: ::prost::alloc::string::String,
    }
}
/// Generated client implementations.
pub mod product_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct ProductServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ProductServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ProductServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ProductServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ProductServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// COMMAND
        pub async fn create_product(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateProductRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/product.ProductService/CreateProduct",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("product.ProductService", "CreateProduct"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_product_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateProductByIdRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/product.ProductService/UpdateProductById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("product.ProductService", "UpdateProductById"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_product_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteProductByIdRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/product.ProductService/DeleteProductById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("product.ProductService", "DeleteProductById"));
            self.inner.unary(req, path, codec).await
        }
        /// QUERY
        pub async fn find_products_with_pagination(
            &mut self,
            request: impl tonic::IntoRequest<super::FindProductsWithPaginationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindProductsWithPaginationResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/product.ProductService/FindProductsWithPagination",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "product.ProductService",
                        "FindProductsWithPagination",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_product_by_id(
            &mut self,
            request: impl tonic::IntoRequest<super::FindProductByIdRequest>,
        ) -> std::result::Result<tonic::Response<super::Product>, tonic::Status> {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/product.ProductService/FindProductById",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("product.ProductService", "FindProductById"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod product_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ProductServiceServer.
    #[async_trait]
    pub trait ProductService: std::marker::Send + std::marker::Sync + 'static {
        /// COMMAND
        async fn create_product(
            &self,
            request: tonic::Request<super::CreateProductRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn update_product_by_id(
            &self,
            request: tonic::Request<super::UpdateProductByIdRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        async fn delete_product_by_id(
            &self,
            request: tonic::Request<super::DeleteProductByIdRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// QUERY
        async fn find_products_with_pagination(
            &self,
            request: tonic::Request<super::FindProductsWithPaginationRequest>,
        ) -> std::result::Result<
            tonic::Response<super::FindProductsWithPaginationResponse>,
            tonic::Status,
        >;
        async fn find_product_by_id(
            &self,
            request: tonic::Request<super::FindProductByIdRequest>,
        ) -> std::result::Result<tonic::Response<super::Product>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ProductServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ProductServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ProductServiceServer<T>
    where
        T: ProductService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/product.ProductService/CreateProduct" => {
                    #[allow(non_camel_case_types)]
                    struct CreateProductSvc<T: ProductService>(pub Arc<T>);
                    impl<
                        T: ProductService,
                    > tonic::server::UnaryService<super::CreateProductRequest>
                    for CreateProductSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateProductRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProductService>::create_product(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateProductSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/product.ProductService/UpdateProductById" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateProductByIdSvc<T: ProductService>(pub Arc<T>);
                    impl<
                        T: ProductService,
                    > tonic::server::UnaryService<super::UpdateProductByIdRequest>
                    for UpdateProductByIdSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateProductByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProductService>::update_product_by_id(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateProductByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/product.ProductService/DeleteProductById" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteProductByIdSvc<T: ProductService>(pub Arc<T>);
                    impl<
                        T: ProductService,
                    > tonic::server::UnaryService<super::DeleteProductByIdRequest>
                    for DeleteProductByIdSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteProductByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProductService>::delete_product_by_id(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteProductByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/product.ProductService/FindProductsWithPagination" => {
                    #[allow(non_camel_case_types)]
                    struct FindProductsWithPaginationSvc<T: ProductService>(pub Arc<T>);
                    impl<
                        T: ProductService,
                    > tonic::server::UnaryService<
                        super::FindProductsWithPaginationRequest,
                    > for FindProductsWithPaginationSvc<T> {
                        type Response = super::FindProductsWithPaginationResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::FindProductsWithPaginationRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProductService>::find_products_with_pagination(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindProductsWithPaginationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/product.ProductService/FindProductById" => {
                    #[allow(non_camel_case_types)]
                    struct FindProductByIdSvc<T: ProductService>(pub Arc<T>);
                    impl<
                        T: ProductService,
                    > tonic::server::UnaryService<super::FindProductByIdRequest>
                    for FindProductByIdSvc<T> {
                        type Response = super::Product;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindProductByIdRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ProductService>::find_product_by_id(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindProductByIdSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ProductServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "product.ProductService";
    impl<T> tonic::server::NamedService for ProductServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
