syntax = "proto3";
package shipping;
option java_package = "com.ferza17.ecommercemicroservicesv2.v1.shipping";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";

import "v1/shipping/request.proto";
import "v1/shipping/response.proto";
import "v1/user/option.proto";



option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "SHIPPING SERVICE API";
    version: "1.0.0";
    description: "API for SHIPPING services";
  };
  schemes: [HTTPS, HTTP];
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "Bearer"
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Bearer Token (e.g., JWT) for authentication. Format: `Bearer YOUR_TOKEN`";
      }
    }
  };
  security: {
    security_requirement: {
      key: "Bearer";
      value: {}
    }
  };
};

service ShippingService{
  rpc CreateShipping(shipping.CreateShippingRequest) returns (shipping.CreateShippingResponse){
    option (user.acl) = {
      roles: [CUSTOMER, CUSTOMER_MEMBERSHIP],
      is_public: false,
      http: {
        method: "post",
        url: "/v1/shipping/shippings"
      }
    };
    option (google.api.http) = {
      post: "/v1/shipping/shippings",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "create a new shipping";
      tags: ["ShippingService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
  rpc GetShippingById(shipping.GetShippingByIdRequest) returns (shipping.GetShippingByIdResponse){
    option (user.acl) = {
      roles: [CUSTOMER, CUSTOMER_MEMBERSHIP],
      is_public: false,
      http: {
        method: "get",
        url: "/v1/shipping/shippings/{id}"
      }
    };
    option (google.api.http) = {
      get: "/v1/shipping/shippings/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get a new shipping by provided id";
      tags: ["ShippingService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
  rpc ListShipping(shipping.ListShippingRequest) returns (shipping.ListShippingResponse){
    option (user.acl) = {
      roles: [CUSTOMER, CUSTOMER_MEMBERSHIP],
      is_public: false,
      http: {
        method: "get",
        url: "/v1/shipping/shippings"
      }
    };
    option (google.api.http) = {
      get: "/v1/shipping/shippings"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get list of a shipping";
      tags: ["ShippingService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
  rpc UpdateShipping(shipping.UpdateShippingRequest) returns (shipping.UpdateShippingResponse){
    option (user.acl) = {
      roles: [CUSTOMER, CUSTOMER_MEMBERSHIP],
      is_public: false,
      http: {
        method: "put",
        url: "/v1/shipping/shippings/{id}"
      }
    };
    option (google.api.http) = {
      put: "/v1/shipping/shippings/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "update a shipping by provided id and body";
      tags: ["ShippingService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
  rpc DeleteShipping(shipping.DeleteShippingRequest) returns (shipping.DeleteShippingResponse){
    option (user.acl) = {
      roles: [CUSTOMER, CUSTOMER_MEMBERSHIP],
      is_public: false,
      http: {
        method: "delete",
        url: "/v1/shipping/shippings/{id}"
      }
    };
    option (google.api.http) = {
      delete: "/v1/shipping/shippings/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "delete a shipping by provided id";
      tags: ["ShippingService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
}

service ShippingProviderService {
  rpc GetShippingProviderById(shipping.GetShippingProviderByIdRequest) returns (shipping.GetShippingProviderByIdResponse){
    option (user.acl) = {
      roles: [SUPER_ADMIN, ADMIN, CUSTOMER, CUSTOMER_MEMBERSHIP],
      is_public: false,
      http: {
        method: "get",
        url: "/v1/shipping/shipping_providers/{id}"
      }
    };
    option (google.api.http) = {
      get: "/v1/shipping/shipping_providers/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get a new shipping provider by provided id";
      tags: ["ShippingProviderService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
  rpc ListShippingProviders(shipping.ListShippingProvidersRequest) returns (shipping.ListShippingProvidersResponse) {
    option (user.acl) = {
      roles: [SUPER_ADMIN, ADMIN, CUSTOMER, CUSTOMER_MEMBERSHIP],
      is_public: false,
      http: {
        method: "get",
        url: "/v1/shipping/shipping_providers"
      }
    };
    option (google.api.http) = {
      get: "/v1/shipping/shipping_providers"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get a list shipping provider by provided request";
      tags: ["ShippingProviderService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
}