syntax = "proto3";
package event;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";


import "v1/event/request.proto";
import "v1/event/response.proto";
import "v1/event/model.proto";

import "v1/user/option.proto";



option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "EVENT STORE SERVICE API";
    version: "1.0.0";
    description: "API for EVENT STORE ";
  };
  schemes: [HTTPS, HTTP];
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "Bearer"
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Bearer Token (e.g., JWT) for authentication. Format: `Bearer YOUR_TOKEN`";
      }
    }
  };
  security: {
    security_requirement: {
      key: "Bearer";
      value: {}
    }
  };
};


service EventStore {
  rpc Append(event.AppendRequest) returns (event.AppendResponse){
    option (user.acl) = {
      roles: [SUPER_ADMIN, CUSTOMER_MEMBERSHIP, CUSTOMER, ADMIN],
      is_public: false,
      http: {
        method: "post",
        url: "/v1/event-store/events/append"
      },
      broker: {
        event_type: "event.created"
      }
    };
    option (google.api.http) = {
      post: "/v1/event-store/events/append",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "append event";
      tags: ["EventStoreService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
  rpc ReadByAggregate(event.ReadByAggregateRequest) returns (event.ReadByAggregateResponse){
    option (user.acl) = {
      roles: [SUPER_ADMIN, CUSTOMER_MEMBERSHIP, CUSTOMER, ADMIN],
      is_public: false,
      http: {
        method: "get",
        url: "/v1/event-store/events/{aggregate_id}"
      },
    };
    option (google.api.http) = {
      get: "/v1/event-store/events/{aggregate_id}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get event by aggregate id";
      tags: ["EventStoreService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };
  rpc ReadByType(event.ReadByTypeRequest) returns (event.ReadByTypeResponse){
    option (user.acl) = {
      roles: [SUPER_ADMIN, CUSTOMER_MEMBERSHIP, CUSTOMER, ADMIN],
      is_public: false,
      http: {
        method: "get",
        url: "/v1/event-store/events/type/{aggregate_type}"
      },
    };
    option (google.api.http) = {
      get: "/v1/event-store/events/type/{aggregate_type}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get event by aggregate type";
      tags: ["EventStoreService"];
      security: {
        security_requirement: {
          key: "Bearer";
          value: {}
        }
      };
    };
  };

  // Server-streaming: continuous feed for projectors
  rpc Subscribe(event.SubscribeRequest) returns (stream event.Event);

  rpc GetSnapshot(event.GetSnapshotRequest) returns (event.GetSnapshotResponse);
  rpc PutSnapshot(event.PutSnapshotRequest) returns (event.PutSnapshotResponse);
}
