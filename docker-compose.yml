name: "ecommerce-v2"
services:

  # Service Discovery
  consul-local:
    container_name: consul-local
    image: consul:1.10.0
    ports:
      - "8500:8500" # EXPOSE FOR LOCAL DEVELOPMENT
      - "8600/tcp"
      - "8600/udp"
    command: agent -dev -client=0.0.0.0 -ui
    depends_on:
      postgres-local:
        condition: service_healthy
      redis-local:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "sh", "-c", "consul kv get config/setup/initialized | grep -q true" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - ./entrypoint/consul/init.sh:/init.sh:ro
      - ./entrypoint/consul/database:/database:ro
      - ./entrypoint/consul/prometheus:/prometheus:ro
      - ./entrypoint/consul/rabbitmq:/rabbitmq:ro
      - ./entrypoint/consul/services:/services:ro
      - ./entrypoint/consul/smtp:/smtp:ro
      - ./entrypoint/consul/telemetry:/telemetry:ro
      - ./entrypoint/consul/traefik:/traefik:ro
      - ./entrypoint/consul/postgres-exporter:/postgres-exporter:ro
      - ./entrypoint/consul/opa:/opa:ro
    entrypoint: [ "/bin/sh", "-c", "consul agent -dev -client=0.0.0.0 -ui & sleep 5 && sh /init.sh && tail -f /dev/null" ]
    networks:
      - local

  # POSTGRESQL DATABASE
  postgres-local:
    container_name: postgres-local
    ports:
      - '5432:5432' # EXPOSE FOR LOCAL DEVELOPMENT
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    volumes:
      - ./entrypoint/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - local

  # POSTGRESQL EXPORTER FOR PROMETHEUS METRICS
  postgres-exporter-local:
    container_name: postgres-exporter-local
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - '9187'
    environment:
      DATA_SOURCE_URI: postgres-local:5432/users?sslmode=disable
      DATA_SOURCE_USER: postgres
      DATA_SOURCE_PASS: 1234
      PG_EXPORTER_INCLUDE_DATABASES: products,users,payments
    depends_on:
      postgres-local:
        condition: service_healthy
    networks:
      - local
    restart: unless-stopped

  # MONGODB DATABASE
  mongo-local:
    container_name: mongo-local
    image: mongo
    restart: always
    ports:
      - '27017:27017' # EXPOSE FOR LOCAL DEVELOPMENT
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: 1234
    networks:
      - local

  # ELASTICSEARCH DATABASE
  elasticsearch-local:
    container_name: elasticsearch-local
    image: elasticsearch:8.4.1
    restart: always
    environment:
      - "discovery.type=single-node"
      - "cluster.name=products"
      - "node.name=node1"
      - "bootstrap.memory_lock=false"
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - "xpack.security.enabled=false"
    ports:
      - '9200:9200' #EXPOSE FOR LOCAL DEVELOPMENT
      - '9300:9300' #EXPOSE FOR LOCAL DEVELOPMENT
    volumes:
      - ./entrypoint/elasticsearch/init-index.sh:/init-index.sh
      - ./entrypoint/elasticsearch/products-mapping.json:/products-mapping.json
    networks:
      - local

  # REDIS DATABASE
  redis-local:
    container_name: redis-local
    ports:
      - '6379:6379' # EXPOSE FOR LOCAL DEVELOPMENT
    image: redis:latest
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - local

  # FOR TEST EMAIL NOTIFICATION
  mailhog-local:
    image: mailhog/mailhog:latest
    container_name: mailhog-local
    ports:
      - '1025:1025' # EXPOSE FOR LOCAL DEVELOPMENT
      - '8025:8025' # EXPOSE FOR LOCAL DEVELOPMENT
    networks:
      - local

  # MESSAGE BROKER
  rabbitmq-local:
    container_name: rabbitmq-local
    image: rabbitmq:3.11-management
    ports:
      - '15672:15672' # EXPOSE FOR LOCAL DEVELOPMENT
      - '5672:5672' # EXPOSE FOR LOCAL DEVELOPMENT
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "1234"
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management load_definitions \"/etc/rabbitmq/definitions.json\""
    volumes:
      - ./entrypoint/rabbitmq/plugins:/usr/lib/rabbitmq/plugins
      - ./entrypoint/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json

    command: >
      sh -c "
      cp /usr/lib/rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.11.1.ez /plugins/ &&
      rabbitmq-plugins enable --offline rabbitmq_delayed_message_exchange &&
      rabbitmq-server
      "

    networks:
      - local

  # FOR TRACING
  jaeger-local:
    container_name: jaeger-local
    image: jaegertracing/all-in-one:1.37
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      # Enable metrics storage dan monitoring
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus-local:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true
      # Enable span metrics connector
      - SPAN_STORAGE_TYPE=memory
    ports:
      - '6831:6831/udp' # EXPOSE FOR LOCAL DEVELOPMENT
      - '6832:6832/udp' # EXPOSE FOR LOCAL DEVELOPMENT
      - '5778:5778' # EXPOSE FOR LOCAL DEVELOPMENT
      - '16686:16686' # EXPOSE FOR LOCAL DEVELOPMENT
      - '4317:4317' # EXPOSE FOR LOCAL DEVELOPMENT
      - '4318:4318' # EXPOSE FOR LOCAL DEVELOPMENT
      - '14250:14250' # EXPOSE FOR LOCAL DEVELOPMENT
      - '14268:14268' # EXPOSE FOR LOCAL DEVELOPMENT
      - '14269:14269' # EXPOSE FOR LOCAL DEVELOPMENT
      - '9411:9411' # EXPOSE FOR LOCAL DEVELOPMENT
    networks:
      - local
    depends_on:
      - prometheus-local

  # FOR METRICS
  prometheus-local:
    container_name: prometheus-local
    image: prom/prometheus:latest
    ports:
      - '9090:9090' # EXPOSE FOR LOCAL DEVELOPMENT
    volumes:
      - ./entrypoint/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - local

  # GRAFANA DASHBOARD
  grafana-local:
    container_name: grafana-local
    image: grafana/grafana:latest
    ports:
      - '3000:3000'
    volumes:
      - ./entrypoint/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=12345
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus-local
    networks:
      - local
    restart: unless-stopped

  # REVERSE PROXY AND LOAD BALANCER
  traefik-local:
    image: traefik:v3.0
    container_name: traefik-local
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "80:80"        # HTTP
      - "443:443"      # HTTPS (optional)
      - "9000:9000"    # gRPC entrypoint
      - "8080:8080"    # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./entrypoint/traefik:/etc/traefik:ro
    networks:
      - local

  # OPEN POLICY AGENT
  # FOR RBAC
  opa-local:
    image: openpolicyagent/opa:latest
    ports:
      - "8181:8181"
    command:
      - "run"
      - "--server"
      - "--log-level=debug"
      - "--addr=0.0.0.0:8181"
      - "/policies"
    volumes:
      - ./entrypoint/opa:/policies:ro
    environment:
      - OPA_LOG_LEVEL=debug
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://opa-local:8181/health | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - local

  # USER-SERVICE
  user-service:
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "50056:50056" # GRPC
      - "40056:40056" # HTTP
      - "30056:30056" # HTTP METRIC COLLECTOR
    restart: always
    depends_on:
      consul-local:
        condition: service_healthy
      postgres-local:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://user-service:40056/v1/user/check | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - local

  # EVENT-STORE-SERVICE
  event-store-service:
    container_name: event-store-service
    build:
      context: ./event-store-service
      dockerfile: Dockerfile
    ports:
      - "50052:50052" # GRPC
      - "40052:40052" # HTTP
      - "30052:30052" # HTTP METRIC COLLECTOR
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://event-store-service:40052/v1/event-store/check | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - local

  # NOTIFICATION-SERVICE
  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "50053:50053" # GRPC
      - "40053:40053" # HTTP
      - "30053:30053" # HTTP METRIC COLLECTOR
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://notification-service:40053/v1/notification/check | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - local

  # PRODUCT-SERVICE
  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "50055:50055" # GRPC
      - "40055:40055" # HTTP
      - "30055:30055" # HTTP METRIC COLLECTOR
    restart: always
    depends_on:
      postgres-local:
        condition: service_healthy
      consul-local:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://product-service:40055/v1/product/check | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - local

  # PAYMENT-SERVICE
  payment-service:
    container_name: payment-service
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    ports:
      - "50054:50054" # GRPC
      - "40054:40054" # HTTP
      - "30054:30054" # HTTP METRIC COLLECTOR
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://payment-service:40054/v1/payment/check | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres-local:
        condition: service_healthy
      consul-local:
        condition: service_healthy
    networks:
      - local

  # SHIPPING-SERVICE
  shipping-service:
    container_name: shipping-service
    build:
      context: ./shipping-service
      dockerfile: Dockerfile
    ports:
      - "50057:50057" # GRPC
      - "40057:40057" # HTTP
      - "30057:30057" # HTTP METRIC COLLECTOR
    environment:
      DATABASE_URL: postgres://postgres:1234@postgres-local:5432/shippings
    restart: no
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:40057/v1/shipping/check | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      user-service:
        condition: service_healthy
      postgres-local:
        condition: service_healthy
      consul-local:
        condition: service_healthy
    networks:
      - local

networks:
  local:
    driver: bridge