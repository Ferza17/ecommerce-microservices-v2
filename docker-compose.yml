name: "ecommerce-v2"
services:

  postgres-local:
    container_name: postgres-local
    ports:
      - '5432:5432'
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    volumes:
      - ./entrypoint/postgres:/docker-entrypoint-initdb.d
    networks:
      - local

  mongo-local:
    container_name: mongo-local
    image: mongo
    restart: always
    ports:
      - '27017:27017'
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: 1234
    networks:
      - local

  # FOR TEST EMAIL NOTIFICATION
  mailhog-local:
    image: mailhog/mailhog:latest
    container_name: mailhog-local
    ports:
      - '1025:1025'
      - '8025:8025'
    networks:
      - local

  redis-local:
    container_name: redis-local
    ports:
      - '6379:6379'
    image: redis:latest
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - local

  rabbitmq-local:
    container_name: rabbitmq-local
    image: rabbitmq:3.11-management
    ports:
      - '15672:15672'
      - '5672:5672'
    environment:
      RABBITMQ_DEFAULT_USER: "rabbitmq"
      RABBITMQ_DEFAULT_PASS: "1234"
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: "-rabbitmq_management load_definitions \"/etc/rabbitmq/definitions.json\""
    volumes:
      - ./entrypoint/rabbitmq/plugins:/usr/lib/rabbitmq/plugins
      - ./entrypoint/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json

    command: >
      sh -c "
      cp /usr/lib/rabbitmq/plugins/rabbitmq_delayed_message_exchange-3.11.1.ez /plugins/ &&
      rabbitmq-plugins enable --offline rabbitmq_delayed_message_exchange &&
      rabbitmq-server
      "

    networks:
      - local


  # FOR TRACING
  jaeger-local:
    container_name: jaeger-local
    image: jaegertracing/all-in-one:1.37
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      # Enable metrics storage dan monitoring
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus-local:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true
      # Enable span metrics connector
      - SPAN_STORAGE_TYPE=memory
    ports:
      - '6831:6831/udp'
      - '6832:6832/udp'
      - '5778:5778'
      - '16686:16686'
      - '4317:4317'
      - '4318:4318'
      - '14250:14250'
      - '14268:14268'
      - '14269:14269'
      - '9411:9411'
    networks:
      - local
    depends_on:
      - prometheus-local

  # FOR METRICS
  prometheus-local:
    container_name: prometheus-local
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./entrypoint/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - local

  #ELASTIC
  elasticsearch-local:
    container_name: elasticsearch-local
    image: elasticsearch:8.4.1
    restart: always
    environment:
      - "discovery.type=single-node"
      - "cluster.name=products"
      - "node.name=node1"
      - "bootstrap.memory_lock=false"
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - "xpack.security.enabled=false"
    ports:
      - '9200:9200'
      - '9300:9300'
    volumes:
      - ./entrypoint/elasticsearch/init-index.sh:/init-index.sh
      - ./entrypoint/elasticsearch/products-mapping.json:/products-mapping.json
    networks:
      - local

  # Service Discovery
  consul-local:
    container_name: consul-local
    image: consul:1.10.0
    ports:
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    command: agent -dev -client=0.0.0.0 -ui
    depends_on:
      redis-local:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "consul", "members" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    volumes:
      - ./entrypoint/consul/init.sh:/init.sh
      ## RABBITMQ CONFIG
      - ./entrypoint/consul/rabbitmq/init-rabbitmq.sh:/rabbitmq/init-rabbitmq.sh
      - ./entrypoint/consul/rabbitmq/init-rabbitmq-exchange.sh:/rabbitmq/init-rabbitmq-exchange.sh
      - ./entrypoint/consul/rabbitmq/init-rabbitmq-queue.sh:/rabbitmq/init-rabbitmq-queue.sh
      - ./entrypoint/consul/rabbitmq/init-rabbitmq-proxy.sh:/rabbitmq/init-rabbitmq-proxy.sh
      - ./entrypoint/consul/rabbitmq/health-check-rabbitmq.sh:/rabbitmq/health-check-rabbitmq.sh
      ######### DATABASE CONFIG
      # ELASTICSEARCH
      - ./entrypoint/consul/database/elasticsearch/init-database-elasticsearch.sh:/database/elasticsearch/init-database-elasticsearch.sh
      - ./entrypoint/consul/database/elasticsearch/init-database-elasticsearch-proxy.sh:/database/elasticsearch/init-database-elasticsearch-proxy.sh
      - ./entrypoint/consul/database/elasticsearch/health-check-elasticsearch.sh:/database/elasticsearch/health-check-elasticsearch.sh
      # REDIS
      - ./entrypoint/consul/database/redis/init-database-redis.sh:/database/redis/init-database-redis.sh
      - ./entrypoint/consul/database/redis/health-check-redis.sh:/database/redis/health-check-redis.sh
      - ./entrypoint/consul/database/redis/init-database-redis-proxy.sh:/database/redis/init-database-redis-proxy.sh
      # MONGODB
      - ./entrypoint/consul/database/mongodb/init-database-mongodb.sh:/database/mongodb/init-database-mongodb.sh
      - ./entrypoint/consul/database/mongodb/init-database-mongodb-proxy.sh:/database/mongodb/init-database-mongodb-proxy.sh
      - ./entrypoint/consul/database/mongodb/health-check-mongodb.sh:/database/mongodb/health-check-mongodb.sh
      # POSTGRES
      - ./entrypoint/consul/database/postgres/init-database-postgresql.sh:/database/postgres/init-database-postgresql.sh
      - ./entrypoint/consul/database/postgres/init-database-postgresql-proxy.sh:/database/postgres/init-database-postgresql-proxy.sh
      - ./entrypoint/consul/database/postgres/health-check-postgresql.sh:/database/postgres/health-check-postgresql.sh
      ######### SMTP CONFIG
      - ./entrypoint/consul/smtp/init-smtp.sh:/smtp/init-smtp.sh
      - ./entrypoint/consul/smtp/init-smtp-proxy.sh:/smtp/init-smtp-proxy.sh
      ######### TELEMETRY CONFIG
      - ./entrypoint/consul/telemetry/init-telemetry.sh:/telemetry/init-telemetry.sh
      - ./entrypoint/consul/telemetry/init-telemetry-proxy.sh:/telemetry/init-telemetry-proxy.sh
      ######### SERVICES
      - ./entrypoint/consul/services/init-api-gateway-service.sh:/services/init-api-gateway-service.sh
      - ./entrypoint/consul/services/init-commerce-service.sh:/services/init-commerce-service.sh
      - ./entrypoint/consul/services/init-event-store-service.sh:/services/init-event-store-service.sh
      - ./entrypoint/consul/services/init-notification-service.sh:/services/init-notification-service.sh
      - ./entrypoint/consul/services/init-payment-service.sh:/services/init-payment-service.sh
      - ./entrypoint/consul/services/init-product-service.sh:/services/init-product-service.sh
      - ./entrypoint/consul/services/init-user-service.sh:/services/init-user-service.sh
    entrypoint: [ "/bin/sh", "-c", "consul agent -dev -client=0.0.0.0 -ui & sleep 5 && sh /init.sh && tail -f /dev/null" ]
    networks:
      - local

  traefik-local:
    image: traefik:v3.0
    container_name: traefik-local
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "80:80"        # HTTP
      - "443:443"      # HTTPS (optional)
      - "9000:9000"    # gRPC entrypoint
      - "8080:8080"    # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./entrypoint/traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./entrypoint/traefik/dynamic:/etc/traefik/dynamic
    networks:
      - local

  # USER-SERVICE
  user-service:
    container_name: user-service
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "50056" # GRPC
      - "40056" # HTTP
    restart: always
    networks:
      - local

  # NOTIFICATION-SERVICE
  notification-service:
    container_name: notification-service
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "50053"
    restart: always
    networks:
      - local

  # PRODUCT-SERVICE
  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "50055"
      - "40055"
    restart: always
    networks:
      - local

networks:
  local:
    driver: bridge