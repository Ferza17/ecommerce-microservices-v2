name: "ecommerce-v2"
services:

  # Service Discovery

  consul-local:
    container_name: consul-local
    image: consul:1.10.0
    ports:
      - "8500:8500" # EXPOSE FOR LOCAL DEVELOPMENT
      - "8600/tcp"
      - "8600/udp"
    command: agent -dev -client=0.0.0.0 -ui
    depends_on:
      postgres-local:
         condition: service_healthy
      redis-local:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "sh", "-c", "consul kv get config/setup/initialized | grep -q true" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    volumes:
      - ./entrypoint/consul/init.sh:/init.sh:ro
      - ./entrypoint/consul/database:/database:ro
      - ./entrypoint/consul/prometheus:/prometheus:ro
      - ./entrypoint/consul/kafka:/kafka:ro
      - ./entrypoint/consul/services:/services:ro
      - ./entrypoint/consul/smtp:/smtp:ro
      - ./entrypoint/consul/telemetry:/telemetry:ro
      - ./entrypoint/consul/traefik:/traefik:ro
      - ./entrypoint/consul/postgres-exporter:/postgres-exporter:ro
      - ./entrypoint/consul/opa:/opa:ro
    entrypoint: [ "/bin/sh", "-c", "consul agent -dev -client=0.0.0.0 -ui & sleep 5 && sh /init.sh && tail -f /dev/null" ]
    networks:
      - local

  # POSTGRESQL DATABASE

  postgres-local:
    container_name: postgres-local
    ports:
      - '5432:5432' # EXPOSE FOR LOCAL DEVELOPMENT
    image: postgres:latest
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
    volumes:
      - ./entrypoint/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - local

  # POSTGRESQL EXPORTER FOR PROMETHEUS METRICS

#  postgres-exporter-local:
#    container_name: postgres-exporter-local
#    image: prometheuscommunity/postgres-exporter:latest
#    ports:
#      - '9187'
#    environment:
#      DATA_SOURCE_URI: postgres-local:5432/users?sslmode=disable
#      DATA_SOURCE_USER: postgres
#      DATA_SOURCE_PASS: 1234
#      PG_EXPORTER_INCLUDE_DATABASES: products,users,payments
#    depends_on:
#      postgres-local:
#        condition: service_healthy
#    networks:
#      - local
#    restart: unless-stopped

  # MONGODB DATABASE

  mongo-local:
    container_name: mongo-local
    image: mongo
    restart: always
    ports:
      - '27017:27017' # EXPOSE FOR LOCAL DEVELOPMENT
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: 1234
    volumes:
      - ./entrypoint/mongo:/docker-entrypoint-initdb.d:ro
      - ./entrypoint/mongo/mongodb.key:/etc/mongo/mongodb.key:ro
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017", "--keyFile", "/etc/mongo/mongodb.key"]
    depends_on:
      keyfile-gen:
        condition: service_healthy
    healthcheck:
      test: mongosh
        -u mongo
        -p 1234
        --authenticationDatabase admin
        --eval 'rs.initiate({_id:"rs0",members:[{_id:0,host:"mongo-local:27017"}]})' | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    networks:
      - local


  ## MONGO KEY FOR REPLICATION SET

  keyfile-gen:
    container_name: keyfile-gen
    image: alpine
    entrypoint: [ "sh", "-c" ]
    command: >
      "
      apk add --no-cache openssl &&
      openssl rand -base64 741 > /data/mongodb.key &&
      chmod 600 /data/mongodb.key &&
      chown 999:999 /data/mongodb.key &&
      tail -f /dev/null"
    healthcheck:
      test: [ "CMD-SHELL", "[ -f /data/mongodb.key ] && [ -s /data/mongodb.key ] || exit 1" ]
      interval: 2s
      timeout: 5s
      retries: 10
      start_period: 0s
    volumes:
      - ./entrypoint/mongo:/data

  # ELASTICSEARCH DATABASE

  elasticsearch-local:
    container_name: elasticsearch-local
    image: elasticsearch:8.4.1
    restart: always
    environment:
      - "discovery.type=single-node"
      - "cluster.name=products"
      - "node.name=node1"
      - "bootstrap.memory_lock=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "xpack.security.enabled=false"
    ports:
      - '9200:9200' #EXPOSE FOR LOCAL DEVELOPMENT
      - '9300:9300' #EXPOSE FOR LOCAL DEVELOPMENT
    healthcheck:
      test: [ "CMD-SHELL", "curl --fail http://localhost:9200/_cluster/health?wait_for_status=green || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - ./entrypoint/elasticsearch/init-index.sh:/init-index.sh
      - ./entrypoint/elasticsearch/products-mapping.json:/products-mapping.json
    networks:
      - local

#  Kibana
  
  kibana-local:
    container_name: kibana-local
    image: kibana:8.4.1
    depends_on:
      - elasticsearch-local
    ports:
      - '5601:5601'
    environment:
      - 'ELASTICSEARCH_HOSTS=http://elasticsearch-local:9200'
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    networks:
      - local

  # REDIS DATABASE

  redis-local:
    container_name: redis-local
    ports:
      - '6379:6379' # EXPOSE FOR LOCAL DEVELOPMENT
    image: redis:latest
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - local

  # FOR TEST EMAIL NOTIFICATION

  mailhog-local:
    image: mailhog/mailhog:latest
    container_name: mailhog-local
    ports:
      - '1025:1025' # EXPOSE FOR LOCAL DEVELOPMENT
      - '8025:8025' # EXPOSE FOR LOCAL DEVELOPMENT
    networks:
      - local

  # MESSAGE BROKER APACHE KAFKA
  ## ZOOKEEPER

  zookeeper-local:
    image: confluentinc/cp-zookeeper:7.2.15
    container_name: zookeeper-local
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD-SHELL", "echo ruok | nc zookeeper-local 2181" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "2181:2181"
    networks:
      - local

  ## KAFKA BROKER 1

  kafka-local-broker-1:
    image: confluentinc/cp-kafka:7.2.15
    container_name: kafka-local-broker-1
    depends_on:
      zookeeper-local:
        condition: service_healthy
    ports:
      - "9092:9092"   # external (localhost)
      - "29092:29092" # internal (inside docker network)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper-local:2181"
      # Listeners
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-local-broker-1:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # Replication & transactions
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # JMX monitoring
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost

      # SCHEMA REGISTRY
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry-local:8081

    volumes:
      - ./entrypoint/kafka/create-topics.sh:/usr/local/bin/create-topics.sh
    command: >
      sh -c "/etc/confluent/docker/run &
             sleep 10 &&
             bash /usr/local/bin/create-topics.sh &&
             wait"
    networks:
      - local
    healthcheck:
      # This checks that the broker is ready to list topics
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka-local-broker-1:29092 --list" ]
      interval: 10s
      timeout: 5s
      retries: 5

  ## SCHEMA REGISTRY

  schema-registry-local:
    image: confluentinc/cp-schema-registry:7.2.15
    container_name: schema-registry-local
    depends_on:
      kafka-local-broker-1:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-local
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-local-broker-1:29092"
      SCHEMA_REGISTRY_LISTENERS:
      SCHEMA_REGISTRY_JMX_HOSTNAME: "localhost"
      SCHEMA_REGISTRY_JMX_PORT: 31002
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/subjects" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - local

  ## KAFKA CONNECT

  kafka-connect-local:
    image: confluentinc/cp-kafka-connect:7.2.15
    container_name: kafka-connect-local
    depends_on:
      kafka-local-broker-1:
        condition: service_healthy
      schema-registry-local:
        condition: service_healthy
      postgres-local:
        condition: service_healthy
      mongo-local:
        condition: service_healthy
      redis-local:
        condition: service_healthy
      elasticsearch-local:
        condition: service_healthy
    ports:
      - "8083:8083"
    restart: always
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka-local-broker-1:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect-local
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "compose-connect-group"

      CONNECT_CONFIG_STORAGE_TOPIC: "compose-connect-configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "compose-connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "compose-connect-status"

      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1

      # Set default converters to JSON (changed from Avro)
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: false

      # Keep these for connectors that specifically need Avro
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-local:8081'
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-local:8081'

      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      KAFKA_HEAP_OPTS: "-Xms512M -Xmx2G"
    volumes:
      - ./entrypoint/kafka-connect/plugins:/usr/share/confluent-hub-components
#    command:
#      - bash
#      - -c
#      - |
#        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.8.4 && \
#        confluent-hub install --no-prompt confluentinc/kafka-connect-elasticsearch:15.0.1 && \
#        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:2.0.1 && \
#        confluent-hub install --no-prompt jcustenborder/kafka-connect-redis:0.0.8 && \
#        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:latest && \
#        /etc/confluent/docker/run
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://kafka-connect-local:8083/connectors || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - local

  ## KSQLDB-SERVER

  ksqldb-server-local:
    image: confluentinc/cp-ksqldb-server:7.2.15
    container_name: ksqldb-server-local
    depends_on:
      kafka-local-broker-1:
        condition: service_healthy
      kafka-connect-local:
        condition: service_healthy
    ports:
      - "8088:8088" # KSQLDB SERVER
    command: ["/etc/ksqldb-server/init.sh"]
    restart: always
    volumes:
      - ./entrypoint/ksqldb-server:/etc/ksqldb-server
    healthcheck:
      test: [
        "CMD-SHELL",
        "curl --fail --silent http://localhost:8088/healthcheck || exit 1"
      ]
      interval: 15s
      timeout: 10s
      retries: 15
    networks:
      - local

  ## KSQLDB-CLI

  ksqldb-cli-local:
    image: confluentinc/ksqldb-cli:0.14.0
    container_name: ksqldb-cli-local
    depends_on:
      kafka-local-broker-1:
        condition: service_healthy
      ksqldb-server-local:
        condition: service_healthy
    platform: linux/amd64
    volumes:
      - ./entrypoint/ksqldb-cli/connectors:/connectors
      - ./entrypoint/ksqldb-cli/streams:/streams
      - ./entrypoint/ksqldb-cli/init-all.sh:/init-all.sh
    restart: unless-stopped
    entrypoint: /bin/bash
    command: [ "/init-all.sh" ]
    tty: true
    stdin_open: true
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://ksqldb-server-local:8088/info | grep -q '\"KsqlServerInfo\"'" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - local

  ## CONTROL CENTER

  control-center-local:
    image: confluentinc/cp-enterprise-control-center:7.2.15
    container_name: control-center-local
    depends_on:
      kafka-local-broker-1:
        condition: service_healthy
      ksqldb-server-local:
        condition: service_healthy
    restart: always
    ports:
      - "9021:9021"
    environment:
      ## ZOOKEEPER
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "zookeeper-local:2181"
      ## BOOTSTRAP BROKER
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "kafka-local-broker-1:29092"
      ## KAFKA-CONNECT
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: "kafka-connect-local:8083"
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: '/connectors'
      ## KAFKA-SCHEMA-REGISTRY
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry-local:8081"
      ## KSQLDB
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server-local:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://ksqldb-server-local:8088"
      ## CONTROL-CENTER
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_UI_AUTO_REFRESH_ENABLE: "true"
      CONTROL_CENTER_UI_AUTO_REFRESH_INTERVAL_SECONDS: 10
      PORT: 9021

    networks:
      - local

  # FOR TRACING

  jaeger-local:
    container_name: jaeger-local
    image: jaegertracing/all-in-one:1.37
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      # Enable metrics storage dan monitoring
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus-local:9090
      - PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=true
      # Enable span metrics connector
      - SPAN_STORAGE_TYPE=memory
    ports:
      - '6831:6831/udp' # EXPOSE FOR LOCAL DEVELOPMENT
      - '6832:6832/udp' # EXPOSE FOR LOCAL DEVELOPMENT
      - '5778:5778' # EXPOSE FOR LOCAL DEVELOPMENT
      - '16686:16686' # EXPOSE FOR LOCAL DEVELOPMENT
      - '4317:4317' # EXPOSE FOR LOCAL DEVELOPMENT
      - '4318:4318' # EXPOSE FOR LOCAL DEVELOPMENT
      - '14250:14250' # EXPOSE FOR LOCAL DEVELOPMENT
      - '14268:14268' # EXPOSE FOR LOCAL DEVELOPMENT
      - '14269:14269' # EXPOSE FOR LOCAL DEVELOPMENT
      - '9411:9411' # EXPOSE FOR LOCAL DEVELOPMENT
    networks:
      - local
#    depends_on:
#      - prometheus-local

  # FOR METRICS

#  prometheus-local:
#    container_name: prometheus-local
#    image: prom/prometheus:latest
#    ports:
#      - '9090:9090' # EXPOSE FOR LOCAL DEVELOPMENT
#    volumes:
#      - ./entrypoint/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/etc/prometheus/console_libraries'
#      - '--web.console.templates=/etc/prometheus/consoles'
#      - '--storage.tsdb.retention.time=200h'
#      - '--web.enable-lifecycle'
#    networks:
#      - local

  # GRAFANA DASHBOARD

#  grafana-local:
#    container_name: grafana-local
#    image: grafana/grafana:latest
#    ports:
#      - '3000:3000'
#    volumes:
#      - ./entrypoint/grafana/provisioning:/etc/grafana/provisioning
#    environment:
#      - GF_SECURITY_ADMIN_USER=grafana
#      - GF_SECURITY_ADMIN_PASSWORD=12345
#      - GF_USERS_ALLOW_SIGN_UP=false
#    depends_on:
#      - prometheus-local
#    networks:
#      - local
#    restart: unless-stopped

  # REVERSE PROXY AND LOAD BALANCER

#  traefik-local:
#    image: traefik:v3.0
#    container_name: traefik-local
#    command:
#      - --configFile=/etc/traefik/traefik.yml
#    ports:
#      - "80:80"        # HTTP
#      - "443:443"      # HTTPS (optional)
#      - "9000:9000"    # gRPC entrypoint
#      - "8080:8080"    # Traefik dashboard
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      - ./entrypoint/traefik:/etc/traefik:ro
#    networks:
#      - local

  # OPEN POLICY AGENT FOR RBAC


#  opa-local:
#    image: openpolicyagent/opa:latest
#    container_name: "opa-local"
#    ports:
#      - "8181:8181"
#    command:
#      - "run"
#      - "--server"
#      - "--log-level=debug"
#      - "--addr=0.0.0.0:8181"
#      - "/policies"
#    volumes:
#      - ./entrypoint/opa:/policies:ro
#    environment:
#      - OPA_LOG_LEVEL=debug
#    restart: unless-stopped
#    healthcheck:
#      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://opa-local:8181/health | grep -q '^200$'" ]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#    networks:
#      - local

  # USER-SERVICE

  user-service:
    container_name: user-service
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "50056:50056" # GRPC
      - "40056:40056" # HTTP
      - "30056:30056" # HTTP METRIC COLLECTOR
    restart: always
    depends_on:
      consul-local:
        condition: service_healthy
      postgres-local:
        condition: service_healthy
      kafka-local-broker-1:
        condition: service_healthy
      schema-registry-local:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://user-service:40056/v1/user/check | grep -q '^200$'" ]
      interval: 45s
      timeout: 40s
      retries: 10
      start_period: 60s
    networks:
      - local

  # PRODUCT-SERVICE

  product-service:
    container_name: product-service
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    ports:
      - "50055:50055" # GRPC
      - "40055:40055" # HTTP
      - "30055:30055" # HTTP METRIC COLLECTOR
    restart: always
    depends_on:
      postgres-local:
        condition: service_healthy
      consul-local:
        condition: service_healthy
      kafka-connect-local:
        condition: service_healthy
      kafka-local-broker-1:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://product-service:40055/v1/product/check | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - local

  # NOTIFICATION-SERVICE

  notification-service:
    container_name: notification-service
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "50053:50053" # GRPC
      - "40053:40053" # HTTP
      - "30053:30053" # HTTP METRIC COLLECTOR
    restart: always
    depends_on:
      consul-local:
        condition: service_healthy
      mongo-local:
        condition: service_healthy
      kafka-local-broker-1:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://notification-service:40053/v1/notification/check | grep -q '^200$'" ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - local

  # PAYMENT-SERVICE

#  payment-service:
#    container_name: payment-service
#    build:
#      context: ./services/payment-service
#      dockerfile: Dockerfile
#    ports:
#      - "50054:50054" # GRPC
#      - "40054:40054" # HTTP
#      - "30054:30054" # HTTP METRIC COLLECTOR
#    restart: always
#    healthcheck:
#      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://payment-service:40054/v1/payment/check | grep -q '^200$'" ]
#      interval: 45s
#      timeout: 40s
#      retries: 10
#      start_period: 60s
#    depends_on:
#      postgres-local:
#        condition: service_healthy
#      consul-local:
#        condition: service_healthy
#      kafka-local-broker-1:
#        condition: service_healthy
#      kafka-connect-local:
#        condition: service_healthy
#      ksqldb-cli-local:
#        condition: service_healthy
#    networks:
#      - local

  # SHIPPING-SERVICE

#  shipping-service:
#    container_name: shipping-service
#    build:
#      context: ./services/shipping-service
#      dockerfile: Dockerfile
#    ports:
#      - "50057:50057" # GRPC
#      - "40057:40057" # HTTP
#      - "30057:30057" # HTTP METRIC COLLECTOR
#    environment:
#      DATABASE_URL: postgres://postgres:1234@postgres-local:5432/shippings
#    restart: no
#    healthcheck:
#      test: [ "CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://127.0.0.1:40057/v1/shipping/check | grep -q '^200$'" ]
#      interval: 11s
#      timeout: 10s
#      retries: 10
#      start_period: 60s
#    depends_on:
#      user-service:
#        condition: service_healthy
#      postgres-local:
#        condition: service_healthy
#      consul-local:
#        condition: service_healthy
#      kafka-local-broker-1:
#        condition: service_healthy
#    networks:
#      - local

networks:
  local:
    driver: bridge