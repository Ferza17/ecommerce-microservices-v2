syntax = "proto3";
package payment;

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/http.proto";
import "google/api/annotations.proto";

// LOCAL IMPORT
import "v1/payment/model.proto";
import "v1/payment/request.proto";
import "v1/payment/response.proto";
import "v1/user/option.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "PAYMENT SERVICE API";
    version: "1.0.0";
    description: "API for PAYMENT, authentication, and authorization";
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "bearer";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
        description: "Enter the token with the `Bearer ` prefix, e.g. \"Bearer abcde12345\"";
      }
    }
  };
  security: {
    security_requirement: {
      key: "bearer";
    }
  };
};


service PaymentService {
  // QUERY
  rpc FindPaymentById(payment.FindPaymentByIdRequest) returns (payment.Payment){
    option (user.acl) = {
      roles: [SUPER_ADMIN, ADMIN, CUSTOMER_MEMBERSHIP],
      is_public: false,
    };
    option (google.api.http) = {
      post: "/v1/payment/payments"
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a new payment";
      tags: ["PAYMENT"];
      security: {
        security_requirement: {
          key: "bearer";
        }
      };
    };
  };
  rpc FindPaymentByUserIdAndStatus(payment.FindPaymentByUserIdAndStatusRequest) returns (payment.Payment){
    option (user.acl) = {
      roles: [SUPER_ADMIN, ADMIN, CUSTOMER_MEMBERSHIP],
      is_public: false,
    };
    option (google.api.http) = {
      get: "/v1/payment/payments/{id}/{status}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get a payment by user id and status";
      tags: ["PAYMENT"];
      security: {
        security_requirement: {
          key: "bearer";
        }
      };
    };
  };
}

service PaymentProviderService {
  // QUERY
  rpc FindPaymentProviders(payment.FindPaymentProvidersRequest) returns (payment.FindPaymentProvidersResponse){
    option (user.acl) = {
      roles: [SUPER_ADMIN, ADMIN, CUSTOMER_MEMBERSHIP],
      is_public: false,
    };
    option (google.api.http) = {
      get: "/v1/payment/payment-providers"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get all payment providers";
      tags: ["PAYMENT"];
      security: {
        security_requirement: {
          key: "bearer";
        }
      };
    };
  };
  rpc FindPaymentProviderById(payment.FindPaymentProviderByIdRequest) returns (payment.Provider){
    option (user.acl) = {
      roles: [SUPER_ADMIN, ADMIN, CUSTOMER_MEMBERSHIP],
      is_public: false,
    };
    option (google.api.http) = {
      get: "/v1/payment/payment-providers/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "get payment providers by provided id";
      tags: ["PAYMENT"];
      security: {
        security_requirement: {
          key: "bearer";
        }
      };
    };
  };
}