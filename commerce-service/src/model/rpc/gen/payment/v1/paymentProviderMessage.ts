// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: payment/v1/paymentProviderMessage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "payment_v1";

export enum ProviderMethod {
  BANK = 0,
  CRYPTO_CURRENCY = 1,
  DEBIT = 2,
  CREDIT = 3,
  CASH_ON_DELIVERY = 4,
  UNRECOGNIZED = -1,
}

export function providerMethodFromJSON(object: any): ProviderMethod {
  switch (object) {
    case 0:
    case "BANK":
      return ProviderMethod.BANK;
    case 1:
    case "CRYPTO_CURRENCY":
      return ProviderMethod.CRYPTO_CURRENCY;
    case 2:
    case "DEBIT":
      return ProviderMethod.DEBIT;
    case 3:
    case "CREDIT":
      return ProviderMethod.CREDIT;
    case 4:
    case "CASH_ON_DELIVERY":
      return ProviderMethod.CASH_ON_DELIVERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProviderMethod.UNRECOGNIZED;
  }
}

export function providerMethodToJSON(object: ProviderMethod): string {
  switch (object) {
    case ProviderMethod.BANK:
      return "BANK";
    case ProviderMethod.CRYPTO_CURRENCY:
      return "CRYPTO_CURRENCY";
    case ProviderMethod.DEBIT:
      return "DEBIT";
    case ProviderMethod.CREDIT:
      return "CREDIT";
    case ProviderMethod.CASH_ON_DELIVERY:
      return "CASH_ON_DELIVERY";
    case ProviderMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Provider {
  id: string;
  name: string;
  method: ProviderMethod;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  discardedAt: Date | undefined;
}

export interface FindPaymentProvidersRequest {
  name: string;
}

export interface FindPaymentProvidersResponse {
  data: Provider[];
}

export interface FindPaymentProviderByIdRequest {
  id: string;
}

function createBaseProvider(): Provider {
  return { id: "", name: "", method: 0, createdAt: undefined, updatedAt: undefined, discardedAt: undefined };
}

export const Provider: MessageFns<Provider> = {
  encode(message: Provider, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.method !== 0) {
      writer.uint32(24).int32(message.method);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(34).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(42).fork()).join();
    }
    if (message.discardedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.discardedAt), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Provider {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProvider();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.method = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.discardedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Provider {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      method: isSet(object.method) ? providerMethodFromJSON(object.method) : 0,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      discardedAt: isSet(object.discardedAt) ? fromJsonTimestamp(object.discardedAt) : undefined,
    };
  },

  toJSON(message: Provider): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.method !== 0) {
      obj.method = providerMethodToJSON(message.method);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.discardedAt !== undefined) {
      obj.discardedAt = message.discardedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Provider>): Provider {
    return Provider.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Provider>): Provider {
    const message = createBaseProvider();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.method = object.method ?? 0;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.discardedAt = object.discardedAt ?? undefined;
    return message;
  },
};

function createBaseFindPaymentProvidersRequest(): FindPaymentProvidersRequest {
  return { name: "" };
}

export const FindPaymentProvidersRequest: MessageFns<FindPaymentProvidersRequest> = {
  encode(message: FindPaymentProvidersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentProvidersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentProvidersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentProvidersRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: FindPaymentProvidersRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentProvidersRequest>): FindPaymentProvidersRequest {
    return FindPaymentProvidersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentProvidersRequest>): FindPaymentProvidersRequest {
    const message = createBaseFindPaymentProvidersRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseFindPaymentProvidersResponse(): FindPaymentProvidersResponse {
  return { data: [] };
}

export const FindPaymentProvidersResponse: MessageFns<FindPaymentProvidersResponse> = {
  encode(message: FindPaymentProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      Provider.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(Provider.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentProvidersResponse {
    return { data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Provider.fromJSON(e)) : [] };
  },

  toJSON(message: FindPaymentProvidersResponse): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => Provider.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentProvidersResponse>): FindPaymentProvidersResponse {
    return FindPaymentProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentProvidersResponse>): FindPaymentProvidersResponse {
    const message = createBaseFindPaymentProvidersResponse();
    message.data = object.data?.map((e) => Provider.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFindPaymentProviderByIdRequest(): FindPaymentProviderByIdRequest {
  return { id: "" };
}

export const FindPaymentProviderByIdRequest: MessageFns<FindPaymentProviderByIdRequest> = {
  encode(message: FindPaymentProviderByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentProviderByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentProviderByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentProviderByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindPaymentProviderByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentProviderByIdRequest>): FindPaymentProviderByIdRequest {
    return FindPaymentProviderByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentProviderByIdRequest>): FindPaymentProviderByIdRequest {
    const message = createBaseFindPaymentProviderByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
