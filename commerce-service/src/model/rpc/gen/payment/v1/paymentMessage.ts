// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: payment/v1/paymentMessage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Provider } from "./paymentProviderMessage";

export const protobufPackage = "payment_v1";

export enum PaymentStatus {
  PENDING = 0,
  PARTIAL = 1,
  SUCCESS = 2,
  FAILED = 3,
  UNRECOGNIZED = -1,
}

export function paymentStatusFromJSON(object: any): PaymentStatus {
  switch (object) {
    case 0:
    case "PENDING":
      return PaymentStatus.PENDING;
    case 1:
    case "PARTIAL":
      return PaymentStatus.PARTIAL;
    case 2:
    case "SUCCESS":
      return PaymentStatus.SUCCESS;
    case 3:
    case "FAILED":
      return PaymentStatus.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PaymentStatus.UNRECOGNIZED;
  }
}

export function paymentStatusToJSON(object: PaymentStatus): string {
  switch (object) {
    case PaymentStatus.PENDING:
      return "PENDING";
    case PaymentStatus.PARTIAL:
      return "PARTIAL";
    case PaymentStatus.SUCCESS:
      return "SUCCESS";
    case PaymentStatus.FAILED:
      return "FAILED";
    case PaymentStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ProviderMethod {
  BANK = 0,
  CRYPTO_CURRENCY = 1,
  DEBIT = 2,
  CREDIT = 3,
  CASH_ON_DELIVERY = 4,
  UNRECOGNIZED = -1,
}

export function providerMethodFromJSON(object: any): ProviderMethod {
  switch (object) {
    case 0:
    case "BANK":
      return ProviderMethod.BANK;
    case 1:
    case "CRYPTO_CURRENCY":
      return ProviderMethod.CRYPTO_CURRENCY;
    case 2:
    case "DEBIT":
      return ProviderMethod.DEBIT;
    case 3:
    case "CREDIT":
      return ProviderMethod.CREDIT;
    case 4:
    case "CASH_ON_DELIVERY":
      return ProviderMethod.CASH_ON_DELIVERY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProviderMethod.UNRECOGNIZED;
  }
}

export function providerMethodToJSON(object: ProviderMethod): string {
  switch (object) {
    case ProviderMethod.BANK:
      return "BANK";
    case ProviderMethod.CRYPTO_CURRENCY:
      return "CRYPTO_CURRENCY";
    case ProviderMethod.DEBIT:
      return "DEBIT";
    case ProviderMethod.CREDIT:
      return "CREDIT";
    case ProviderMethod.CASH_ON_DELIVERY:
      return "CASH_ON_DELIVERY";
    case ProviderMethod.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PaymentItem {
  id: string;
  productId: string;
  amount: number;
  qty: number;
  cratedAt: Date | undefined;
  updatedAt: Date | undefined;
  discardedAt: Date | undefined;
}

export interface Payment {
  id: string;
  code: string;
  Items: PaymentItem[];
  totalPrice: number;
  status: PaymentStatus;
  provider: Provider | undefined;
  userId: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  discardedAt: Date | undefined;
}

export interface CreatePaymentRequest {
  items: PaymentItem | undefined;
  userId: string;
  amount: number;
}

export interface CallBackPaymentRequest {
  paymentId: string;
  amount: number;
}

export interface FindPaymentByIdRequest {
  id: string;
}

export interface FindPaymentByUserIdAndStatusRequest {
  userId: string;
  status: PaymentStatus;
}

function createBasePaymentItem(): PaymentItem {
  return {
    id: "",
    productId: "",
    amount: 0,
    qty: 0,
    cratedAt: undefined,
    updatedAt: undefined,
    discardedAt: undefined,
  };
}

export const PaymentItem: MessageFns<PaymentItem> = {
  encode(message: PaymentItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.amount !== 0) {
      writer.uint32(25).double(message.amount);
    }
    if (message.qty !== 0) {
      writer.uint32(32).int32(message.qty);
    }
    if (message.cratedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.cratedAt), writer.uint32(42).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(50).fork()).join();
    }
    if (message.discardedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.discardedAt), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaymentItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaymentItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.qty = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.cratedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.discardedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaymentItem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      qty: isSet(object.qty) ? globalThis.Number(object.qty) : 0,
      cratedAt: isSet(object.cratedAt) ? fromJsonTimestamp(object.cratedAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      discardedAt: isSet(object.discardedAt) ? fromJsonTimestamp(object.discardedAt) : undefined,
    };
  },

  toJSON(message: PaymentItem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    if (message.qty !== 0) {
      obj.qty = Math.round(message.qty);
    }
    if (message.cratedAt !== undefined) {
      obj.cratedAt = message.cratedAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.discardedAt !== undefined) {
      obj.discardedAt = message.discardedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<PaymentItem>): PaymentItem {
    return PaymentItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PaymentItem>): PaymentItem {
    const message = createBasePaymentItem();
    message.id = object.id ?? "";
    message.productId = object.productId ?? "";
    message.amount = object.amount ?? 0;
    message.qty = object.qty ?? 0;
    message.cratedAt = object.cratedAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.discardedAt = object.discardedAt ?? undefined;
    return message;
  },
};

function createBasePayment(): Payment {
  return {
    id: "",
    code: "",
    Items: [],
    totalPrice: 0,
    status: 0,
    provider: undefined,
    userId: "",
    createdAt: undefined,
    updatedAt: undefined,
    discardedAt: undefined,
  };
}

export const Payment: MessageFns<Payment> = {
  encode(message: Payment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    for (const v of message.Items) {
      PaymentItem.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.totalPrice !== 0) {
      writer.uint32(33).double(message.totalPrice);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.provider !== undefined) {
      Provider.encode(message.provider, writer.uint32(50).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(58).string(message.userId);
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(74).fork()).join();
    }
    if (message.discardedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.discardedAt), writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Payment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.Items.push(PaymentItem.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.totalPrice = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.provider = Provider.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.discardedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Payment {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      Items: globalThis.Array.isArray(object?.Items) ? object.Items.map((e: any) => PaymentItem.fromJSON(e)) : [],
      totalPrice: isSet(object.totalPrice) ? globalThis.Number(object.totalPrice) : 0,
      status: isSet(object.status) ? paymentStatusFromJSON(object.status) : 0,
      provider: isSet(object.provider) ? Provider.fromJSON(object.provider) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      discardedAt: isSet(object.discardedAt) ? fromJsonTimestamp(object.discardedAt) : undefined,
    };
  },

  toJSON(message: Payment): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.Items?.length) {
      obj.Items = message.Items.map((e) => PaymentItem.toJSON(e));
    }
    if (message.totalPrice !== 0) {
      obj.totalPrice = message.totalPrice;
    }
    if (message.status !== 0) {
      obj.status = paymentStatusToJSON(message.status);
    }
    if (message.provider !== undefined) {
      obj.provider = Provider.toJSON(message.provider);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.discardedAt !== undefined) {
      obj.discardedAt = message.discardedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<Payment>): Payment {
    return Payment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Payment>): Payment {
    const message = createBasePayment();
    message.id = object.id ?? "";
    message.code = object.code ?? "";
    message.Items = object.Items?.map((e) => PaymentItem.fromPartial(e)) || [];
    message.totalPrice = object.totalPrice ?? 0;
    message.status = object.status ?? 0;
    message.provider = (object.provider !== undefined && object.provider !== null)
      ? Provider.fromPartial(object.provider)
      : undefined;
    message.userId = object.userId ?? "";
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.discardedAt = object.discardedAt ?? undefined;
    return message;
  },
};

function createBaseCreatePaymentRequest(): CreatePaymentRequest {
  return { items: undefined, userId: "", amount: 0 };
}

export const CreatePaymentRequest: MessageFns<CreatePaymentRequest> = {
  encode(message: CreatePaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.items !== undefined) {
      PaymentItem.encode(message.items, writer.uint32(10).fork()).join();
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.amount !== 0) {
      writer.uint32(25).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items = PaymentItem.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentRequest {
    return {
      items: isSet(object.items) ? PaymentItem.fromJSON(object.items) : undefined,
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: CreatePaymentRequest): unknown {
    const obj: any = {};
    if (message.items !== undefined) {
      obj.items = PaymentItem.toJSON(message.items);
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePaymentRequest>): CreatePaymentRequest {
    return CreatePaymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePaymentRequest>): CreatePaymentRequest {
    const message = createBaseCreatePaymentRequest();
    message.items = (object.items !== undefined && object.items !== null)
      ? PaymentItem.fromPartial(object.items)
      : undefined;
    message.userId = object.userId ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseCallBackPaymentRequest(): CallBackPaymentRequest {
  return { paymentId: "", amount: 0 };
}

export const CallBackPaymentRequest: MessageFns<CallBackPaymentRequest> = {
  encode(message: CallBackPaymentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paymentId !== "") {
      writer.uint32(10).string(message.paymentId);
    }
    if (message.amount !== 0) {
      writer.uint32(17).double(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CallBackPaymentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCallBackPaymentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paymentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.amount = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CallBackPaymentRequest {
    return {
      paymentId: isSet(object.paymentId) ? globalThis.String(object.paymentId) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: CallBackPaymentRequest): unknown {
    const obj: any = {};
    if (message.paymentId !== "") {
      obj.paymentId = message.paymentId;
    }
    if (message.amount !== 0) {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<CallBackPaymentRequest>): CallBackPaymentRequest {
    return CallBackPaymentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CallBackPaymentRequest>): CallBackPaymentRequest {
    const message = createBaseCallBackPaymentRequest();
    message.paymentId = object.paymentId ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseFindPaymentByIdRequest(): FindPaymentByIdRequest {
  return { id: "" };
}

export const FindPaymentByIdRequest: MessageFns<FindPaymentByIdRequest> = {
  encode(message: FindPaymentByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindPaymentByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentByIdRequest>): FindPaymentByIdRequest {
    return FindPaymentByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentByIdRequest>): FindPaymentByIdRequest {
    const message = createBaseFindPaymentByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFindPaymentByUserIdAndStatusRequest(): FindPaymentByUserIdAndStatusRequest {
  return { userId: "", status: 0 };
}

export const FindPaymentByUserIdAndStatusRequest: MessageFns<FindPaymentByUserIdAndStatusRequest> = {
  encode(message: FindPaymentByUserIdAndStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentByUserIdAndStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentByUserIdAndStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentByUserIdAndStatusRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      status: isSet(object.status) ? paymentStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: FindPaymentByUserIdAndStatusRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.status !== 0) {
      obj.status = paymentStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentByUserIdAndStatusRequest>): FindPaymentByUserIdAndStatusRequest {
    return FindPaymentByUserIdAndStatusRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentByUserIdAndStatusRequest>): FindPaymentByUserIdAndStatusRequest {
    const message = createBaseFindPaymentByUserIdAndStatusRequest();
    message.userId = object.userId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
