// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: event/v1/eventStoreMessage.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "../../google/protobuf/struct";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "pb";

export interface EventStore {
  id: string;
  requestId: string;
  service: string;
  eventType: string;
  /** pending, completed, failed, rolled_back */
  status: string;
  payload: { [key: string]: any } | undefined;
  previousState?: { [key: string]: any } | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface CreateEventStoreResponse {
  id: string;
}

function createBaseEventStore(): EventStore {
  return {
    id: "",
    requestId: "",
    service: "",
    eventType: "",
    status: "",
    payload: undefined,
    previousState: undefined,
    createdAt: undefined,
    updatedAt: undefined,
  };
}

export const EventStore: MessageFns<EventStore> = {
  encode(message: EventStore, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.service !== "") {
      writer.uint32(26).string(message.service);
    }
    if (message.eventType !== "") {
      writer.uint32(34).string(message.eventType);
    }
    if (message.status !== "") {
      writer.uint32(42).string(message.status);
    }
    if (message.payload !== undefined) {
      Struct.encode(Struct.wrap(message.payload), writer.uint32(50).fork()).join();
    }
    if (message.previousState !== undefined) {
      Struct.encode(Struct.wrap(message.previousState), writer.uint32(58).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(66).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(74).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventStore {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventStore();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.service = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.payload = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.previousState = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventStore {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      service: isSet(object.service) ? globalThis.String(object.service) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      payload: isObject(object.payload) ? object.payload : undefined,
      previousState: isObject(object.previousState) ? object.previousState : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
    };
  },

  toJSON(message: EventStore): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.service !== "") {
      obj.service = message.service;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.payload !== undefined) {
      obj.payload = message.payload;
    }
    if (message.previousState !== undefined) {
      obj.previousState = message.previousState;
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<EventStore>): EventStore {
    return EventStore.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventStore>): EventStore {
    const message = createBaseEventStore();
    message.id = object.id ?? "";
    message.requestId = object.requestId ?? "";
    message.service = object.service ?? "";
    message.eventType = object.eventType ?? "";
    message.status = object.status ?? "";
    message.payload = object.payload ?? undefined;
    message.previousState = object.previousState ?? undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    return message;
  },
};

function createBaseCreateEventStoreResponse(): CreateEventStoreResponse {
  return { id: "" };
}

export const CreateEventStoreResponse: MessageFns<CreateEventStoreResponse> = {
  encode(message: CreateEventStoreResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventStoreResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventStoreResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventStoreResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreateEventStoreResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventStoreResponse>): CreateEventStoreResponse {
    return CreateEventStoreResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventStoreResponse>): CreateEventStoreResponse {
    const message = createBaseCreateEventStoreResponse();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
