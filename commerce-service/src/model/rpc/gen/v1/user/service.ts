// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/user/service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty } from "../../google/protobuf/empty";
import { User } from "./model";
import {
  AuthFindUserByTokenRequest,
  AuthLogoutByTokenRequest,
  AuthVerifyOtpRequest,
  CreateUserRequest,
  FindUserByEmailAndPasswordRequest,
  FindUserByIdRequest,
  VerifiedAccessControlUserByTokenRequest,
} from "./request";
import { AuthLogoutByTokenResponse, AuthVerifyOtpResponse, VerifiedAccessControlUserByTokenResponse } from "./response";

export const protobufPackage = "user";

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  /** COMMAND */
  createUser: {
    path: "/user.UserService/CreateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequest) => Buffer.from(CreateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateUserRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  /** QUERY */
  findUserById: {
    path: "/user.UserService/FindUserById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUserByIdRequest) => Buffer.from(FindUserByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindUserByIdRequest.decode(value),
    responseSerialize: (value: User) => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer) => User.decode(value),
  },
  findUserByEmailAndPassword: {
    path: "/user.UserService/FindUserByEmailAndPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUserByEmailAndPasswordRequest) =>
      Buffer.from(FindUserByEmailAndPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindUserByEmailAndPasswordRequest.decode(value),
    responseSerialize: (value: User) => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer) => User.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  /** COMMAND */
  createUser: handleUnaryCall<CreateUserRequest, Empty>;
  /** QUERY */
  findUserById: handleUnaryCall<FindUserByIdRequest, User>;
  findUserByEmailAndPassword: handleUnaryCall<FindUserByEmailAndPasswordRequest, User>;
}

export interface UserServiceClient extends Client {
  /** COMMAND */
  createUser(
    request: CreateUserRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  /** QUERY */
  findUserById(
    request: FindUserByIdRequest,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserById(
    request: FindUserByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserById(
    request: FindUserByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByEmailAndPassword(
    request: FindUserByEmailAndPasswordRequest,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByEmailAndPassword(
    request: FindUserByEmailAndPasswordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByEmailAndPassword(
    request: FindUserByEmailAndPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "user.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  userLogoutByToken: {
    path: "/user.AuthService/UserLogoutByToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthLogoutByTokenRequest) => Buffer.from(AuthLogoutByTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthLogoutByTokenRequest.decode(value),
    responseSerialize: (value: AuthLogoutByTokenResponse) =>
      Buffer.from(AuthLogoutByTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthLogoutByTokenResponse.decode(value),
  },
  userVerifyOtp: {
    path: "/user.AuthService/UserVerifyOtp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthVerifyOtpRequest) => Buffer.from(AuthVerifyOtpRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthVerifyOtpRequest.decode(value),
    responseSerialize: (value: AuthVerifyOtpResponse) => Buffer.from(AuthVerifyOtpResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthVerifyOtpResponse.decode(value),
  },
  findUserByToken: {
    path: "/user.AuthService/FindUserByToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthFindUserByTokenRequest) =>
      Buffer.from(AuthFindUserByTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthFindUserByTokenRequest.decode(value),
    responseSerialize: (value: User) => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer) => User.decode(value),
  },
  verifiedAccessControlUserByToken: {
    path: "/user.AuthService/VerifiedAccessControlUserByToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: VerifiedAccessControlUserByTokenRequest) =>
      Buffer.from(VerifiedAccessControlUserByTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => VerifiedAccessControlUserByTokenRequest.decode(value),
    responseSerialize: (value: VerifiedAccessControlUserByTokenResponse) =>
      Buffer.from(VerifiedAccessControlUserByTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => VerifiedAccessControlUserByTokenResponse.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  userLogoutByToken: handleUnaryCall<AuthLogoutByTokenRequest, AuthLogoutByTokenResponse>;
  userVerifyOtp: handleUnaryCall<AuthVerifyOtpRequest, AuthVerifyOtpResponse>;
  findUserByToken: handleUnaryCall<AuthFindUserByTokenRequest, User>;
  verifiedAccessControlUserByToken: handleUnaryCall<
    VerifiedAccessControlUserByTokenRequest,
    VerifiedAccessControlUserByTokenResponse
  >;
}

export interface AuthServiceClient extends Client {
  userLogoutByToken(
    request: AuthLogoutByTokenRequest,
    callback: (error: ServiceError | null, response: AuthLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  userLogoutByToken(
    request: AuthLogoutByTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  userLogoutByToken(
    request: AuthLogoutByTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  userVerifyOtp(
    request: AuthVerifyOtpRequest,
    callback: (error: ServiceError | null, response: AuthVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  userVerifyOtp(
    request: AuthVerifyOtpRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  userVerifyOtp(
    request: AuthVerifyOtpRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  findUserByToken(
    request: AuthFindUserByTokenRequest,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByToken(
    request: AuthFindUserByTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByToken(
    request: AuthFindUserByTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  verifiedAccessControlUserByToken(
    request: VerifiedAccessControlUserByTokenRequest,
    callback: (error: ServiceError | null, response: VerifiedAccessControlUserByTokenResponse) => void,
  ): ClientUnaryCall;
  verifiedAccessControlUserByToken(
    request: VerifiedAccessControlUserByTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: VerifiedAccessControlUserByTokenResponse) => void,
  ): ClientUnaryCall;
  verifiedAccessControlUserByToken(
    request: VerifiedAccessControlUserByTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: VerifiedAccessControlUserByTokenResponse) => void,
  ): ClientUnaryCall;
}

export const AuthServiceClient = makeGenericClientConstructor(AuthServiceService, "user.AuthService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthServiceClient;
  service: typeof AuthServiceService;
  serviceName: string;
};
