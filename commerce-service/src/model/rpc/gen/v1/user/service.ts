// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/user/service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Empty } from "../../google/protobuf/empty";
import { User } from "./model";
import {
  AuthUserFindUserByTokenRequest,
  AuthUserLoginByEmailAndPasswordRequest,
  AuthUserLogoutByTokenRequest,
  AuthUserRegisterRequest,
  AuthUserVerifyAccessControlRequest,
  AuthUserVerifyOtpRequest,
  CreateUserRequest,
  FindUserByEmailAndPasswordRequest,
  FindUserByIdRequest,
} from "./request";
import {
  AuthUserFindUserByTokenResponse,
  AuthUserLoginByEmailAndPasswordResponse,
  AuthUserLogoutByTokenResponse,
  AuthUserRegisterResponse,
  AuthUserVerifyAccessControlResponse,
  AuthUserVerifyOtpResponse,
} from "./response";

export const protobufPackage = "user";

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  /** COMMAND */
  createUser: {
    path: "/user.UserService/CreateUser",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUserRequest) => Buffer.from(CreateUserRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateUserRequest.decode(value),
    responseSerialize: (value: Empty) => Buffer.from(Empty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Empty.decode(value),
  },
  /** QUERY */
  findUserById: {
    path: "/user.UserService/FindUserById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUserByIdRequest) => Buffer.from(FindUserByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindUserByIdRequest.decode(value),
    responseSerialize: (value: User) => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer) => User.decode(value),
  },
  findUserByEmailAndPassword: {
    path: "/user.UserService/FindUserByEmailAndPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUserByEmailAndPasswordRequest) =>
      Buffer.from(FindUserByEmailAndPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindUserByEmailAndPasswordRequest.decode(value),
    responseSerialize: (value: User) => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer) => User.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  /** COMMAND */
  createUser: handleUnaryCall<CreateUserRequest, Empty>;
  /** QUERY */
  findUserById: handleUnaryCall<FindUserByIdRequest, User>;
  findUserByEmailAndPassword: handleUnaryCall<FindUserByEmailAndPasswordRequest, User>;
}

export interface UserServiceClient extends Client {
  /** COMMAND */
  createUser(
    request: CreateUserRequest,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  createUser(
    request: CreateUserRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Empty) => void,
  ): ClientUnaryCall;
  /** QUERY */
  findUserById(
    request: FindUserByIdRequest,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserById(
    request: FindUserByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserById(
    request: FindUserByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByEmailAndPassword(
    request: FindUserByEmailAndPasswordRequest,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByEmailAndPassword(
    request: FindUserByEmailAndPasswordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByEmailAndPassword(
    request: FindUserByEmailAndPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
}

export const UserServiceClient = makeGenericClientConstructor(UserServiceService, "user.UserService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserServiceClient;
  service: typeof UserServiceService;
  serviceName: string;
};

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  /** COMMAND */
  authUserRegister: {
    path: "/user.AuthService/AuthUserRegister",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthUserRegisterRequest) => Buffer.from(AuthUserRegisterRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthUserRegisterRequest.decode(value),
    responseSerialize: (value: AuthUserRegisterResponse) =>
      Buffer.from(AuthUserRegisterResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthUserRegisterResponse.decode(value),
  },
  authUserLoginByEmailAndPassword: {
    path: "/user.AuthService/AuthUserLoginByEmailAndPassword",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthUserLoginByEmailAndPasswordRequest) =>
      Buffer.from(AuthUserLoginByEmailAndPasswordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthUserLoginByEmailAndPasswordRequest.decode(value),
    responseSerialize: (value: AuthUserLoginByEmailAndPasswordResponse) =>
      Buffer.from(AuthUserLoginByEmailAndPasswordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthUserLoginByEmailAndPasswordResponse.decode(value),
  },
  authUserVerifyOtp: {
    path: "/user.AuthService/AuthUserVerifyOtp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthUserVerifyOtpRequest) => Buffer.from(AuthUserVerifyOtpRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthUserVerifyOtpRequest.decode(value),
    responseSerialize: (value: AuthUserVerifyOtpResponse) =>
      Buffer.from(AuthUserVerifyOtpResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthUserVerifyOtpResponse.decode(value),
  },
  authUserLogoutByToken: {
    path: "/user.AuthService/AuthUserLogoutByToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthUserLogoutByTokenRequest) =>
      Buffer.from(AuthUserLogoutByTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthUserLogoutByTokenRequest.decode(value),
    responseSerialize: (value: AuthUserLogoutByTokenResponse) =>
      Buffer.from(AuthUserLogoutByTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthUserLogoutByTokenResponse.decode(value),
  },
  authUserVerifyAccessControl: {
    path: "/user.AuthService/AuthUserVerifyAccessControl",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthUserVerifyAccessControlRequest) =>
      Buffer.from(AuthUserVerifyAccessControlRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthUserVerifyAccessControlRequest.decode(value),
    responseSerialize: (value: AuthUserVerifyAccessControlResponse) =>
      Buffer.from(AuthUserVerifyAccessControlResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthUserVerifyAccessControlResponse.decode(value),
  },
  /** QUERY */
  authUserFindUserByToken: {
    path: "/user.AuthService/AuthUserFindUserByToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: AuthUserFindUserByTokenRequest) =>
      Buffer.from(AuthUserFindUserByTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => AuthUserFindUserByTokenRequest.decode(value),
    responseSerialize: (value: AuthUserFindUserByTokenResponse) =>
      Buffer.from(AuthUserFindUserByTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => AuthUserFindUserByTokenResponse.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  /** COMMAND */
  authUserRegister: handleUnaryCall<AuthUserRegisterRequest, AuthUserRegisterResponse>;
  authUserLoginByEmailAndPassword: handleUnaryCall<
    AuthUserLoginByEmailAndPasswordRequest,
    AuthUserLoginByEmailAndPasswordResponse
  >;
  authUserVerifyOtp: handleUnaryCall<AuthUserVerifyOtpRequest, AuthUserVerifyOtpResponse>;
  authUserLogoutByToken: handleUnaryCall<AuthUserLogoutByTokenRequest, AuthUserLogoutByTokenResponse>;
  authUserVerifyAccessControl: handleUnaryCall<AuthUserVerifyAccessControlRequest, AuthUserVerifyAccessControlResponse>;
  /** QUERY */
  authUserFindUserByToken: handleUnaryCall<AuthUserFindUserByTokenRequest, AuthUserFindUserByTokenResponse>;
}

export interface AuthServiceClient extends Client {
  /** COMMAND */
  authUserRegister(
    request: AuthUserRegisterRequest,
    callback: (error: ServiceError | null, response: AuthUserRegisterResponse) => void,
  ): ClientUnaryCall;
  authUserRegister(
    request: AuthUserRegisterRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthUserRegisterResponse) => void,
  ): ClientUnaryCall;
  authUserRegister(
    request: AuthUserRegisterRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthUserRegisterResponse) => void,
  ): ClientUnaryCall;
  authUserLoginByEmailAndPassword(
    request: AuthUserLoginByEmailAndPasswordRequest,
    callback: (error: ServiceError | null, response: AuthUserLoginByEmailAndPasswordResponse) => void,
  ): ClientUnaryCall;
  authUserLoginByEmailAndPassword(
    request: AuthUserLoginByEmailAndPasswordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthUserLoginByEmailAndPasswordResponse) => void,
  ): ClientUnaryCall;
  authUserLoginByEmailAndPassword(
    request: AuthUserLoginByEmailAndPasswordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthUserLoginByEmailAndPasswordResponse) => void,
  ): ClientUnaryCall;
  authUserVerifyOtp(
    request: AuthUserVerifyOtpRequest,
    callback: (error: ServiceError | null, response: AuthUserVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  authUserVerifyOtp(
    request: AuthUserVerifyOtpRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthUserVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  authUserVerifyOtp(
    request: AuthUserVerifyOtpRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthUserVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  authUserLogoutByToken(
    request: AuthUserLogoutByTokenRequest,
    callback: (error: ServiceError | null, response: AuthUserLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  authUserLogoutByToken(
    request: AuthUserLogoutByTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthUserLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  authUserLogoutByToken(
    request: AuthUserLogoutByTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthUserLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  authUserVerifyAccessControl(
    request: AuthUserVerifyAccessControlRequest,
    callback: (error: ServiceError | null, response: AuthUserVerifyAccessControlResponse) => void,
  ): ClientUnaryCall;
  authUserVerifyAccessControl(
    request: AuthUserVerifyAccessControlRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthUserVerifyAccessControlResponse) => void,
  ): ClientUnaryCall;
  authUserVerifyAccessControl(
    request: AuthUserVerifyAccessControlRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthUserVerifyAccessControlResponse) => void,
  ): ClientUnaryCall;
  /** QUERY */
  authUserFindUserByToken(
    request: AuthUserFindUserByTokenRequest,
    callback: (error: ServiceError | null, response: AuthUserFindUserByTokenResponse) => void,
  ): ClientUnaryCall;
  authUserFindUserByToken(
    request: AuthUserFindUserByTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: AuthUserFindUserByTokenResponse) => void,
  ): ClientUnaryCall;
  authUserFindUserByToken(
    request: AuthUserFindUserByTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: AuthUserFindUserByTokenResponse) => void,
  ): ClientUnaryCall;
}

export const AuthServiceClient = makeGenericClientConstructor(AuthServiceService, "user.AuthService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthServiceClient;
  service: typeof AuthServiceService;
  serviceName: string;
};
