// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/user/option.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { EnumRole, enumRoleFromJSON, enumRoleToJSON } from "./enum";

export const protobufPackage = "user";

export interface MethodAccessControl {
  isPublic: boolean;
  roles: EnumRole[];
}

function createBaseMethodAccessControl(): MethodAccessControl {
  return { isPublic: false, roles: [] };
}

export const MethodAccessControl: MessageFns<MethodAccessControl> = {
  encode(message: MethodAccessControl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isPublic !== false) {
      writer.uint32(8).bool(message.isPublic);
    }
    writer.uint32(18).fork();
    for (const v of message.roles) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MethodAccessControl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMethodAccessControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.isPublic = reader.bool();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.roles.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.roles.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MethodAccessControl {
    return {
      isPublic: isSet(object.isPublic) ? globalThis.Boolean(object.isPublic) : false,
      roles: globalThis.Array.isArray(object?.roles) ? object.roles.map((e: any) => enumRoleFromJSON(e)) : [],
    };
  },

  toJSON(message: MethodAccessControl): unknown {
    const obj: any = {};
    if (message.isPublic !== false) {
      obj.isPublic = message.isPublic;
    }
    if (message.roles?.length) {
      obj.roles = message.roles.map((e) => enumRoleToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MethodAccessControl>): MethodAccessControl {
    return MethodAccessControl.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MethodAccessControl>): MethodAccessControl {
    const message = createBaseMethodAccessControl();
    message.isPublic = object.isPublic ?? false;
    message.roles = object.roles?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
