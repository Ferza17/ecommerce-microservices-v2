// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/user/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { EnumRole, enumRoleFromJSON, enumRoleToJSON } from "./enum";

export const protobufPackage = "user";

/** NEW */
export interface AuthUserRegisterRequest {
  name: string;
  email: string;
  password: string;
  Role: EnumRole;
}

export interface AuthUserLoginByEmailAndPasswordRequest {
  email: string;
  password: string;
}

export interface AuthUserVerifyOtpRequest {
  otp: string;
}

export interface AuthUserLogoutByTokenRequest {
  token: string;
}

export interface AuthUserVerifyAccessControlRequest {
  token: string;
  fullMethodName?: string | undefined;
  httpUrl?: string | undefined;
  httpMethod?: string | undefined;
}

export interface AuthUserFindUserByTokenRequest {
  token: string;
}

/** USER REQUEST DEFINITION */
export interface FindUserByIdRequest {
  id: string;
}

export interface CreateUserRequest {
  name: string;
  email: string;
  password: string;
  Role: EnumRole;
}

export interface UpdateUserByIdRequest {
  id: string;
  name?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
  isVerified?: boolean | undefined;
}

export interface FindUserByEmailAndPasswordRequest {
  email: string;
  password: string;
}

function createBaseAuthUserRegisterRequest(): AuthUserRegisterRequest {
  return { name: "", email: "", password: "", Role: 0 };
}

export const AuthUserRegisterRequest: MessageFns<AuthUserRegisterRequest> = {
  encode(message: AuthUserRegisterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.Role !== 0) {
      writer.uint32(40).int32(message.Role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthUserRegisterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthUserRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.Role = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthUserRegisterRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      Role: isSet(object.Role) ? enumRoleFromJSON(object.Role) : 0,
    };
  },

  toJSON(message: AuthUserRegisterRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.Role !== 0) {
      obj.Role = enumRoleToJSON(message.Role);
    }
    return obj;
  },

  create(base?: DeepPartial<AuthUserRegisterRequest>): AuthUserRegisterRequest {
    return AuthUserRegisterRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthUserRegisterRequest>): AuthUserRegisterRequest {
    const message = createBaseAuthUserRegisterRequest();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.Role = object.Role ?? 0;
    return message;
  },
};

function createBaseAuthUserLoginByEmailAndPasswordRequest(): AuthUserLoginByEmailAndPasswordRequest {
  return { email: "", password: "" };
}

export const AuthUserLoginByEmailAndPasswordRequest: MessageFns<AuthUserLoginByEmailAndPasswordRequest> = {
  encode(message: AuthUserLoginByEmailAndPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthUserLoginByEmailAndPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthUserLoginByEmailAndPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthUserLoginByEmailAndPasswordRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: AuthUserLoginByEmailAndPasswordRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthUserLoginByEmailAndPasswordRequest>): AuthUserLoginByEmailAndPasswordRequest {
    return AuthUserLoginByEmailAndPasswordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthUserLoginByEmailAndPasswordRequest>): AuthUserLoginByEmailAndPasswordRequest {
    const message = createBaseAuthUserLoginByEmailAndPasswordRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseAuthUserVerifyOtpRequest(): AuthUserVerifyOtpRequest {
  return { otp: "" };
}

export const AuthUserVerifyOtpRequest: MessageFns<AuthUserVerifyOtpRequest> = {
  encode(message: AuthUserVerifyOtpRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.otp !== "") {
      writer.uint32(10).string(message.otp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthUserVerifyOtpRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthUserVerifyOtpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.otp = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthUserVerifyOtpRequest {
    return { otp: isSet(object.otp) ? globalThis.String(object.otp) : "" };
  },

  toJSON(message: AuthUserVerifyOtpRequest): unknown {
    const obj: any = {};
    if (message.otp !== "") {
      obj.otp = message.otp;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthUserVerifyOtpRequest>): AuthUserVerifyOtpRequest {
    return AuthUserVerifyOtpRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthUserVerifyOtpRequest>): AuthUserVerifyOtpRequest {
    const message = createBaseAuthUserVerifyOtpRequest();
    message.otp = object.otp ?? "";
    return message;
  },
};

function createBaseAuthUserLogoutByTokenRequest(): AuthUserLogoutByTokenRequest {
  return { token: "" };
}

export const AuthUserLogoutByTokenRequest: MessageFns<AuthUserLogoutByTokenRequest> = {
  encode(message: AuthUserLogoutByTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthUserLogoutByTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthUserLogoutByTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthUserLogoutByTokenRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: AuthUserLogoutByTokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthUserLogoutByTokenRequest>): AuthUserLogoutByTokenRequest {
    return AuthUserLogoutByTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthUserLogoutByTokenRequest>): AuthUserLogoutByTokenRequest {
    const message = createBaseAuthUserLogoutByTokenRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseAuthUserVerifyAccessControlRequest(): AuthUserVerifyAccessControlRequest {
  return { token: "", fullMethodName: undefined, httpUrl: undefined, httpMethod: undefined };
}

export const AuthUserVerifyAccessControlRequest: MessageFns<AuthUserVerifyAccessControlRequest> = {
  encode(message: AuthUserVerifyAccessControlRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.fullMethodName !== undefined) {
      writer.uint32(18).string(message.fullMethodName);
    }
    if (message.httpUrl !== undefined) {
      writer.uint32(26).string(message.httpUrl);
    }
    if (message.httpMethod !== undefined) {
      writer.uint32(34).string(message.httpMethod);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthUserVerifyAccessControlRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthUserVerifyAccessControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fullMethodName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.httpUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.httpMethod = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthUserVerifyAccessControlRequest {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      fullMethodName: isSet(object.fullMethodName) ? globalThis.String(object.fullMethodName) : undefined,
      httpUrl: isSet(object.httpUrl) ? globalThis.String(object.httpUrl) : undefined,
      httpMethod: isSet(object.httpMethod) ? globalThis.String(object.httpMethod) : undefined,
    };
  },

  toJSON(message: AuthUserVerifyAccessControlRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.fullMethodName !== undefined) {
      obj.fullMethodName = message.fullMethodName;
    }
    if (message.httpUrl !== undefined) {
      obj.httpUrl = message.httpUrl;
    }
    if (message.httpMethod !== undefined) {
      obj.httpMethod = message.httpMethod;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthUserVerifyAccessControlRequest>): AuthUserVerifyAccessControlRequest {
    return AuthUserVerifyAccessControlRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthUserVerifyAccessControlRequest>): AuthUserVerifyAccessControlRequest {
    const message = createBaseAuthUserVerifyAccessControlRequest();
    message.token = object.token ?? "";
    message.fullMethodName = object.fullMethodName ?? undefined;
    message.httpUrl = object.httpUrl ?? undefined;
    message.httpMethod = object.httpMethod ?? undefined;
    return message;
  },
};

function createBaseAuthUserFindUserByTokenRequest(): AuthUserFindUserByTokenRequest {
  return { token: "" };
}

export const AuthUserFindUserByTokenRequest: MessageFns<AuthUserFindUserByTokenRequest> = {
  encode(message: AuthUserFindUserByTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthUserFindUserByTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthUserFindUserByTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthUserFindUserByTokenRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: AuthUserFindUserByTokenRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<AuthUserFindUserByTokenRequest>): AuthUserFindUserByTokenRequest {
    return AuthUserFindUserByTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AuthUserFindUserByTokenRequest>): AuthUserFindUserByTokenRequest {
    const message = createBaseAuthUserFindUserByTokenRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseFindUserByIdRequest(): FindUserByIdRequest {
  return { id: "" };
}

export const FindUserByIdRequest: MessageFns<FindUserByIdRequest> = {
  encode(message: FindUserByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindUserByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindUserByIdRequest>): FindUserByIdRequest {
    return FindUserByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindUserByIdRequest>): FindUserByIdRequest {
    const message = createBaseFindUserByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCreateUserRequest(): CreateUserRequest {
  return { name: "", email: "", password: "", Role: 0 };
}

export const CreateUserRequest: MessageFns<CreateUserRequest> = {
  encode(message: CreateUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(34).string(message.password);
    }
    if (message.Role !== 0) {
      writer.uint32(40).int32(message.Role);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.Role = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateUserRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      Role: isSet(object.Role) ? enumRoleFromJSON(object.Role) : 0,
    };
  },

  toJSON(message: CreateUserRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.Role !== 0) {
      obj.Role = enumRoleToJSON(message.Role);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateUserRequest>): CreateUserRequest {
    return CreateUserRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateUserRequest>): CreateUserRequest {
    const message = createBaseCreateUserRequest();
    message.name = object.name ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.Role = object.Role ?? 0;
    return message;
  },
};

function createBaseUpdateUserByIdRequest(): UpdateUserByIdRequest {
  return { id: "", name: undefined, email: undefined, password: undefined, isVerified: undefined };
}

export const UpdateUserByIdRequest: MessageFns<UpdateUserByIdRequest> = {
  encode(message: UpdateUserByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.email !== undefined) {
      writer.uint32(26).string(message.email);
    }
    if (message.password !== undefined) {
      writer.uint32(34).string(message.password);
    }
    if (message.isVerified !== undefined) {
      writer.uint32(40).bool(message.isVerified);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      email: isSet(object.email) ? globalThis.String(object.email) : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : undefined,
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : undefined,
    };
  },

  toJSON(message: UpdateUserByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.email !== undefined) {
      obj.email = message.email;
    }
    if (message.password !== undefined) {
      obj.password = message.password;
    }
    if (message.isVerified !== undefined) {
      obj.isVerified = message.isVerified;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateUserByIdRequest>): UpdateUserByIdRequest {
    return UpdateUserByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateUserByIdRequest>): UpdateUserByIdRequest {
    const message = createBaseUpdateUserByIdRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? undefined;
    message.email = object.email ?? undefined;
    message.password = object.password ?? undefined;
    message.isVerified = object.isVerified ?? undefined;
    return message;
  },
};

function createBaseFindUserByEmailAndPasswordRequest(): FindUserByEmailAndPasswordRequest {
  return { email: "", password: "" };
}

export const FindUserByEmailAndPasswordRequest: MessageFns<FindUserByEmailAndPasswordRequest> = {
  encode(message: FindUserByEmailAndPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByEmailAndPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByEmailAndPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByEmailAndPasswordRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: FindUserByEmailAndPasswordRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<FindUserByEmailAndPasswordRequest>): FindUserByEmailAndPasswordRequest {
    return FindUserByEmailAndPasswordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindUserByEmailAndPasswordRequest>): FindUserByEmailAndPasswordRequest {
    const message = createBaseFindUserByEmailAndPasswordRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
