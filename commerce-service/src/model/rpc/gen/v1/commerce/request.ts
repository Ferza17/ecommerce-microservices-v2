// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/commerce/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "commerce";

/** CART ITEM REQUEST DEFINITION */
export interface CreateCartItemRequest {
  productId: string;
  userId: string;
  qty: number;
  price: number;
}

export interface UpdateCartItemByIdRequest {
  id: string;
  productId: string;
  userId: string;
  qty: number;
  price: number;
}

export interface FindCartItemsWithPaginationRequest {
  userId: string;
  productIds: string[];
  page: number;
  limit: number;
}

export interface FindCartItemByIdRequest {
  id: string;
}

export interface DeleteCartItemByIdRequest {
  id: string;
}

/** WISHLIST ITEM REQUEST DEFINITION */
export interface CreateWishlistItemRequest {
  productId: string;
  userId: string;
}

export interface FindWishlistItemWithPaginationRequest {
  userId: string;
  productIds: string[];
  page: number;
  limit: number;
}

export interface DeleteWishlistItemByIdRequest {
  id: string;
}

function createBaseCreateCartItemRequest(): CreateCartItemRequest {
  return { productId: "", userId: "", qty: 0, price: 0 };
}

export const CreateCartItemRequest: MessageFns<CreateCartItemRequest> = {
  encode(message: CreateCartItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    if (message.qty !== 0) {
      writer.uint32(24).int32(message.qty);
    }
    if (message.price !== 0) {
      writer.uint32(33).double(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateCartItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateCartItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.qty = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.price = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateCartItemRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      qty: isSet(object.qty) ? globalThis.Number(object.qty) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: CreateCartItemRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.qty !== 0) {
      obj.qty = Math.round(message.qty);
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateCartItemRequest>): CreateCartItemRequest {
    return CreateCartItemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateCartItemRequest>): CreateCartItemRequest {
    const message = createBaseCreateCartItemRequest();
    message.productId = object.productId ?? "";
    message.userId = object.userId ?? "";
    message.qty = object.qty ?? 0;
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseUpdateCartItemByIdRequest(): UpdateCartItemByIdRequest {
  return { id: "", productId: "", userId: "", qty: 0, price: 0 };
}

export const UpdateCartItemByIdRequest: MessageFns<UpdateCartItemByIdRequest> = {
  encode(message: UpdateCartItemByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.productId !== "") {
      writer.uint32(18).string(message.productId);
    }
    if (message.userId !== "") {
      writer.uint32(26).string(message.userId);
    }
    if (message.qty !== 0) {
      writer.uint32(32).int32(message.qty);
    }
    if (message.price !== 0) {
      writer.uint32(41).double(message.price);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateCartItemByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateCartItemByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.qty = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.price = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateCartItemByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      qty: isSet(object.qty) ? globalThis.Number(object.qty) : 0,
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
    };
  },

  toJSON(message: UpdateCartItemByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.qty !== 0) {
      obj.qty = Math.round(message.qty);
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateCartItemByIdRequest>): UpdateCartItemByIdRequest {
    return UpdateCartItemByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateCartItemByIdRequest>): UpdateCartItemByIdRequest {
    const message = createBaseUpdateCartItemByIdRequest();
    message.id = object.id ?? "";
    message.productId = object.productId ?? "";
    message.userId = object.userId ?? "";
    message.qty = object.qty ?? 0;
    message.price = object.price ?? 0;
    return message;
  },
};

function createBaseFindCartItemsWithPaginationRequest(): FindCartItemsWithPaginationRequest {
  return { userId: "", productIds: [], page: 0, limit: 0 };
}

export const FindCartItemsWithPaginationRequest: MessageFns<FindCartItemsWithPaginationRequest> = {
  encode(message: FindCartItemsWithPaginationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.productIds) {
      writer.uint32(18).string(v!);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(32).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindCartItemsWithPaginationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindCartItemsWithPaginationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindCartItemsWithPaginationRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      productIds: globalThis.Array.isArray(object?.productIds)
        ? object.productIds.map((e: any) => globalThis.String(e))
        : [],
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: FindCartItemsWithPaginationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.productIds?.length) {
      obj.productIds = message.productIds;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<FindCartItemsWithPaginationRequest>): FindCartItemsWithPaginationRequest {
    return FindCartItemsWithPaginationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindCartItemsWithPaginationRequest>): FindCartItemsWithPaginationRequest {
    const message = createBaseFindCartItemsWithPaginationRequest();
    message.userId = object.userId ?? "";
    message.productIds = object.productIds?.map((e) => e) || [];
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseFindCartItemByIdRequest(): FindCartItemByIdRequest {
  return { id: "" };
}

export const FindCartItemByIdRequest: MessageFns<FindCartItemByIdRequest> = {
  encode(message: FindCartItemByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindCartItemByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindCartItemByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindCartItemByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindCartItemByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindCartItemByIdRequest>): FindCartItemByIdRequest {
    return FindCartItemByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindCartItemByIdRequest>): FindCartItemByIdRequest {
    const message = createBaseFindCartItemByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteCartItemByIdRequest(): DeleteCartItemByIdRequest {
  return { id: "" };
}

export const DeleteCartItemByIdRequest: MessageFns<DeleteCartItemByIdRequest> = {
  encode(message: DeleteCartItemByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteCartItemByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteCartItemByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteCartItemByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteCartItemByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteCartItemByIdRequest>): DeleteCartItemByIdRequest {
    return DeleteCartItemByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteCartItemByIdRequest>): DeleteCartItemByIdRequest {
    const message = createBaseDeleteCartItemByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCreateWishlistItemRequest(): CreateWishlistItemRequest {
  return { productId: "", userId: "" };
}

export const CreateWishlistItemRequest: MessageFns<CreateWishlistItemRequest> = {
  encode(message: CreateWishlistItemRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.productId !== "") {
      writer.uint32(10).string(message.productId);
    }
    if (message.userId !== "") {
      writer.uint32(18).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateWishlistItemRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWishlistItemRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.productId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateWishlistItemRequest {
    return {
      productId: isSet(object.productId) ? globalThis.String(object.productId) : "",
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
    };
  },

  toJSON(message: CreateWishlistItemRequest): unknown {
    const obj: any = {};
    if (message.productId !== "") {
      obj.productId = message.productId;
    }
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateWishlistItemRequest>): CreateWishlistItemRequest {
    return CreateWishlistItemRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateWishlistItemRequest>): CreateWishlistItemRequest {
    const message = createBaseCreateWishlistItemRequest();
    message.productId = object.productId ?? "";
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseFindWishlistItemWithPaginationRequest(): FindWishlistItemWithPaginationRequest {
  return { userId: "", productIds: [], page: 0, limit: 0 };
}

export const FindWishlistItemWithPaginationRequest: MessageFns<FindWishlistItemWithPaginationRequest> = {
  encode(message: FindWishlistItemWithPaginationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    for (const v of message.productIds) {
      writer.uint32(18).string(v!);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(32).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindWishlistItemWithPaginationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindWishlistItemWithPaginationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.productIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindWishlistItemWithPaginationRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      productIds: globalThis.Array.isArray(object?.productIds)
        ? object.productIds.map((e: any) => globalThis.String(e))
        : [],
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: FindWishlistItemWithPaginationRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.productIds?.length) {
      obj.productIds = message.productIds;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<FindWishlistItemWithPaginationRequest>): FindWishlistItemWithPaginationRequest {
    return FindWishlistItemWithPaginationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindWishlistItemWithPaginationRequest>): FindWishlistItemWithPaginationRequest {
    const message = createBaseFindWishlistItemWithPaginationRequest();
    message.userId = object.userId ?? "";
    message.productIds = object.productIds?.map((e) => e) || [];
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseDeleteWishlistItemByIdRequest(): DeleteWishlistItemByIdRequest {
  return { id: "" };
}

export const DeleteWishlistItemByIdRequest: MessageFns<DeleteWishlistItemByIdRequest> = {
  encode(message: DeleteWishlistItemByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteWishlistItemByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteWishlistItemByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteWishlistItemByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteWishlistItemByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteWishlistItemByIdRequest>): DeleteWishlistItemByIdRequest {
    return DeleteWishlistItemByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteWishlistItemByIdRequest>): DeleteWishlistItemByIdRequest {
    const message = createBaseDeleteWishlistItemByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
