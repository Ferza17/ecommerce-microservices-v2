// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/shipping/response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Payment } from "../payment/model";
import { User } from "../user/model";
import { Shipping, ShippingProvider } from "./model";

export const protobufPackage = "shipping";

export interface ShippingFullResponse {
  id: string;
  user: User | undefined;
  payment: Payment | undefined;
  shippingProvider: ShippingProvider | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  discardedAt?: Date | undefined;
}

export interface CreateShippingResponse {
  message: string;
  status: string;
  data: CreateShippingResponse_CreateShippingResponseData | undefined;
}

export interface CreateShippingResponse_CreateShippingResponseData {
  id: string;
}

export interface GetShippingByIdResponse {
  message: string;
  status: string;
  data: ShippingFullResponse | undefined;
}

export interface ListShippingResponse {
  message: string;
  status: string;
  data: Shipping[];
}

export interface UpdateShippingResponse {
  message: string;
  status: string;
  data: UpdateShippingResponse_UpdateShippingResponseData | undefined;
}

export interface UpdateShippingResponse_UpdateShippingResponseData {
  id: string;
}

export interface DeleteShippingResponse {
  message: string;
  status: string;
  data: DeleteShippingResponse_DeleteShippingResponseData | undefined;
}

export interface DeleteShippingResponse_DeleteShippingResponseData {
  id: string;
}

/** SHIPPING PROVIDER PROTO DEFINITION */
export interface GetShippingProviderByIdResponse {
  message: string;
  status: string;
  data: ShippingProvider | undefined;
}

export interface ListShippingProvidersResponse {
  message: string;
  status: string;
  data: ListShippingProvidersResponse_ListShippingProvidersResponseData | undefined;
}

export interface ListShippingProvidersResponse_ListShippingProvidersResponseData {
  shippingProviders: ShippingProvider[];
  totalCount: number;
  page: number;
  limit: number;
}

function createBaseShippingFullResponse(): ShippingFullResponse {
  return {
    id: "",
    user: undefined,
    payment: undefined,
    shippingProvider: undefined,
    createdAt: undefined,
    updatedAt: undefined,
    discardedAt: undefined,
  };
}

export const ShippingFullResponse: MessageFns<ShippingFullResponse> = {
  encode(message: ShippingFullResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(18).fork()).join();
    }
    if (message.payment !== undefined) {
      Payment.encode(message.payment, writer.uint32(26).fork()).join();
    }
    if (message.shippingProvider !== undefined) {
      ShippingProvider.encode(message.shippingProvider, writer.uint32(34).fork()).join();
    }
    if (message.createdAt !== undefined) {
      Timestamp.encode(toTimestamp(message.createdAt), writer.uint32(802).fork()).join();
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.updatedAt), writer.uint32(8018).fork()).join();
    }
    if (message.discardedAt !== undefined) {
      Timestamp.encode(toTimestamp(message.discardedAt), writer.uint32(8026).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShippingFullResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShippingFullResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payment = Payment.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.shippingProvider = ShippingProvider.decode(reader, reader.uint32());
          continue;
        }
        case 100: {
          if (tag !== 802) {
            break;
          }

          message.createdAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 1002: {
          if (tag !== 8018) {
            break;
          }

          message.updatedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 1003: {
          if (tag !== 8026) {
            break;
          }

          message.discardedAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShippingFullResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
      payment: isSet(object.payment) ? Payment.fromJSON(object.payment) : undefined,
      shippingProvider: isSet(object.shippingProvider) ? ShippingProvider.fromJSON(object.shippingProvider) : undefined,
      createdAt: isSet(object.createdAt) ? fromJsonTimestamp(object.createdAt) : undefined,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      discardedAt: isSet(object.discardedAt) ? fromJsonTimestamp(object.discardedAt) : undefined,
    };
  },

  toJSON(message: ShippingFullResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    if (message.payment !== undefined) {
      obj.payment = Payment.toJSON(message.payment);
    }
    if (message.shippingProvider !== undefined) {
      obj.shippingProvider = ShippingProvider.toJSON(message.shippingProvider);
    }
    if (message.createdAt !== undefined) {
      obj.createdAt = message.createdAt.toISOString();
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = message.updatedAt.toISOString();
    }
    if (message.discardedAt !== undefined) {
      obj.discardedAt = message.discardedAt.toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ShippingFullResponse>): ShippingFullResponse {
    return ShippingFullResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShippingFullResponse>): ShippingFullResponse {
    const message = createBaseShippingFullResponse();
    message.id = object.id ?? "";
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    message.payment = (object.payment !== undefined && object.payment !== null)
      ? Payment.fromPartial(object.payment)
      : undefined;
    message.shippingProvider = (object.shippingProvider !== undefined && object.shippingProvider !== null)
      ? ShippingProvider.fromPartial(object.shippingProvider)
      : undefined;
    message.createdAt = object.createdAt ?? undefined;
    message.updatedAt = object.updatedAt ?? undefined;
    message.discardedAt = object.discardedAt ?? undefined;
    return message;
  },
};

function createBaseCreateShippingResponse(): CreateShippingResponse {
  return { message: "", status: "", data: undefined };
}

export const CreateShippingResponse: MessageFns<CreateShippingResponse> = {
  encode(message: CreateShippingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      CreateShippingResponse_CreateShippingResponseData.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShippingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShippingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = CreateShippingResponse_CreateShippingResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateShippingResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? CreateShippingResponse_CreateShippingResponseData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: CreateShippingResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = CreateShippingResponse_CreateShippingResponseData.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateShippingResponse>): CreateShippingResponse {
    return CreateShippingResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateShippingResponse>): CreateShippingResponse {
    const message = createBaseCreateShippingResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? CreateShippingResponse_CreateShippingResponseData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCreateShippingResponse_CreateShippingResponseData(): CreateShippingResponse_CreateShippingResponseData {
  return { id: "" };
}

export const CreateShippingResponse_CreateShippingResponseData: MessageFns<
  CreateShippingResponse_CreateShippingResponseData
> = {
  encode(
    message: CreateShippingResponse_CreateShippingResponseData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShippingResponse_CreateShippingResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShippingResponse_CreateShippingResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateShippingResponse_CreateShippingResponseData {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreateShippingResponse_CreateShippingResponseData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CreateShippingResponse_CreateShippingResponseData>,
  ): CreateShippingResponse_CreateShippingResponseData {
    return CreateShippingResponse_CreateShippingResponseData.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreateShippingResponse_CreateShippingResponseData>,
  ): CreateShippingResponse_CreateShippingResponseData {
    const message = createBaseCreateShippingResponse_CreateShippingResponseData();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetShippingByIdResponse(): GetShippingByIdResponse {
  return { message: "", status: "", data: undefined };
}

export const GetShippingByIdResponse: MessageFns<GetShippingByIdResponse> = {
  encode(message: GetShippingByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      ShippingFullResponse.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShippingByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShippingByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ShippingFullResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetShippingByIdResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? ShippingFullResponse.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GetShippingByIdResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = ShippingFullResponse.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<GetShippingByIdResponse>): GetShippingByIdResponse {
    return GetShippingByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShippingByIdResponse>): GetShippingByIdResponse {
    const message = createBaseGetShippingByIdResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ShippingFullResponse.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseListShippingResponse(): ListShippingResponse {
  return { message: "", status: "", data: [] };
}

export const ListShippingResponse: MessageFns<ListShippingResponse> = {
  encode(message: ListShippingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    for (const v of message.data) {
      Shipping.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListShippingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShippingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(Shipping.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShippingResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => Shipping.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListShippingResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => Shipping.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListShippingResponse>): ListShippingResponse {
    return ListShippingResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListShippingResponse>): ListShippingResponse {
    const message = createBaseListShippingResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = object.data?.map((e) => Shipping.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateShippingResponse(): UpdateShippingResponse {
  return { message: "", status: "", data: undefined };
}

export const UpdateShippingResponse: MessageFns<UpdateShippingResponse> = {
  encode(message: UpdateShippingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      UpdateShippingResponse_UpdateShippingResponseData.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateShippingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateShippingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = UpdateShippingResponse_UpdateShippingResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateShippingResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? UpdateShippingResponse_UpdateShippingResponseData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateShippingResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = UpdateShippingResponse_UpdateShippingResponseData.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateShippingResponse>): UpdateShippingResponse {
    return UpdateShippingResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateShippingResponse>): UpdateShippingResponse {
    const message = createBaseUpdateShippingResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? UpdateShippingResponse_UpdateShippingResponseData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUpdateShippingResponse_UpdateShippingResponseData(): UpdateShippingResponse_UpdateShippingResponseData {
  return { id: "" };
}

export const UpdateShippingResponse_UpdateShippingResponseData: MessageFns<
  UpdateShippingResponse_UpdateShippingResponseData
> = {
  encode(
    message: UpdateShippingResponse_UpdateShippingResponseData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateShippingResponse_UpdateShippingResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateShippingResponse_UpdateShippingResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateShippingResponse_UpdateShippingResponseData {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: UpdateShippingResponse_UpdateShippingResponseData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<UpdateShippingResponse_UpdateShippingResponseData>,
  ): UpdateShippingResponse_UpdateShippingResponseData {
    return UpdateShippingResponse_UpdateShippingResponseData.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<UpdateShippingResponse_UpdateShippingResponseData>,
  ): UpdateShippingResponse_UpdateShippingResponseData {
    const message = createBaseUpdateShippingResponse_UpdateShippingResponseData();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseDeleteShippingResponse(): DeleteShippingResponse {
  return { message: "", status: "", data: undefined };
}

export const DeleteShippingResponse: MessageFns<DeleteShippingResponse> = {
  encode(message: DeleteShippingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      DeleteShippingResponse_DeleteShippingResponseData.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteShippingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteShippingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = DeleteShippingResponse_DeleteShippingResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteShippingResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? DeleteShippingResponse_DeleteShippingResponseData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: DeleteShippingResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = DeleteShippingResponse_DeleteShippingResponseData.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteShippingResponse>): DeleteShippingResponse {
    return DeleteShippingResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteShippingResponse>): DeleteShippingResponse {
    const message = createBaseDeleteShippingResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? DeleteShippingResponse_DeleteShippingResponseData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeleteShippingResponse_DeleteShippingResponseData(): DeleteShippingResponse_DeleteShippingResponseData {
  return { id: "" };
}

export const DeleteShippingResponse_DeleteShippingResponseData: MessageFns<
  DeleteShippingResponse_DeleteShippingResponseData
> = {
  encode(
    message: DeleteShippingResponse_DeleteShippingResponseData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteShippingResponse_DeleteShippingResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteShippingResponse_DeleteShippingResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteShippingResponse_DeleteShippingResponseData {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteShippingResponse_DeleteShippingResponseData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<DeleteShippingResponse_DeleteShippingResponseData>,
  ): DeleteShippingResponse_DeleteShippingResponseData {
    return DeleteShippingResponse_DeleteShippingResponseData.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<DeleteShippingResponse_DeleteShippingResponseData>,
  ): DeleteShippingResponse_DeleteShippingResponseData {
    const message = createBaseDeleteShippingResponse_DeleteShippingResponseData();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetShippingProviderByIdResponse(): GetShippingProviderByIdResponse {
  return { message: "", status: "", data: undefined };
}

export const GetShippingProviderByIdResponse: MessageFns<GetShippingProviderByIdResponse> = {
  encode(message: GetShippingProviderByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      ShippingProvider.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShippingProviderByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShippingProviderByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ShippingProvider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetShippingProviderByIdResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? ShippingProvider.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GetShippingProviderByIdResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = ShippingProvider.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<GetShippingProviderByIdResponse>): GetShippingProviderByIdResponse {
    return GetShippingProviderByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShippingProviderByIdResponse>): GetShippingProviderByIdResponse {
    const message = createBaseGetShippingProviderByIdResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ShippingProvider.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseListShippingProvidersResponse(): ListShippingProvidersResponse {
  return { message: "", status: "", data: undefined };
}

export const ListShippingProvidersResponse: MessageFns<ListShippingProvidersResponse> = {
  encode(message: ListShippingProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      ListShippingProvidersResponse_ListShippingProvidersResponseData.encode(message.data, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListShippingProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShippingProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ListShippingProvidersResponse_ListShippingProvidersResponseData.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShippingProvidersResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data)
        ? ListShippingProvidersResponse_ListShippingProvidersResponseData.fromJSON(object.data)
        : undefined,
    };
  },

  toJSON(message: ListShippingProvidersResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = ListShippingProvidersResponse_ListShippingProvidersResponseData.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<ListShippingProvidersResponse>): ListShippingProvidersResponse {
    return ListShippingProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListShippingProvidersResponse>): ListShippingProvidersResponse {
    const message = createBaseListShippingProvidersResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ListShippingProvidersResponse_ListShippingProvidersResponseData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseListShippingProvidersResponse_ListShippingProvidersResponseData(): ListShippingProvidersResponse_ListShippingProvidersResponseData {
  return { shippingProviders: [], totalCount: 0, page: 0, limit: 0 };
}

export const ListShippingProvidersResponse_ListShippingProvidersResponseData: MessageFns<
  ListShippingProvidersResponse_ListShippingProvidersResponseData
> = {
  encode(
    message: ListShippingProvidersResponse_ListShippingProvidersResponseData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.shippingProviders) {
      ShippingProvider.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).uint32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).uint32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(32).uint32(message.limit);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ListShippingProvidersResponse_ListShippingProvidersResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShippingProvidersResponse_ListShippingProvidersResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shippingProviders.push(ShippingProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShippingProvidersResponse_ListShippingProvidersResponseData {
    return {
      shippingProviders: globalThis.Array.isArray(object?.shippingProviders)
        ? object.shippingProviders.map((e: any) => ShippingProvider.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ListShippingProvidersResponse_ListShippingProvidersResponseData): unknown {
    const obj: any = {};
    if (message.shippingProviders?.length) {
      obj.shippingProviders = message.shippingProviders.map((e) => ShippingProvider.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListShippingProvidersResponse_ListShippingProvidersResponseData>,
  ): ListShippingProvidersResponse_ListShippingProvidersResponseData {
    return ListShippingProvidersResponse_ListShippingProvidersResponseData.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListShippingProvidersResponse_ListShippingProvidersResponseData>,
  ): ListShippingProvidersResponse_ListShippingProvidersResponseData {
    const message = createBaseListShippingProvidersResponse_ListShippingProvidersResponseData();
    message.shippingProviders = object.shippingProviders?.map((e) => ShippingProvider.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
