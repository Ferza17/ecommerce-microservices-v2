// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/shipping/response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ShippingProvider } from "./model";

export const protobufPackage = "shipping";

/** SHIPPING PROVIDER PROTO DEFINITION */
export interface CreateShippingProviderResponse {
  message: string;
  status: string;
  data: ShippingProvider | undefined;
}

export interface GetShippingProviderByIdResponse {
  message: string;
  status: string;
  data: ShippingProvider | undefined;
}

export interface UpdateShippingProviderResponse {
  message: string;
  status: string;
  data: ShippingProvider | undefined;
}

export interface DeleteShippingProviderResponse {
  message: string;
  status: string;
}

export interface ListShippingProvidersResponse {
  message: string;
  status: string;
  data: ListShippingProvidersResponse_ListShippingProvidersResponseData | undefined;
}

export interface ListShippingProvidersResponse_ListShippingProvidersResponseData {
  shippingProviders: ShippingProvider[];
  totalCount: number;
  page: number;
  limit: number;
}

function createBaseCreateShippingProviderResponse(): CreateShippingProviderResponse {
  return { message: "", status: "", data: undefined };
}

export const CreateShippingProviderResponse: MessageFns<CreateShippingProviderResponse> = {
  encode(message: CreateShippingProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      ShippingProvider.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateShippingProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateShippingProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ShippingProvider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateShippingProviderResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? ShippingProvider.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: CreateShippingProviderResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = ShippingProvider.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateShippingProviderResponse>): CreateShippingProviderResponse {
    return CreateShippingProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateShippingProviderResponse>): CreateShippingProviderResponse {
    const message = createBaseCreateShippingProviderResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ShippingProvider.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseGetShippingProviderByIdResponse(): GetShippingProviderByIdResponse {
  return { message: "", status: "", data: undefined };
}

export const GetShippingProviderByIdResponse: MessageFns<GetShippingProviderByIdResponse> = {
  encode(message: GetShippingProviderByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      ShippingProvider.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetShippingProviderByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetShippingProviderByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ShippingProvider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetShippingProviderByIdResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? ShippingProvider.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: GetShippingProviderByIdResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = ShippingProvider.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<GetShippingProviderByIdResponse>): GetShippingProviderByIdResponse {
    return GetShippingProviderByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetShippingProviderByIdResponse>): GetShippingProviderByIdResponse {
    const message = createBaseGetShippingProviderByIdResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ShippingProvider.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseUpdateShippingProviderResponse(): UpdateShippingProviderResponse {
  return { message: "", status: "", data: undefined };
}

export const UpdateShippingProviderResponse: MessageFns<UpdateShippingProviderResponse> = {
  encode(message: UpdateShippingProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      ShippingProvider.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateShippingProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateShippingProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ShippingProvider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateShippingProviderResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? ShippingProvider.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: UpdateShippingProviderResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = ShippingProvider.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateShippingProviderResponse>): UpdateShippingProviderResponse {
    return UpdateShippingProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateShippingProviderResponse>): UpdateShippingProviderResponse {
    const message = createBaseUpdateShippingProviderResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ShippingProvider.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseDeleteShippingProviderResponse(): DeleteShippingProviderResponse {
  return { message: "", status: "" };
}

export const DeleteShippingProviderResponse: MessageFns<DeleteShippingProviderResponse> = {
  encode(message: DeleteShippingProviderResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteShippingProviderResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteShippingProviderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteShippingProviderResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: DeleteShippingProviderResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteShippingProviderResponse>): DeleteShippingProviderResponse {
    return DeleteShippingProviderResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteShippingProviderResponse>): DeleteShippingProviderResponse {
    const message = createBaseDeleteShippingProviderResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseListShippingProvidersResponse(): ListShippingProvidersResponse {
  return { message: "", status: "", data: undefined };
}

export const ListShippingProvidersResponse: MessageFns<ListShippingProvidersResponse> = {
  encode(message: ListShippingProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      ListShippingProvidersResponse_ListShippingProvidersResponseData.encode(message.data, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListShippingProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShippingProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = ListShippingProvidersResponse_ListShippingProvidersResponseData.decode(
            reader,
            reader.uint32(),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShippingProvidersResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data)
        ? ListShippingProvidersResponse_ListShippingProvidersResponseData.fromJSON(object.data)
        : undefined,
    };
  },

  toJSON(message: ListShippingProvidersResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = ListShippingProvidersResponse_ListShippingProvidersResponseData.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<ListShippingProvidersResponse>): ListShippingProvidersResponse {
    return ListShippingProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListShippingProvidersResponse>): ListShippingProvidersResponse {
    const message = createBaseListShippingProvidersResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? ListShippingProvidersResponse_ListShippingProvidersResponseData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseListShippingProvidersResponse_ListShippingProvidersResponseData(): ListShippingProvidersResponse_ListShippingProvidersResponseData {
  return { shippingProviders: [], totalCount: 0, page: 0, limit: 0 };
}

export const ListShippingProvidersResponse_ListShippingProvidersResponseData: MessageFns<
  ListShippingProvidersResponse_ListShippingProvidersResponseData
> = {
  encode(
    message: ListShippingProvidersResponse_ListShippingProvidersResponseData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.shippingProviders) {
      ShippingProvider.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalCount !== 0) {
      writer.uint32(16).uint32(message.totalCount);
    }
    if (message.page !== 0) {
      writer.uint32(24).uint32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(32).uint32(message.limit);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ListShippingProvidersResponse_ListShippingProvidersResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListShippingProvidersResponse_ListShippingProvidersResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shippingProviders.push(ShippingProvider.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalCount = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListShippingProvidersResponse_ListShippingProvidersResponseData {
    return {
      shippingProviders: globalThis.Array.isArray(object?.shippingProviders)
        ? object.shippingProviders.map((e: any) => ShippingProvider.fromJSON(e))
        : [],
      totalCount: isSet(object.totalCount) ? globalThis.Number(object.totalCount) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: ListShippingProvidersResponse_ListShippingProvidersResponseData): unknown {
    const obj: any = {};
    if (message.shippingProviders?.length) {
      obj.shippingProviders = message.shippingProviders.map((e) => ShippingProvider.toJSON(e));
    }
    if (message.totalCount !== 0) {
      obj.totalCount = Math.round(message.totalCount);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(
    base?: DeepPartial<ListShippingProvidersResponse_ListShippingProvidersResponseData>,
  ): ListShippingProvidersResponse_ListShippingProvidersResponseData {
    return ListShippingProvidersResponse_ListShippingProvidersResponseData.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ListShippingProvidersResponse_ListShippingProvidersResponseData>,
  ): ListShippingProvidersResponse_ListShippingProvidersResponseData {
    const message = createBaseListShippingProvidersResponse_ListShippingProvidersResponseData();
    message.shippingProviders = object.shippingProviders?.map((e) => ShippingProvider.fromPartial(e)) || [];
    message.totalCount = object.totalCount ?? 0;
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
