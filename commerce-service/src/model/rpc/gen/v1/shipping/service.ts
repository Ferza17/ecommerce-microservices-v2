// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/shipping/service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  CreateShippingProviderRequest,
  DeleteShippingProviderRequest,
  GetShippingProviderByIdRequest,
  ListShippingProvidersRequest,
  UpdateShippingProviderRequest,
} from "./request";
import {
  CreateShippingProviderResponse,
  DeleteShippingProviderResponse,
  GetShippingProviderByIdResponse,
  ListShippingProvidersResponse,
  UpdateShippingProviderResponse,
} from "./response";

export const protobufPackage = "shipping";

export type ShippingProviderServiceService = typeof ShippingProviderServiceService;
export const ShippingProviderServiceService = {
  createShippingProvider: {
    path: "/shipping.ShippingProviderService/CreateShippingProvider",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateShippingProviderRequest) =>
      Buffer.from(CreateShippingProviderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateShippingProviderRequest.decode(value),
    responseSerialize: (value: CreateShippingProviderResponse) =>
      Buffer.from(CreateShippingProviderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateShippingProviderResponse.decode(value),
  },
  getShippingProviderById: {
    path: "/shipping.ShippingProviderService/GetShippingProviderById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetShippingProviderByIdRequest) =>
      Buffer.from(GetShippingProviderByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetShippingProviderByIdRequest.decode(value),
    responseSerialize: (value: GetShippingProviderByIdResponse) =>
      Buffer.from(GetShippingProviderByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetShippingProviderByIdResponse.decode(value),
  },
  updateShippingProvider: {
    path: "/shipping.ShippingProviderService/UpdateShippingProvider",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateShippingProviderRequest) =>
      Buffer.from(UpdateShippingProviderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateShippingProviderRequest.decode(value),
    responseSerialize: (value: UpdateShippingProviderResponse) =>
      Buffer.from(UpdateShippingProviderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateShippingProviderResponse.decode(value),
  },
  deleteShippingProvider: {
    path: "/shipping.ShippingProviderService/DeleteShippingProvider",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteShippingProviderRequest) =>
      Buffer.from(DeleteShippingProviderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteShippingProviderRequest.decode(value),
    responseSerialize: (value: DeleteShippingProviderResponse) =>
      Buffer.from(DeleteShippingProviderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteShippingProviderResponse.decode(value),
  },
  listShippingProviders: {
    path: "/shipping.ShippingProviderService/ListShippingProviders",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListShippingProvidersRequest) =>
      Buffer.from(ListShippingProvidersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListShippingProvidersRequest.decode(value),
    responseSerialize: (value: ListShippingProvidersResponse) =>
      Buffer.from(ListShippingProvidersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListShippingProvidersResponse.decode(value),
  },
} as const;

export interface ShippingProviderServiceServer extends UntypedServiceImplementation {
  createShippingProvider: handleUnaryCall<CreateShippingProviderRequest, CreateShippingProviderResponse>;
  getShippingProviderById: handleUnaryCall<GetShippingProviderByIdRequest, GetShippingProviderByIdResponse>;
  updateShippingProvider: handleUnaryCall<UpdateShippingProviderRequest, UpdateShippingProviderResponse>;
  deleteShippingProvider: handleUnaryCall<DeleteShippingProviderRequest, DeleteShippingProviderResponse>;
  listShippingProviders: handleUnaryCall<ListShippingProvidersRequest, ListShippingProvidersResponse>;
}

export interface ShippingProviderServiceClient extends Client {
  createShippingProvider(
    request: CreateShippingProviderRequest,
    callback: (error: ServiceError | null, response: CreateShippingProviderResponse) => void,
  ): ClientUnaryCall;
  createShippingProvider(
    request: CreateShippingProviderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateShippingProviderResponse) => void,
  ): ClientUnaryCall;
  createShippingProvider(
    request: CreateShippingProviderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateShippingProviderResponse) => void,
  ): ClientUnaryCall;
  getShippingProviderById(
    request: GetShippingProviderByIdRequest,
    callback: (error: ServiceError | null, response: GetShippingProviderByIdResponse) => void,
  ): ClientUnaryCall;
  getShippingProviderById(
    request: GetShippingProviderByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetShippingProviderByIdResponse) => void,
  ): ClientUnaryCall;
  getShippingProviderById(
    request: GetShippingProviderByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetShippingProviderByIdResponse) => void,
  ): ClientUnaryCall;
  updateShippingProvider(
    request: UpdateShippingProviderRequest,
    callback: (error: ServiceError | null, response: UpdateShippingProviderResponse) => void,
  ): ClientUnaryCall;
  updateShippingProvider(
    request: UpdateShippingProviderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateShippingProviderResponse) => void,
  ): ClientUnaryCall;
  updateShippingProvider(
    request: UpdateShippingProviderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateShippingProviderResponse) => void,
  ): ClientUnaryCall;
  deleteShippingProvider(
    request: DeleteShippingProviderRequest,
    callback: (error: ServiceError | null, response: DeleteShippingProviderResponse) => void,
  ): ClientUnaryCall;
  deleteShippingProvider(
    request: DeleteShippingProviderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteShippingProviderResponse) => void,
  ): ClientUnaryCall;
  deleteShippingProvider(
    request: DeleteShippingProviderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteShippingProviderResponse) => void,
  ): ClientUnaryCall;
  listShippingProviders(
    request: ListShippingProvidersRequest,
    callback: (error: ServiceError | null, response: ListShippingProvidersResponse) => void,
  ): ClientUnaryCall;
  listShippingProviders(
    request: ListShippingProvidersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListShippingProvidersResponse) => void,
  ): ClientUnaryCall;
  listShippingProviders(
    request: ListShippingProvidersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListShippingProvidersResponse) => void,
  ): ClientUnaryCall;
}

export const ShippingProviderServiceClient = makeGenericClientConstructor(
  ShippingProviderServiceService,
  "shipping.ShippingProviderService",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): ShippingProviderServiceClient;
  service: typeof ShippingProviderServiceService;
  serviceName: string;
};
