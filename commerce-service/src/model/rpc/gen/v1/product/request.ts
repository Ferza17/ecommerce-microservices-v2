// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/product/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "product";

export interface FindProductsWithPaginationRequest {
  ids: string[];
  name: string[];
  page: number;
  limit: number;
}

export interface FindProductByIdRequest {
  id: string;
}

export interface CreateProductRequest {
  name: string;
  description: string;
  uom: string;
  image: string;
  price: number;
  stock: number;
}

export interface UpdateProductByIdRequest {
  id: string;
  name?: string | undefined;
  description?: string | undefined;
  uom?: string | undefined;
  image?: string | undefined;
  price?: number | undefined;
  stock?: number | undefined;
}

export interface DeleteProductByIdRequest {
  id: string;
}

function createBaseFindProductsWithPaginationRequest(): FindProductsWithPaginationRequest {
  return { ids: [], name: [], page: 0, limit: 0 };
}

export const FindProductsWithPaginationRequest: MessageFns<FindProductsWithPaginationRequest> = {
  encode(message: FindProductsWithPaginationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.ids) {
      writer.uint32(10).string(v!);
    }
    for (const v of message.name) {
      writer.uint32(18).string(v!);
    }
    if (message.page !== 0) {
      writer.uint32(24).int32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(32).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindProductsWithPaginationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindProductsWithPaginationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ids.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindProductsWithPaginationRequest {
    return {
      ids: globalThis.Array.isArray(object?.ids) ? object.ids.map((e: any) => globalThis.String(e)) : [],
      name: globalThis.Array.isArray(object?.name) ? object.name.map((e: any) => globalThis.String(e)) : [],
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: FindProductsWithPaginationRequest): unknown {
    const obj: any = {};
    if (message.ids?.length) {
      obj.ids = message.ids;
    }
    if (message.name?.length) {
      obj.name = message.name;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<FindProductsWithPaginationRequest>): FindProductsWithPaginationRequest {
    return FindProductsWithPaginationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindProductsWithPaginationRequest>): FindProductsWithPaginationRequest {
    const message = createBaseFindProductsWithPaginationRequest();
    message.ids = object.ids?.map((e) => e) || [];
    message.name = object.name?.map((e) => e) || [];
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseFindProductByIdRequest(): FindProductByIdRequest {
  return { id: "" };
}

export const FindProductByIdRequest: MessageFns<FindProductByIdRequest> = {
  encode(message: FindProductByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindProductByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindProductByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindProductByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: FindProductByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<FindProductByIdRequest>): FindProductByIdRequest {
    return FindProductByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindProductByIdRequest>): FindProductByIdRequest {
    const message = createBaseFindProductByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCreateProductRequest(): CreateProductRequest {
  return { name: "", description: "", uom: "", image: "", price: 0, stock: 0 };
}

export const CreateProductRequest: MessageFns<CreateProductRequest> = {
  encode(message: CreateProductRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.uom !== "") {
      writer.uint32(26).string(message.uom);
    }
    if (message.image !== "") {
      writer.uint32(34).string(message.image);
    }
    if (message.price !== 0) {
      writer.uint32(41).double(message.price);
    }
    if (message.stock !== 0) {
      writer.uint32(48).int32(message.stock);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateProductRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateProductRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uom = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateProductRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      uom: isSet(object.uom) ? globalThis.String(object.uom) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : "",
      price: isSet(object.price) ? globalThis.Number(object.price) : 0,
      stock: isSet(object.stock) ? globalThis.Number(object.stock) : 0,
    };
  },

  toJSON(message: CreateProductRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.uom !== "") {
      obj.uom = message.uom;
    }
    if (message.image !== "") {
      obj.image = message.image;
    }
    if (message.price !== 0) {
      obj.price = message.price;
    }
    if (message.stock !== 0) {
      obj.stock = Math.round(message.stock);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateProductRequest>): CreateProductRequest {
    return CreateProductRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateProductRequest>): CreateProductRequest {
    const message = createBaseCreateProductRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.uom = object.uom ?? "";
    message.image = object.image ?? "";
    message.price = object.price ?? 0;
    message.stock = object.stock ?? 0;
    return message;
  },
};

function createBaseUpdateProductByIdRequest(): UpdateProductByIdRequest {
  return {
    id: "",
    name: undefined,
    description: undefined,
    uom: undefined,
    image: undefined,
    price: undefined,
    stock: undefined,
  };
}

export const UpdateProductByIdRequest: MessageFns<UpdateProductByIdRequest> = {
  encode(message: UpdateProductByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description);
    }
    if (message.uom !== undefined) {
      writer.uint32(34).string(message.uom);
    }
    if (message.image !== undefined) {
      writer.uint32(42).string(message.image);
    }
    if (message.price !== undefined) {
      writer.uint32(49).double(message.price);
    }
    if (message.stock !== undefined) {
      writer.uint32(56).int32(message.stock);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateProductByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateProductByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.uom = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 49) {
            break;
          }

          message.price = reader.double();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.stock = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateProductByIdRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      uom: isSet(object.uom) ? globalThis.String(object.uom) : undefined,
      image: isSet(object.image) ? globalThis.String(object.image) : undefined,
      price: isSet(object.price) ? globalThis.Number(object.price) : undefined,
      stock: isSet(object.stock) ? globalThis.Number(object.stock) : undefined,
    };
  },

  toJSON(message: UpdateProductByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.uom !== undefined) {
      obj.uom = message.uom;
    }
    if (message.image !== undefined) {
      obj.image = message.image;
    }
    if (message.price !== undefined) {
      obj.price = message.price;
    }
    if (message.stock !== undefined) {
      obj.stock = Math.round(message.stock);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateProductByIdRequest>): UpdateProductByIdRequest {
    return UpdateProductByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateProductByIdRequest>): UpdateProductByIdRequest {
    const message = createBaseUpdateProductByIdRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? undefined;
    message.description = object.description ?? undefined;
    message.uom = object.uom ?? undefined;
    message.image = object.image ?? undefined;
    message.price = object.price ?? undefined;
    message.stock = object.stock ?? undefined;
    return message;
  },
};

function createBaseDeleteProductByIdRequest(): DeleteProductByIdRequest {
  return { id: "" };
}

export const DeleteProductByIdRequest: MessageFns<DeleteProductByIdRequest> = {
  encode(message: DeleteProductByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteProductByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteProductByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteProductByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: DeleteProductByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteProductByIdRequest>): DeleteProductByIdRequest {
    return DeleteProductByIdRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteProductByIdRequest>): DeleteProductByIdRequest {
    const message = createBaseDeleteProductByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
