// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/event/enum.proto

/* eslint-disable */

export const protobufPackage = "event";

/** SagaEventType defines the type of saga event */
export enum SagaEventType {
  SAGA_STARTED = 0,
  SAGA_STEP_STARTED = 1,
  SAGA_STEP_COMPLETED = 2,
  SAGA_STEP_FAILED = 3,
  SAGA_STEP_COMPENSATED = 4,
  SAGA_COMPLETED = 5,
  SAGA_FAILED = 6,
  SAGA_COMPENSATING = 7,
  UNRECOGNIZED = -1,
}

export function sagaEventTypeFromJSON(object: any): SagaEventType {
  switch (object) {
    case 0:
    case "SAGA_STARTED":
      return SagaEventType.SAGA_STARTED;
    case 1:
    case "SAGA_STEP_STARTED":
      return SagaEventType.SAGA_STEP_STARTED;
    case 2:
    case "SAGA_STEP_COMPLETED":
      return SagaEventType.SAGA_STEP_COMPLETED;
    case 3:
    case "SAGA_STEP_FAILED":
      return SagaEventType.SAGA_STEP_FAILED;
    case 4:
    case "SAGA_STEP_COMPENSATED":
      return SagaEventType.SAGA_STEP_COMPENSATED;
    case 5:
    case "SAGA_COMPLETED":
      return SagaEventType.SAGA_COMPLETED;
    case 6:
    case "SAGA_FAILED":
      return SagaEventType.SAGA_FAILED;
    case 7:
    case "SAGA_COMPENSATING":
      return SagaEventType.SAGA_COMPENSATING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SagaEventType.UNRECOGNIZED;
  }
}

export function sagaEventTypeToJSON(object: SagaEventType): string {
  switch (object) {
    case SagaEventType.SAGA_STARTED:
      return "SAGA_STARTED";
    case SagaEventType.SAGA_STEP_STARTED:
      return "SAGA_STEP_STARTED";
    case SagaEventType.SAGA_STEP_COMPLETED:
      return "SAGA_STEP_COMPLETED";
    case SagaEventType.SAGA_STEP_FAILED:
      return "SAGA_STEP_FAILED";
    case SagaEventType.SAGA_STEP_COMPENSATED:
      return "SAGA_STEP_COMPENSATED";
    case SagaEventType.SAGA_COMPLETED:
      return "SAGA_COMPLETED";
    case SagaEventType.SAGA_FAILED:
      return "SAGA_FAILED";
    case SagaEventType.SAGA_COMPENSATING:
      return "SAGA_COMPENSATING";
    case SagaEventType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** CompensationStatus defines the status of compensation */
export enum CompensationStatus {
  COMPENSATION_PENDING = 0,
  COMPENSATION_COMPLETED = 1,
  COMPENSATION_FAILED = 2,
  COMPENSATION_SKIPPED = 3,
  UNRECOGNIZED = -1,
}

export function compensationStatusFromJSON(object: any): CompensationStatus {
  switch (object) {
    case 0:
    case "COMPENSATION_PENDING":
      return CompensationStatus.COMPENSATION_PENDING;
    case 1:
    case "COMPENSATION_COMPLETED":
      return CompensationStatus.COMPENSATION_COMPLETED;
    case 2:
    case "COMPENSATION_FAILED":
      return CompensationStatus.COMPENSATION_FAILED;
    case 3:
    case "COMPENSATION_SKIPPED":
      return CompensationStatus.COMPENSATION_SKIPPED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return CompensationStatus.UNRECOGNIZED;
  }
}

export function compensationStatusToJSON(object: CompensationStatus): string {
  switch (object) {
    case CompensationStatus.COMPENSATION_PENDING:
      return "COMPENSATION_PENDING";
    case CompensationStatus.COMPENSATION_COMPLETED:
      return "COMPENSATION_COMPLETED";
    case CompensationStatus.COMPENSATION_FAILED:
      return "COMPENSATION_FAILED";
    case CompensationStatus.COMPENSATION_SKIPPED:
      return "COMPENSATION_SKIPPED";
    case CompensationStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}
