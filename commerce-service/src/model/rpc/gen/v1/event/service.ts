// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/event/service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { CompensationEvent, Event, SagaEvent } from "./model";
import { EventStreamRequest, GetCompensationEventsRequest, SagaStreamRequest, StoreEventsRequest } from "./request";
import {
  EventStreamResponse,
  GetCompensationEventsResponse,
  SagaStreamResponse,
  StoreCompensationEventResponse,
  StoreEventResponse,
  StoreSagaEventResponse,
} from "./response";

export const protobufPackage = "event";

/** Service definitions */
export type EventStoreServiceService = typeof EventStoreServiceService;
export const EventStoreServiceService = {
  /** Store a single event */
  storeEvent: {
    path: "/event.EventStoreService/StoreEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Event) => Buffer.from(Event.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Event.decode(value),
    responseSerialize: (value: StoreEventResponse) => Buffer.from(StoreEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StoreEventResponse.decode(value),
  },
  /** Store multiple events atomically */
  storeEvents: {
    path: "/event.EventStoreService/StoreEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StoreEventsRequest) => Buffer.from(StoreEventsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StoreEventsRequest.decode(value),
    responseSerialize: (value: StoreEventResponse) => Buffer.from(StoreEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StoreEventResponse.decode(value),
  },
  /** Get events by aggregate */
  getEventStream: {
    path: "/event.EventStoreService/GetEventStream",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: EventStreamRequest) => Buffer.from(EventStreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EventStreamRequest.decode(value),
    responseSerialize: (value: EventStreamResponse) => Buffer.from(EventStreamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => EventStreamResponse.decode(value),
  },
  /** Stream events in real-time */
  streamEvents: {
    path: "/event.EventStoreService/StreamEvents",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: EventStreamRequest) => Buffer.from(EventStreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => EventStreamRequest.decode(value),
    responseSerialize: (value: Event) => Buffer.from(Event.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Event.decode(value),
  },
} as const;

export interface EventStoreServiceServer extends UntypedServiceImplementation {
  /** Store a single event */
  storeEvent: handleUnaryCall<Event, StoreEventResponse>;
  /** Store multiple events atomically */
  storeEvents: handleUnaryCall<StoreEventsRequest, StoreEventResponse>;
  /** Get events by aggregate */
  getEventStream: handleUnaryCall<EventStreamRequest, EventStreamResponse>;
  /** Stream events in real-time */
  streamEvents: handleServerStreamingCall<EventStreamRequest, Event>;
}

export interface EventStoreServiceClient extends Client {
  /** Store a single event */
  storeEvent(
    request: Event,
    callback: (error: ServiceError | null, response: StoreEventResponse) => void,
  ): ClientUnaryCall;
  storeEvent(
    request: Event,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StoreEventResponse) => void,
  ): ClientUnaryCall;
  storeEvent(
    request: Event,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StoreEventResponse) => void,
  ): ClientUnaryCall;
  /** Store multiple events atomically */
  storeEvents(
    request: StoreEventsRequest,
    callback: (error: ServiceError | null, response: StoreEventResponse) => void,
  ): ClientUnaryCall;
  storeEvents(
    request: StoreEventsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StoreEventResponse) => void,
  ): ClientUnaryCall;
  storeEvents(
    request: StoreEventsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StoreEventResponse) => void,
  ): ClientUnaryCall;
  /** Get events by aggregate */
  getEventStream(
    request: EventStreamRequest,
    callback: (error: ServiceError | null, response: EventStreamResponse) => void,
  ): ClientUnaryCall;
  getEventStream(
    request: EventStreamRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: EventStreamResponse) => void,
  ): ClientUnaryCall;
  getEventStream(
    request: EventStreamRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: EventStreamResponse) => void,
  ): ClientUnaryCall;
  /** Stream events in real-time */
  streamEvents(request: EventStreamRequest, options?: Partial<CallOptions>): ClientReadableStream<Event>;
  streamEvents(
    request: EventStreamRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<Event>;
}

export const EventStoreServiceClient = makeGenericClientConstructor(
  EventStoreServiceService,
  "event.EventStoreService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): EventStoreServiceClient;
  service: typeof EventStoreServiceService;
  serviceName: string;
};

export type SagaEventServiceService = typeof SagaEventServiceService;
export const SagaEventServiceService = {
  /** Store saga event */
  storeSagaEvent: {
    path: "/event.SagaEventService/StoreSagaEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SagaEvent) => Buffer.from(SagaEvent.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SagaEvent.decode(value),
    responseSerialize: (value: StoreSagaEventResponse) => Buffer.from(StoreSagaEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StoreSagaEventResponse.decode(value),
  },
  /** Store compensation event */
  storeCompensationEvent: {
    path: "/event.SagaEventService/StoreCompensationEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CompensationEvent) => Buffer.from(CompensationEvent.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CompensationEvent.decode(value),
    responseSerialize: (value: StoreCompensationEventResponse) =>
      Buffer.from(StoreCompensationEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StoreCompensationEventResponse.decode(value),
  },
  /** Get saga events */
  getSagaEvents: {
    path: "/event.SagaEventService/GetSagaEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SagaStreamRequest) => Buffer.from(SagaStreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SagaStreamRequest.decode(value),
    responseSerialize: (value: SagaStreamResponse) => Buffer.from(SagaStreamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SagaStreamResponse.decode(value),
  },
  /** Stream saga events */
  streamSagaEvents: {
    path: "/event.SagaEventService/StreamSagaEvents",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SagaStreamRequest) => Buffer.from(SagaStreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SagaStreamRequest.decode(value),
    responseSerialize: (value: SagaEvent) => Buffer.from(SagaEvent.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SagaEvent.decode(value),
  },
  /** Get compensation events for a saga */
  getCompensationEvents: {
    path: "/event.SagaEventService/GetCompensationEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetCompensationEventsRequest) =>
      Buffer.from(GetCompensationEventsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetCompensationEventsRequest.decode(value),
    responseSerialize: (value: GetCompensationEventsResponse) =>
      Buffer.from(GetCompensationEventsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetCompensationEventsResponse.decode(value),
  },
} as const;

export interface SagaEventServiceServer extends UntypedServiceImplementation {
  /** Store saga event */
  storeSagaEvent: handleUnaryCall<SagaEvent, StoreSagaEventResponse>;
  /** Store compensation event */
  storeCompensationEvent: handleUnaryCall<CompensationEvent, StoreCompensationEventResponse>;
  /** Get saga events */
  getSagaEvents: handleUnaryCall<SagaStreamRequest, SagaStreamResponse>;
  /** Stream saga events */
  streamSagaEvents: handleServerStreamingCall<SagaStreamRequest, SagaEvent>;
  /** Get compensation events for a saga */
  getCompensationEvents: handleUnaryCall<GetCompensationEventsRequest, GetCompensationEventsResponse>;
}

export interface SagaEventServiceClient extends Client {
  /** Store saga event */
  storeSagaEvent(
    request: SagaEvent,
    callback: (error: ServiceError | null, response: StoreSagaEventResponse) => void,
  ): ClientUnaryCall;
  storeSagaEvent(
    request: SagaEvent,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StoreSagaEventResponse) => void,
  ): ClientUnaryCall;
  storeSagaEvent(
    request: SagaEvent,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StoreSagaEventResponse) => void,
  ): ClientUnaryCall;
  /** Store compensation event */
  storeCompensationEvent(
    request: CompensationEvent,
    callback: (error: ServiceError | null, response: StoreCompensationEventResponse) => void,
  ): ClientUnaryCall;
  storeCompensationEvent(
    request: CompensationEvent,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StoreCompensationEventResponse) => void,
  ): ClientUnaryCall;
  storeCompensationEvent(
    request: CompensationEvent,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StoreCompensationEventResponse) => void,
  ): ClientUnaryCall;
  /** Get saga events */
  getSagaEvents(
    request: SagaStreamRequest,
    callback: (error: ServiceError | null, response: SagaStreamResponse) => void,
  ): ClientUnaryCall;
  getSagaEvents(
    request: SagaStreamRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SagaStreamResponse) => void,
  ): ClientUnaryCall;
  getSagaEvents(
    request: SagaStreamRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SagaStreamResponse) => void,
  ): ClientUnaryCall;
  /** Stream saga events */
  streamSagaEvents(request: SagaStreamRequest, options?: Partial<CallOptions>): ClientReadableStream<SagaEvent>;
  streamSagaEvents(
    request: SagaStreamRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SagaEvent>;
  /** Get compensation events for a saga */
  getCompensationEvents(
    request: GetCompensationEventsRequest,
    callback: (error: ServiceError | null, response: GetCompensationEventsResponse) => void,
  ): ClientUnaryCall;
  getCompensationEvents(
    request: GetCompensationEventsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetCompensationEventsResponse) => void,
  ): ClientUnaryCall;
  getCompensationEvents(
    request: GetCompensationEventsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetCompensationEventsResponse) => void,
  ): ClientUnaryCall;
}

export const SagaEventServiceClient = makeGenericClientConstructor(
  SagaEventServiceService,
  "event.SagaEventService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SagaEventServiceClient;
  service: typeof SagaEventServiceService;
  serviceName: string;
};
