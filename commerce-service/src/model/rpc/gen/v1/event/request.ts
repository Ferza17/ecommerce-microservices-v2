// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/event/request.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "../../google/protobuf/timestamp";
import {
  CompensationStatus,
  compensationStatusFromJSON,
  compensationStatusToJSON,
  SagaEventType,
  sagaEventTypeFromJSON,
  sagaEventTypeToJSON,
} from "./enum";
import { Event } from "./model";

export const protobufPackage = "event";

/** EventStreamRequest for querying events */
export interface EventStreamRequest {
  aggregateId: string;
  aggregateType: string;
  fromVersion: number;
  toVersion: number;
  fromTimestamp: Date | undefined;
  toTimestamp: Date | undefined;
  eventTypes: string[];
  limit: number;
}

/** SagaStreamRequest for querying saga events */
export interface SagaStreamRequest {
  sagaId: string;
  sagaType: string;
  eventTypes: SagaEventType[];
  fromTimestamp: Date | undefined;
  toTimestamp: Date | undefined;
  limit: number;
}

export interface StoreEventsRequest {
  events: Event[];
  transactionId: string;
}

export interface GetCompensationEventsRequest {
  sagaId: string;
  status: CompensationStatus;
}

function createBaseEventStreamRequest(): EventStreamRequest {
  return {
    aggregateId: "",
    aggregateType: "",
    fromVersion: 0,
    toVersion: 0,
    fromTimestamp: undefined,
    toTimestamp: undefined,
    eventTypes: [],
    limit: 0,
  };
}

export const EventStreamRequest: MessageFns<EventStreamRequest> = {
  encode(message: EventStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.aggregateId !== "") {
      writer.uint32(10).string(message.aggregateId);
    }
    if (message.aggregateType !== "") {
      writer.uint32(18).string(message.aggregateType);
    }
    if (message.fromVersion !== 0) {
      writer.uint32(24).int64(message.fromVersion);
    }
    if (message.toVersion !== 0) {
      writer.uint32(32).int64(message.toVersion);
    }
    if (message.fromTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.fromTimestamp), writer.uint32(42).fork()).join();
    }
    if (message.toTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.toTimestamp), writer.uint32(50).fork()).join();
    }
    for (const v of message.eventTypes) {
      writer.uint32(58).string(v!);
    }
    if (message.limit !== 0) {
      writer.uint32(64).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.aggregateId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.aggregateType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.fromVersion = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.toVersion = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.fromTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.toTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.eventTypes.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventStreamRequest {
    return {
      aggregateId: isSet(object.aggregateId) ? globalThis.String(object.aggregateId) : "",
      aggregateType: isSet(object.aggregateType) ? globalThis.String(object.aggregateType) : "",
      fromVersion: isSet(object.fromVersion) ? globalThis.Number(object.fromVersion) : 0,
      toVersion: isSet(object.toVersion) ? globalThis.Number(object.toVersion) : 0,
      fromTimestamp: isSet(object.fromTimestamp) ? fromJsonTimestamp(object.fromTimestamp) : undefined,
      toTimestamp: isSet(object.toTimestamp) ? fromJsonTimestamp(object.toTimestamp) : undefined,
      eventTypes: globalThis.Array.isArray(object?.eventTypes)
        ? object.eventTypes.map((e: any) => globalThis.String(e))
        : [],
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: EventStreamRequest): unknown {
    const obj: any = {};
    if (message.aggregateId !== "") {
      obj.aggregateId = message.aggregateId;
    }
    if (message.aggregateType !== "") {
      obj.aggregateType = message.aggregateType;
    }
    if (message.fromVersion !== 0) {
      obj.fromVersion = Math.round(message.fromVersion);
    }
    if (message.toVersion !== 0) {
      obj.toVersion = Math.round(message.toVersion);
    }
    if (message.fromTimestamp !== undefined) {
      obj.fromTimestamp = message.fromTimestamp.toISOString();
    }
    if (message.toTimestamp !== undefined) {
      obj.toTimestamp = message.toTimestamp.toISOString();
    }
    if (message.eventTypes?.length) {
      obj.eventTypes = message.eventTypes;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<EventStreamRequest>): EventStreamRequest {
    return EventStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventStreamRequest>): EventStreamRequest {
    const message = createBaseEventStreamRequest();
    message.aggregateId = object.aggregateId ?? "";
    message.aggregateType = object.aggregateType ?? "";
    message.fromVersion = object.fromVersion ?? 0;
    message.toVersion = object.toVersion ?? 0;
    message.fromTimestamp = object.fromTimestamp ?? undefined;
    message.toTimestamp = object.toTimestamp ?? undefined;
    message.eventTypes = object.eventTypes?.map((e) => e) || [];
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseSagaStreamRequest(): SagaStreamRequest {
  return { sagaId: "", sagaType: "", eventTypes: [], fromTimestamp: undefined, toTimestamp: undefined, limit: 0 };
}

export const SagaStreamRequest: MessageFns<SagaStreamRequest> = {
  encode(message: SagaStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sagaId !== "") {
      writer.uint32(10).string(message.sagaId);
    }
    if (message.sagaType !== "") {
      writer.uint32(18).string(message.sagaType);
    }
    writer.uint32(26).fork();
    for (const v of message.eventTypes) {
      writer.int32(v);
    }
    writer.join();
    if (message.fromTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.fromTimestamp), writer.uint32(34).fork()).join();
    }
    if (message.toTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.toTimestamp), writer.uint32(42).fork()).join();
    }
    if (message.limit !== 0) {
      writer.uint32(48).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SagaStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSagaStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sagaId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sagaType = reader.string();
          continue;
        }
        case 3: {
          if (tag === 24) {
            message.eventTypes.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.eventTypes.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fromTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.toTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SagaStreamRequest {
    return {
      sagaId: isSet(object.sagaId) ? globalThis.String(object.sagaId) : "",
      sagaType: isSet(object.sagaType) ? globalThis.String(object.sagaType) : "",
      eventTypes: globalThis.Array.isArray(object?.eventTypes)
        ? object.eventTypes.map((e: any) => sagaEventTypeFromJSON(e))
        : [],
      fromTimestamp: isSet(object.fromTimestamp) ? fromJsonTimestamp(object.fromTimestamp) : undefined,
      toTimestamp: isSet(object.toTimestamp) ? fromJsonTimestamp(object.toTimestamp) : undefined,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: SagaStreamRequest): unknown {
    const obj: any = {};
    if (message.sagaId !== "") {
      obj.sagaId = message.sagaId;
    }
    if (message.sagaType !== "") {
      obj.sagaType = message.sagaType;
    }
    if (message.eventTypes?.length) {
      obj.eventTypes = message.eventTypes.map((e) => sagaEventTypeToJSON(e));
    }
    if (message.fromTimestamp !== undefined) {
      obj.fromTimestamp = message.fromTimestamp.toISOString();
    }
    if (message.toTimestamp !== undefined) {
      obj.toTimestamp = message.toTimestamp.toISOString();
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<SagaStreamRequest>): SagaStreamRequest {
    return SagaStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SagaStreamRequest>): SagaStreamRequest {
    const message = createBaseSagaStreamRequest();
    message.sagaId = object.sagaId ?? "";
    message.sagaType = object.sagaType ?? "";
    message.eventTypes = object.eventTypes?.map((e) => e) || [];
    message.fromTimestamp = object.fromTimestamp ?? undefined;
    message.toTimestamp = object.toTimestamp ?? undefined;
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseStoreEventsRequest(): StoreEventsRequest {
  return { events: [], transactionId: "" };
}

export const StoreEventsRequest: MessageFns<StoreEventsRequest> = {
  encode(message: StoreEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.transactionId !== "") {
      writer.uint32(18).string(message.transactionId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StoreEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStoreEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transactionId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StoreEventsRequest {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
      transactionId: isSet(object.transactionId) ? globalThis.String(object.transactionId) : "",
    };
  },

  toJSON(message: StoreEventsRequest): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    if (message.transactionId !== "") {
      obj.transactionId = message.transactionId;
    }
    return obj;
  },

  create(base?: DeepPartial<StoreEventsRequest>): StoreEventsRequest {
    return StoreEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StoreEventsRequest>): StoreEventsRequest {
    const message = createBaseStoreEventsRequest();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    message.transactionId = object.transactionId ?? "";
    return message;
  },
};

function createBaseGetCompensationEventsRequest(): GetCompensationEventsRequest {
  return { sagaId: "", status: 0 };
}

export const GetCompensationEventsRequest: MessageFns<GetCompensationEventsRequest> = {
  encode(message: GetCompensationEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sagaId !== "") {
      writer.uint32(10).string(message.sagaId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetCompensationEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetCompensationEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sagaId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetCompensationEventsRequest {
    return {
      sagaId: isSet(object.sagaId) ? globalThis.String(object.sagaId) : "",
      status: isSet(object.status) ? compensationStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: GetCompensationEventsRequest): unknown {
    const obj: any = {};
    if (message.sagaId !== "") {
      obj.sagaId = message.sagaId;
    }
    if (message.status !== 0) {
      obj.status = compensationStatusToJSON(message.status);
    }
    return obj;
  },

  create(base?: DeepPartial<GetCompensationEventsRequest>): GetCompensationEventsRequest {
    return GetCompensationEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetCompensationEventsRequest>): GetCompensationEventsRequest {
    const message = createBaseGetCompensationEventsRequest();
    message.sagaId = object.sagaId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
