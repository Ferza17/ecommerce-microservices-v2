// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/payment/service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Payment, Provider } from "./model";
import {
  FindPaymentByIdRequest,
  FindPaymentByUserIdAndStatusRequest,
  FindPaymentProviderByIdRequest,
  FindPaymentProvidersRequest,
} from "./request";
import { FindPaymentProvidersResponse } from "./response";

export const protobufPackage = "payment";

export type PaymentServiceService = typeof PaymentServiceService;
export const PaymentServiceService = {
  findPaymentById: {
    path: "/payment.PaymentService/FindPaymentById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindPaymentByIdRequest) => Buffer.from(FindPaymentByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindPaymentByIdRequest.decode(value),
    responseSerialize: (value: Payment) => Buffer.from(Payment.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Payment.decode(value),
  },
  findPaymentByUserIdAndStatus: {
    path: "/payment.PaymentService/FindPaymentByUserIdAndStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindPaymentByUserIdAndStatusRequest) =>
      Buffer.from(FindPaymentByUserIdAndStatusRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindPaymentByUserIdAndStatusRequest.decode(value),
    responseSerialize: (value: Payment) => Buffer.from(Payment.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Payment.decode(value),
  },
} as const;

export interface PaymentServiceServer extends UntypedServiceImplementation {
  findPaymentById: handleUnaryCall<FindPaymentByIdRequest, Payment>;
  findPaymentByUserIdAndStatus: handleUnaryCall<FindPaymentByUserIdAndStatusRequest, Payment>;
}

export interface PaymentServiceClient extends Client {
  findPaymentById(
    request: FindPaymentByIdRequest,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
  findPaymentById(
    request: FindPaymentByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
  findPaymentById(
    request: FindPaymentByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
  findPaymentByUserIdAndStatus(
    request: FindPaymentByUserIdAndStatusRequest,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
  findPaymentByUserIdAndStatus(
    request: FindPaymentByUserIdAndStatusRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
  findPaymentByUserIdAndStatus(
    request: FindPaymentByUserIdAndStatusRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Payment) => void,
  ): ClientUnaryCall;
}

export const PaymentServiceClient = makeGenericClientConstructor(
  PaymentServiceService,
  "payment.PaymentService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): PaymentServiceClient;
  service: typeof PaymentServiceService;
  serviceName: string;
};

export type PaymentProviderServiceService = typeof PaymentProviderServiceService;
export const PaymentProviderServiceService = {
  findPaymentProviders: {
    path: "/payment.PaymentProviderService/FindPaymentProviders",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindPaymentProvidersRequest) =>
      Buffer.from(FindPaymentProvidersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindPaymentProvidersRequest.decode(value),
    responseSerialize: (value: FindPaymentProvidersResponse) =>
      Buffer.from(FindPaymentProvidersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FindPaymentProvidersResponse.decode(value),
  },
  findPaymentProviderById: {
    path: "/payment.PaymentProviderService/FindPaymentProviderById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindPaymentProviderByIdRequest) =>
      Buffer.from(FindPaymentProviderByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindPaymentProviderByIdRequest.decode(value),
    responseSerialize: (value: Provider) => Buffer.from(Provider.encode(value).finish()),
    responseDeserialize: (value: Buffer) => Provider.decode(value),
  },
} as const;

export interface PaymentProviderServiceServer extends UntypedServiceImplementation {
  findPaymentProviders: handleUnaryCall<FindPaymentProvidersRequest, FindPaymentProvidersResponse>;
  findPaymentProviderById: handleUnaryCall<FindPaymentProviderByIdRequest, Provider>;
}

export interface PaymentProviderServiceClient extends Client {
  findPaymentProviders(
    request: FindPaymentProvidersRequest,
    callback: (error: ServiceError | null, response: FindPaymentProvidersResponse) => void,
  ): ClientUnaryCall;
  findPaymentProviders(
    request: FindPaymentProvidersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FindPaymentProvidersResponse) => void,
  ): ClientUnaryCall;
  findPaymentProviders(
    request: FindPaymentProvidersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FindPaymentProvidersResponse) => void,
  ): ClientUnaryCall;
  findPaymentProviderById(
    request: FindPaymentProviderByIdRequest,
    callback: (error: ServiceError | null, response: Provider) => void,
  ): ClientUnaryCall;
  findPaymentProviderById(
    request: FindPaymentProviderByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: Provider) => void,
  ): ClientUnaryCall;
  findPaymentProviderById(
    request: FindPaymentProviderByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: Provider) => void,
  ): ClientUnaryCall;
}

export const PaymentProviderServiceClient = makeGenericClientConstructor(
  PaymentProviderServiceService,
  "payment.PaymentProviderService",
) as unknown as {
  new (
    address: string,
    credentials: ChannelCredentials,
    options?: Partial<ClientOptions>,
  ): PaymentProviderServiceClient;
  service: typeof PaymentProviderServiceService;
  serviceName: string;
};
