// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: v1/payment/response.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Provider } from "./model";

export const protobufPackage = "payment";

export interface CreatePaymentResponse {
  message: string;
  status: string;
  data: CreatePaymentResponse_CreatePaymentResponseData | undefined;
}

export interface CreatePaymentResponse_CreatePaymentResponseData {
  id: string;
}

/** PAYMENT PROVIDER PROTO DEFINITION */
export interface FindPaymentProviderByIdResponse {
  message: string;
  status: string;
  data: Provider | undefined;
}

export interface FindPaymentProvidersResponse {
  message: string;
  status: string;
  data: FindPaymentProvidersResponse_FindPaymentProvidersResponseData | undefined;
}

export interface FindPaymentProvidersResponse_FindPaymentProvidersResponseData {
  providers: Provider[];
  page: number;
  limit: number;
}

function createBaseCreatePaymentResponse(): CreatePaymentResponse {
  return { message: "", status: "", data: undefined };
}

export const CreatePaymentResponse: MessageFns<CreatePaymentResponse> = {
  encode(message: CreatePaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      CreatePaymentResponse_CreatePaymentResponseData.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = CreatePaymentResponse_CreatePaymentResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? CreatePaymentResponse_CreatePaymentResponseData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: CreatePaymentResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = CreatePaymentResponse_CreatePaymentResponseData.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<CreatePaymentResponse>): CreatePaymentResponse {
    return CreatePaymentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreatePaymentResponse>): CreatePaymentResponse {
    const message = createBaseCreatePaymentResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? CreatePaymentResponse_CreatePaymentResponseData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseCreatePaymentResponse_CreatePaymentResponseData(): CreatePaymentResponse_CreatePaymentResponseData {
  return { id: "" };
}

export const CreatePaymentResponse_CreatePaymentResponseData: MessageFns<
  CreatePaymentResponse_CreatePaymentResponseData
> = {
  encode(
    message: CreatePaymentResponse_CreatePaymentResponseData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreatePaymentResponse_CreatePaymentResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePaymentResponse_CreatePaymentResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreatePaymentResponse_CreatePaymentResponseData {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CreatePaymentResponse_CreatePaymentResponseData): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(
    base?: DeepPartial<CreatePaymentResponse_CreatePaymentResponseData>,
  ): CreatePaymentResponse_CreatePaymentResponseData {
    return CreatePaymentResponse_CreatePaymentResponseData.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreatePaymentResponse_CreatePaymentResponseData>,
  ): CreatePaymentResponse_CreatePaymentResponseData {
    const message = createBaseCreatePaymentResponse_CreatePaymentResponseData();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseFindPaymentProviderByIdResponse(): FindPaymentProviderByIdResponse {
  return { message: "", status: "", data: undefined };
}

export const FindPaymentProviderByIdResponse: MessageFns<FindPaymentProviderByIdResponse> = {
  encode(message: FindPaymentProviderByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      Provider.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentProviderByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentProviderByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = Provider.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentProviderByIdResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data) ? Provider.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: FindPaymentProviderByIdResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = Provider.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentProviderByIdResponse>): FindPaymentProviderByIdResponse {
    return FindPaymentProviderByIdResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentProviderByIdResponse>): FindPaymentProviderByIdResponse {
    const message = createBaseFindPaymentProviderByIdResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null) ? Provider.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseFindPaymentProvidersResponse(): FindPaymentProvidersResponse {
  return { message: "", status: "", data: undefined };
}

export const FindPaymentProvidersResponse: MessageFns<FindPaymentProvidersResponse> = {
  encode(message: FindPaymentProvidersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== "") {
      writer.uint32(18).string(message.status);
    }
    if (message.data !== undefined) {
      FindPaymentProvidersResponse_FindPaymentProvidersResponseData.encode(message.data, writer.uint32(26).fork())
        .join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindPaymentProvidersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentProvidersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = FindPaymentProvidersResponse_FindPaymentProvidersResponseData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentProvidersResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      data: isSet(object.data)
        ? FindPaymentProvidersResponse_FindPaymentProvidersResponseData.fromJSON(object.data)
        : undefined,
    };
  },

  toJSON(message: FindPaymentProvidersResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.data !== undefined) {
      obj.data = FindPaymentProvidersResponse_FindPaymentProvidersResponseData.toJSON(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<FindPaymentProvidersResponse>): FindPaymentProvidersResponse {
    return FindPaymentProvidersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FindPaymentProvidersResponse>): FindPaymentProvidersResponse {
    const message = createBaseFindPaymentProvidersResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? "";
    message.data = (object.data !== undefined && object.data !== null)
      ? FindPaymentProvidersResponse_FindPaymentProvidersResponseData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFindPaymentProvidersResponse_FindPaymentProvidersResponseData(): FindPaymentProvidersResponse_FindPaymentProvidersResponseData {
  return { providers: [], page: 0, limit: 0 };
}

export const FindPaymentProvidersResponse_FindPaymentProvidersResponseData: MessageFns<
  FindPaymentProvidersResponse_FindPaymentProvidersResponseData
> = {
  encode(
    message: FindPaymentProvidersResponse_FindPaymentProvidersResponseData,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.providers) {
      Provider.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.page !== 0) {
      writer.uint32(16).uint32(message.page);
    }
    if (message.limit !== 0) {
      writer.uint32(24).uint32(message.limit);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): FindPaymentProvidersResponse_FindPaymentProvidersResponseData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindPaymentProvidersResponse_FindPaymentProvidersResponseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.providers.push(Provider.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.page = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindPaymentProvidersResponse_FindPaymentProvidersResponseData {
    return {
      providers: globalThis.Array.isArray(object?.providers)
        ? object.providers.map((e: any) => Provider.fromJSON(e))
        : [],
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: FindPaymentProvidersResponse_FindPaymentProvidersResponseData): unknown {
    const obj: any = {};
    if (message.providers?.length) {
      obj.providers = message.providers.map((e) => Provider.toJSON(e));
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(
    base?: DeepPartial<FindPaymentProvidersResponse_FindPaymentProvidersResponseData>,
  ): FindPaymentProvidersResponse_FindPaymentProvidersResponseData {
    return FindPaymentProvidersResponse_FindPaymentProvidersResponseData.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<FindPaymentProvidersResponse_FindPaymentProvidersResponseData>,
  ): FindPaymentProvidersResponse_FindPaymentProvidersResponseData {
    const message = createBaseFindPaymentProvidersResponse_FindPaymentProvidersResponseData();
    message.providers = object.providers?.map((e) => Provider.fromPartial(e)) || [];
    message.page = object.page ?? 0;
    message.limit = object.limit ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
