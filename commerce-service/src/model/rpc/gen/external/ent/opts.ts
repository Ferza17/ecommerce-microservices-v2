// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: external/ent/opts.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "ent";

export interface Schema {
  gen?: boolean | undefined;
  name?: string | undefined;
}

export interface Field {
  optional?: boolean | undefined;
  nillable?: boolean | undefined;
  unique?: boolean | undefined;
  sensitive?: boolean | undefined;
  immutable?: boolean | undefined;
  comment?: string | undefined;
  structTag?: string | undefined;
  storageKey?: string | undefined;
  schemaType: { [key: string]: string };
}

export interface Field_SchemaTypeEntry {
  key: string;
  value: string;
}

export interface Edge {
  unique?: boolean | undefined;
  ref?: string | undefined;
  required?: boolean | undefined;
  field?: string | undefined;
  storageKey?: Edge_StorageKey | undefined;
  structTag?: string | undefined;
}

export interface Edge_StorageKey {
  table?: string | undefined;
  columns: string[];
}

function createBaseSchema(): Schema {
  return { gen: false, name: "" };
}

export const Schema: MessageFns<Schema> = {
  encode(message: Schema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gen !== undefined && message.gen !== false) {
      writer.uint32(8).bool(message.gen);
    }
    if (message.name !== undefined && message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Schema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gen = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Schema {
    return {
      gen: isSet(object.gen) ? globalThis.Boolean(object.gen) : false,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
    };
  },

  toJSON(message: Schema): unknown {
    const obj: any = {};
    if (message.gen !== undefined && message.gen !== false) {
      obj.gen = message.gen;
    }
    if (message.name !== undefined && message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<Schema>): Schema {
    return Schema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Schema>): Schema {
    const message = createBaseSchema();
    message.gen = object.gen ?? false;
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseField(): Field {
  return {
    optional: false,
    nillable: false,
    unique: false,
    sensitive: false,
    immutable: false,
    comment: "",
    structTag: "",
    storageKey: "",
    schemaType: {},
  };
}

export const Field: MessageFns<Field> = {
  encode(message: Field, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.optional !== undefined && message.optional !== false) {
      writer.uint32(8).bool(message.optional);
    }
    if (message.nillable !== undefined && message.nillable !== false) {
      writer.uint32(16).bool(message.nillable);
    }
    if (message.unique !== undefined && message.unique !== false) {
      writer.uint32(24).bool(message.unique);
    }
    if (message.sensitive !== undefined && message.sensitive !== false) {
      writer.uint32(32).bool(message.sensitive);
    }
    if (message.immutable !== undefined && message.immutable !== false) {
      writer.uint32(40).bool(message.immutable);
    }
    if (message.comment !== undefined && message.comment !== "") {
      writer.uint32(50).string(message.comment);
    }
    if (message.structTag !== undefined && message.structTag !== "") {
      writer.uint32(58).string(message.structTag);
    }
    if (message.storageKey !== undefined && message.storageKey !== "") {
      writer.uint32(66).string(message.storageKey);
    }
    Object.entries(message.schemaType).forEach(([key, value]) => {
      Field_SchemaTypeEntry.encode({ key: key as any, value }, writer.uint32(74).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.optional = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nillable = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.unique = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sensitive = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.immutable = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.structTag = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.storageKey = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          const entry9 = Field_SchemaTypeEntry.decode(reader, reader.uint32());
          if (entry9.value !== undefined) {
            message.schemaType[entry9.key] = entry9.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field {
    return {
      optional: isSet(object.optional) ? globalThis.Boolean(object.optional) : false,
      nillable: isSet(object.nillable) ? globalThis.Boolean(object.nillable) : false,
      unique: isSet(object.unique) ? globalThis.Boolean(object.unique) : false,
      sensitive: isSet(object.sensitive) ? globalThis.Boolean(object.sensitive) : false,
      immutable: isSet(object.immutable) ? globalThis.Boolean(object.immutable) : false,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      structTag: isSet(object.structTag) ? globalThis.String(object.structTag) : "",
      storageKey: isSet(object.storageKey) ? globalThis.String(object.storageKey) : "",
      schemaType: isObject(object.schemaType)
        ? Object.entries(object.schemaType).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Field): unknown {
    const obj: any = {};
    if (message.optional !== undefined && message.optional !== false) {
      obj.optional = message.optional;
    }
    if (message.nillable !== undefined && message.nillable !== false) {
      obj.nillable = message.nillable;
    }
    if (message.unique !== undefined && message.unique !== false) {
      obj.unique = message.unique;
    }
    if (message.sensitive !== undefined && message.sensitive !== false) {
      obj.sensitive = message.sensitive;
    }
    if (message.immutable !== undefined && message.immutable !== false) {
      obj.immutable = message.immutable;
    }
    if (message.comment !== undefined && message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.structTag !== undefined && message.structTag !== "") {
      obj.structTag = message.structTag;
    }
    if (message.storageKey !== undefined && message.storageKey !== "") {
      obj.storageKey = message.storageKey;
    }
    if (message.schemaType) {
      const entries = Object.entries(message.schemaType);
      if (entries.length > 0) {
        obj.schemaType = {};
        entries.forEach(([k, v]) => {
          obj.schemaType[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Field>): Field {
    return Field.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field>): Field {
    const message = createBaseField();
    message.optional = object.optional ?? false;
    message.nillable = object.nillable ?? false;
    message.unique = object.unique ?? false;
    message.sensitive = object.sensitive ?? false;
    message.immutable = object.immutable ?? false;
    message.comment = object.comment ?? "";
    message.structTag = object.structTag ?? "";
    message.storageKey = object.storageKey ?? "";
    message.schemaType = Object.entries(object.schemaType ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseField_SchemaTypeEntry(): Field_SchemaTypeEntry {
  return { key: "", value: "" };
}

export const Field_SchemaTypeEntry: MessageFns<Field_SchemaTypeEntry> = {
  encode(message: Field_SchemaTypeEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Field_SchemaTypeEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseField_SchemaTypeEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Field_SchemaTypeEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Field_SchemaTypeEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Field_SchemaTypeEntry>): Field_SchemaTypeEntry {
    return Field_SchemaTypeEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Field_SchemaTypeEntry>): Field_SchemaTypeEntry {
    const message = createBaseField_SchemaTypeEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseEdge(): Edge {
  return { unique: false, ref: "", required: false, field: "", storageKey: undefined, structTag: "" };
}

export const Edge: MessageFns<Edge> = {
  encode(message: Edge, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unique !== undefined && message.unique !== false) {
      writer.uint32(8).bool(message.unique);
    }
    if (message.ref !== undefined && message.ref !== "") {
      writer.uint32(18).string(message.ref);
    }
    if (message.required !== undefined && message.required !== false) {
      writer.uint32(24).bool(message.required);
    }
    if (message.field !== undefined && message.field !== "") {
      writer.uint32(34).string(message.field);
    }
    if (message.storageKey !== undefined) {
      Edge_StorageKey.encode(message.storageKey, writer.uint32(42).fork()).join();
    }
    if (message.structTag !== undefined && message.structTag !== "") {
      writer.uint32(50).string(message.structTag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Edge {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdge();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.unique = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ref = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.required = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.field = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.storageKey = Edge_StorageKey.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.structTag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Edge {
    return {
      unique: isSet(object.unique) ? globalThis.Boolean(object.unique) : false,
      ref: isSet(object.ref) ? globalThis.String(object.ref) : "",
      required: isSet(object.required) ? globalThis.Boolean(object.required) : false,
      field: isSet(object.field) ? globalThis.String(object.field) : "",
      storageKey: isSet(object.storageKey) ? Edge_StorageKey.fromJSON(object.storageKey) : undefined,
      structTag: isSet(object.structTag) ? globalThis.String(object.structTag) : "",
    };
  },

  toJSON(message: Edge): unknown {
    const obj: any = {};
    if (message.unique !== undefined && message.unique !== false) {
      obj.unique = message.unique;
    }
    if (message.ref !== undefined && message.ref !== "") {
      obj.ref = message.ref;
    }
    if (message.required !== undefined && message.required !== false) {
      obj.required = message.required;
    }
    if (message.field !== undefined && message.field !== "") {
      obj.field = message.field;
    }
    if (message.storageKey !== undefined) {
      obj.storageKey = Edge_StorageKey.toJSON(message.storageKey);
    }
    if (message.structTag !== undefined && message.structTag !== "") {
      obj.structTag = message.structTag;
    }
    return obj;
  },

  create(base?: DeepPartial<Edge>): Edge {
    return Edge.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Edge>): Edge {
    const message = createBaseEdge();
    message.unique = object.unique ?? false;
    message.ref = object.ref ?? "";
    message.required = object.required ?? false;
    message.field = object.field ?? "";
    message.storageKey = (object.storageKey !== undefined && object.storageKey !== null)
      ? Edge_StorageKey.fromPartial(object.storageKey)
      : undefined;
    message.structTag = object.structTag ?? "";
    return message;
  },
};

function createBaseEdge_StorageKey(): Edge_StorageKey {
  return { table: "", columns: [] };
}

export const Edge_StorageKey: MessageFns<Edge_StorageKey> = {
  encode(message: Edge_StorageKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.table !== undefined && message.table !== "") {
      writer.uint32(10).string(message.table);
    }
    for (const v of message.columns) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Edge_StorageKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEdge_StorageKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.table = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.columns.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Edge_StorageKey {
    return {
      table: isSet(object.table) ? globalThis.String(object.table) : "",
      columns: globalThis.Array.isArray(object?.columns) ? object.columns.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Edge_StorageKey): unknown {
    const obj: any = {};
    if (message.table !== undefined && message.table !== "") {
      obj.table = message.table;
    }
    if (message.columns?.length) {
      obj.columns = message.columns;
    }
    return obj;
  },

  create(base?: DeepPartial<Edge_StorageKey>): Edge_StorageKey {
    return Edge_StorageKey.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Edge_StorageKey>): Edge_StorageKey {
    const message = createBaseEdge_StorageKey();
    message.table = object.table ?? "";
    message.columns = object.columns?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
