// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: user/v1/authServices.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import {
  FindUserByTokenRequest,
  UserLogoutByTokenRequest,
  UserLogoutByTokenResponse,
  UserVerifyOtpRequest,
  UserVerifyOtpResponse,
} from "./authMessage";
import { User } from "./userMessage";

export const protobufPackage = "user_v1";

export type AuthServiceService = typeof AuthServiceService;
export const AuthServiceService = {
  userLogoutByToken: {
    path: "/user_v1.AuthService/UserLogoutByToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserLogoutByTokenRequest) => Buffer.from(UserLogoutByTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserLogoutByTokenRequest.decode(value),
    responseSerialize: (value: UserLogoutByTokenResponse) =>
      Buffer.from(UserLogoutByTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserLogoutByTokenResponse.decode(value),
  },
  userVerifyOtp: {
    path: "/user_v1.AuthService/UserVerifyOtp",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UserVerifyOtpRequest) => Buffer.from(UserVerifyOtpRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UserVerifyOtpRequest.decode(value),
    responseSerialize: (value: UserVerifyOtpResponse) => Buffer.from(UserVerifyOtpResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserVerifyOtpResponse.decode(value),
  },
  findUserByToken: {
    path: "/user_v1.AuthService/FindUserByToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: FindUserByTokenRequest) => Buffer.from(FindUserByTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => FindUserByTokenRequest.decode(value),
    responseSerialize: (value: User) => Buffer.from(User.encode(value).finish()),
    responseDeserialize: (value: Buffer) => User.decode(value),
  },
} as const;

export interface AuthServiceServer extends UntypedServiceImplementation {
  userLogoutByToken: handleUnaryCall<UserLogoutByTokenRequest, UserLogoutByTokenResponse>;
  userVerifyOtp: handleUnaryCall<UserVerifyOtpRequest, UserVerifyOtpResponse>;
  findUserByToken: handleUnaryCall<FindUserByTokenRequest, User>;
}

export interface AuthServiceClient extends Client {
  userLogoutByToken(
    request: UserLogoutByTokenRequest,
    callback: (error: ServiceError | null, response: UserLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  userLogoutByToken(
    request: UserLogoutByTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  userLogoutByToken(
    request: UserLogoutByTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserLogoutByTokenResponse) => void,
  ): ClientUnaryCall;
  userVerifyOtp(
    request: UserVerifyOtpRequest,
    callback: (error: ServiceError | null, response: UserVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  userVerifyOtp(
    request: UserVerifyOtpRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  userVerifyOtp(
    request: UserVerifyOtpRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserVerifyOtpResponse) => void,
  ): ClientUnaryCall;
  findUserByToken(
    request: FindUserByTokenRequest,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByToken(
    request: FindUserByTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
  findUserByToken(
    request: FindUserByTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: User) => void,
  ): ClientUnaryCall;
}

export const AuthServiceClient = makeGenericClientConstructor(AuthServiceService, "user_v1.AuthService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): AuthServiceClient;
  service: typeof AuthServiceService;
  serviceName: string;
};
