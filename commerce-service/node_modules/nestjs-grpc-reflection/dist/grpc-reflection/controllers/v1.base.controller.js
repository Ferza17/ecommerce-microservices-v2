"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseV1GrpcReflectionController = void 0;
const rxjs_1 = require("rxjs");
const ts_case_convert_1 = require("ts-case-convert");
const protoLoader = require("@grpc/proto-loader");
const common_1 = require("@nestjs/common");
const grpc_reflection_constants_1 = require("../grpc-reflection.constants");
const reflection_v1_1 = require("@grpc/reflection/build/src/implementations/reflection-v1");
let BaseV1GrpcReflectionController = class BaseV1GrpcReflectionController {
    constructor(grpcConfig) {
        this.grpcConfig = grpcConfig;
        const { protoPath, loader } = grpcConfig.options;
        const protoFiles = Array.isArray(protoPath) ? protoPath : [protoPath];
        const root = protoLoader.loadSync(protoFiles, loader);
        this.grpcReflectionService = new reflection_v1_1.ReflectionV1Implementation(root);
    }
    serverReflectionInfo(request$) {
        const response$ = new rxjs_1.Subject();
        const onComplete = () => response$.complete();
        const onNext = (rawMsg) => {
            var _a, _b;
            let message = rawMsg;
            if ((_a = this.grpcConfig.options.loader) === null || _a === void 0 ? void 0 : _a.keepCase) {
                message = (0, ts_case_convert_1.objectToCamel)(message);
                message['messageRequest'] = (0, ts_case_convert_1.toCamel)(message['messageRequest']);
            }
            const response = this.grpcReflectionService.handleServerReflectionRequest(message);
            if ((_b = this.grpcConfig.options.loader) === null || _b === void 0 ? void 0 : _b.keepCase) {
                const convertedResponse = (0, ts_case_convert_1.objectToSnake)(response);
                const fixedConvertedResponse = Object.assign(Object.assign({}, convertedResponse), { file_descriptor_response: convertedResponse.file_descriptor_response
                        ? Object.assign(Object.assign({}, convertedResponse.file_descriptor_response), { file_descriptor_proto: response.fileDescriptorResponse.fileDescriptorProto }) : convertedResponse.file_descriptor_response });
                response$.next(fixedConvertedResponse);
            }
            else {
                response$.next(response);
            }
        };
        request$.subscribe({
            next: onNext,
            complete: onComplete,
        });
        return response$.asObservable();
    }
};
exports.BaseV1GrpcReflectionController = BaseV1GrpcReflectionController;
exports.BaseV1GrpcReflectionController = BaseV1GrpcReflectionController = __decorate([
    __param(0, (0, common_1.Inject)(grpc_reflection_constants_1.GRPC_CONFIG_PROVIDER_TOKEN)),
    __metadata("design:paramtypes", [Object])
], BaseV1GrpcReflectionController);
//# sourceMappingURL=v1.base.controller.js.map